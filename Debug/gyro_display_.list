
gyro_display_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d04  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009e18  08009e18  00019e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a32c  0800a32c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a32c  0800a32c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a32c  0800a32c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a32c  0800a32c  0001a32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a330  0800a330  0001a330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001e4  0800a518  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  0800a518  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118a4  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a5  00000000  00000000  00031ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00033e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00034f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018834  00000000  00000000  00035fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012541  00000000  00000000  0004e7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc11  00000000  00000000  00060d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f092e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e64  00000000  00000000  000f0980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009dfc 	.word	0x08009dfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08009dfc 	.word	0x08009dfc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_d2lz>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4605      	mov	r5, r0
 8000f3c:	460c      	mov	r4, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2300      	movs	r3, #0
 8000f42:	4628      	mov	r0, r5
 8000f44:	4621      	mov	r1, r4
 8000f46:	f7ff fded 	bl	8000b24 <__aeabi_dcmplt>
 8000f4a:	b928      	cbnz	r0, 8000f58 <__aeabi_d2lz+0x20>
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	4621      	mov	r1, r4
 8000f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f54:	f000 b80a 	b.w	8000f6c <__aeabi_d2ulz>
 8000f58:	4628      	mov	r0, r5
 8000f5a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f5e:	f000 f805 	bl	8000f6c <__aeabi_d2ulz>
 8000f62:	4240      	negs	r0, r0
 8000f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f68:	bd38      	pop	{r3, r4, r5, pc}
 8000f6a:	bf00      	nop

08000f6c <__aeabi_d2ulz>:
 8000f6c:	b5d0      	push	{r4, r6, r7, lr}
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <__aeabi_d2ulz+0x34>)
 8000f72:	4606      	mov	r6, r0
 8000f74:	460f      	mov	r7, r1
 8000f76:	f7ff fb63 	bl	8000640 <__aeabi_dmul>
 8000f7a:	f7ff fe39 	bl	8000bf0 <__aeabi_d2uiz>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	f7ff fae4 	bl	800054c <__aeabi_ui2d>
 8000f84:	2200      	movs	r2, #0
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <__aeabi_d2ulz+0x38>)
 8000f88:	f7ff fb5a 	bl	8000640 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4630      	mov	r0, r6
 8000f92:	4639      	mov	r1, r7
 8000f94:	f7ff f99c 	bl	80002d0 <__aeabi_dsub>
 8000f98:	f7ff fe2a 	bl	8000bf0 <__aeabi_d2uiz>
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000fa0:	3df00000 	.word	0x3df00000
 8000fa4:	41f00000 	.word	0x41f00000

08000fa8 <convert_accel_raw_to_g>:
#include "stm32f1xx_hal.h"
#include <string.h>
#include <inttypes.h>
#include "lsm6ds3.h"

float convert_accel_raw_to_g(int16_t raw, float scale) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	80fb      	strh	r3, [r7, #6]
    return raw * scale;
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff43 	bl	8000e44 <__aeabi_i2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6839      	ldr	r1, [r7, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f8cc 	bl	8000160 <__aeabi_fmul>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <set_ctrl1_xl>:

void set_ctrl1_xl(I2C_HandleTypeDef* hi2cx, uint8_t value) {
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af04      	add	r7, sp, #16
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(hi2cx, LSM6DSO_ADDR, CTRL1_XL, 1, &value, 1, HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	1cfb      	adds	r3, r7, #3
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2210      	movs	r2, #16
 8000ff0:	21d6      	movs	r1, #214	; 0xd6
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f002 f82a 	bl	800304c <HAL_I2C_Mem_Write>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <set_ctrl2_g>:

void set_ctrl2_g(I2C_HandleTypeDef* hi2cx, uint8_t value) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(hi2cx, LSM6DSO_ADDR, CTRL2_G, 1, &value, 1, HAL_MAX_DELAY);
 800100c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	1cfb      	adds	r3, r7, #3
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	2211      	movs	r2, #17
 800101e:	21d6      	movs	r1, #214	; 0xd6
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f002 f813 	bl	800304c <HAL_I2C_Mem_Write>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <get_outx_l_g>:

uint8_t get_outx_l_g(I2C_HandleTypeDef* hi2cx) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b088      	sub	sp, #32
 8001032:	af04      	add	r7, sp, #16
 8001034:	6078      	str	r0, [r7, #4]
    uint8_t outx_l_g = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTX_L_G, 1, &outx_l_g, 1, HAL_MAX_DELAY);
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030f 	add.w	r3, r7, #15
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	2222      	movs	r2, #34	; 0x22
 800104e:	21d6      	movs	r1, #214	; 0xd6
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f002 f8f5 	bl	8003240 <HAL_I2C_Mem_Read>

    return outx_l_g;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <get_outx_h_g>:

uint8_t get_outx_h_g(I2C_HandleTypeDef* hi2cx) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]
    uint8_t outx_h_g = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTX_H_G, 1, &outx_h_g, 1, HAL_MAX_DELAY);
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2301      	movs	r3, #1
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 030f 	add.w	r3, r7, #15
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	2223      	movs	r2, #35	; 0x23
 8001080:	21d6      	movs	r1, #214	; 0xd6
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f002 f8dc 	bl	8003240 <HAL_I2C_Mem_Read>

    return outx_h_g;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <get_x_g>:

int16_t get_x_g(I2C_HandleTypeDef* hi2cx) {
 8001092:	b590      	push	{r4, r7, lr}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
    return (uint16_t)(get_outx_h_g(hi2cx) << 8 | get_outx_l_g(hi2cx));
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffe0 	bl	8001060 <get_outx_h_g>
 80010a0:	4603      	mov	r3, r0
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21c      	sxth	r4, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffc1 	bl	800102e <get_outx_l_g>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4323      	orrs	r3, r4
 80010b2:	b21b      	sxth	r3, r3
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}

080010bc <get_outy_l_g>:

uint8_t get_outy_l_g(I2C_HandleTypeDef* hi2cx) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	6078      	str	r0, [r7, #4]
    uint8_t outy_l_g = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTY_L_G, 1, &outy_l_g, 1, HAL_MAX_DELAY);
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 030f 	add.w	r3, r7, #15
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2224      	movs	r2, #36	; 0x24
 80010dc:	21d6      	movs	r1, #214	; 0xd6
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 f8ae 	bl	8003240 <HAL_I2C_Mem_Read>

    return outy_l_g;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <get_outy_h_g>:

uint8_t get_outy_h_g(I2C_HandleTypeDef* hi2cx) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b088      	sub	sp, #32
 80010f2:	af04      	add	r7, sp, #16
 80010f4:	6078      	str	r0, [r7, #4]
    uint8_t outy_h_g = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTY_H_G, 1, &outy_h_g, 1, HAL_MAX_DELAY);
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030f 	add.w	r3, r7, #15
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	2225      	movs	r2, #37	; 0x25
 800110e:	21d6      	movs	r1, #214	; 0xd6
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f002 f895 	bl	8003240 <HAL_I2C_Mem_Read>

    return outy_h_g;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <get_y_g>:

int16_t get_y_g(I2C_HandleTypeDef* hi2cx) {
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	return (int16_t)((get_outy_h_g(hi2cx) << 8) | get_outy_l_g(hi2cx));
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffe0 	bl	80010ee <get_outy_h_g>
 800112e:	4603      	mov	r3, r0
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21c      	sxth	r4, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffc1 	bl	80010bc <get_outy_l_g>
 800113a:	4603      	mov	r3, r0
 800113c:	b21b      	sxth	r3, r3
 800113e:	4323      	orrs	r3, r4
 8001140:	b21b      	sxth	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}

0800114a <get_outz_l_g>:

uint8_t get_outz_l_g(I2C_HandleTypeDef* hi2cx) {
 800114a:	b580      	push	{r7, lr}
 800114c:	b088      	sub	sp, #32
 800114e:	af04      	add	r7, sp, #16
 8001150:	6078      	str	r0, [r7, #4]
    uint8_t outz_l_g = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTZ_L_G, 1, &outz_l_g, 1, HAL_MAX_DELAY);
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f107 030f 	add.w	r3, r7, #15
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	2226      	movs	r2, #38	; 0x26
 800116a:	21d6      	movs	r1, #214	; 0xd6
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f002 f867 	bl	8003240 <HAL_I2C_Mem_Read>

    return outz_l_g;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <get_outz_h_g>:

uint8_t get_outz_h_g(I2C_HandleTypeDef* hi2cx) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af04      	add	r7, sp, #16
 8001182:	6078      	str	r0, [r7, #4]
    uint8_t outz_h_g = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTY_H_G, 1, &outz_h_g, 1, HAL_MAX_DELAY);
 8001188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030f 	add.w	r3, r7, #15
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2225      	movs	r2, #37	; 0x25
 800119c:	21d6      	movs	r1, #214	; 0xd6
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f002 f84e 	bl	8003240 <HAL_I2C_Mem_Read>

    return outz_h_g;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <get_z_g>:

int16_t get_z_g(I2C_HandleTypeDef* hi2cx) {
 80011ae:	b590      	push	{r4, r7, lr}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
    return (int16_t)(get_outz_h_g(hi2cx) << 8 | get_outz_l_g(hi2cx));
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffe0 	bl	800117c <get_outz_h_g>
 80011bc:	4603      	mov	r3, r0
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21c      	sxth	r4, r3
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffc1 	bl	800114a <get_outz_l_g>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4323      	orrs	r3, r4
 80011ce:	b21b      	sxth	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}

080011d8 <get_outx_l_xl>:

uint8_t get_outx_l_xl(I2C_HandleTypeDef* hi2cx) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af04      	add	r7, sp, #16
 80011de:	6078      	str	r0, [r7, #4]
    uint8_t outx_l_xl = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTX_L_XL, 1, &outx_l_xl, 1, HAL_MAX_DELAY);
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 030f 	add.w	r3, r7, #15
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	2228      	movs	r2, #40	; 0x28
 80011f8:	21d6      	movs	r1, #214	; 0xd6
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f002 f820 	bl	8003240 <HAL_I2C_Mem_Read>

    return outx_l_xl;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <get_outx_h_xl>:

uint8_t get_outx_h_xl(I2C_HandleTypeDef* hi2cx) {
 800120a:	b580      	push	{r7, lr}
 800120c:	b088      	sub	sp, #32
 800120e:	af04      	add	r7, sp, #16
 8001210:	6078      	str	r0, [r7, #4]
    uint8_t outx_h_xl = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTX_H_XL, 1, &outx_h_xl, 1, HAL_MAX_DELAY);
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f107 030f 	add.w	r3, r7, #15
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	2229      	movs	r2, #41	; 0x29
 800122a:	21d6      	movs	r1, #214	; 0xd6
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f002 f807 	bl	8003240 <HAL_I2C_Mem_Read>

    return outx_h_xl;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <get_x_xl>:

int16_t get_x_xl(I2C_HandleTypeDef* hi2cx) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    return (int16_t)(get_outx_h_xl(hi2cx) << 8 | get_outx_l_xl(hi2cx));
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffe0 	bl	800120a <get_outx_h_xl>
 800124a:	4603      	mov	r3, r0
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21c      	sxth	r4, r3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffc1 	bl	80011d8 <get_outx_l_xl>
 8001256:	4603      	mov	r3, r0
 8001258:	b21b      	sxth	r3, r3
 800125a:	4323      	orrs	r3, r4
 800125c:	b21b      	sxth	r3, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}

08001266 <get_outy_l_xl>:

uint8_t get_outy_l_xl(I2C_HandleTypeDef* hi2cx) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b088      	sub	sp, #32
 800126a:	af04      	add	r7, sp, #16
 800126c:	6078      	str	r0, [r7, #4]
    uint8_t outy_l_xl = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTY_L_XL, 1, &outy_l_xl, 1, HAL_MAX_DELAY);
 8001272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	f107 030f 	add.w	r3, r7, #15
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	222a      	movs	r2, #42	; 0x2a
 8001286:	21d6      	movs	r1, #214	; 0xd6
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 ffd9 	bl	8003240 <HAL_I2C_Mem_Read>

    return outy_l_xl;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <get_outy_h_xl>:

uint8_t get_outy_h_xl(I2C_HandleTypeDef* hi2cx) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af04      	add	r7, sp, #16
 800129e:	6078      	str	r0, [r7, #4]
    uint8_t outy_h_xl = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTY_H_XL, 1, &outy_h_xl, 1, HAL_MAX_DELAY);
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 030f 	add.w	r3, r7, #15
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	222b      	movs	r2, #43	; 0x2b
 80012b8:	21d6      	movs	r1, #214	; 0xd6
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 ffc0 	bl	8003240 <HAL_I2C_Mem_Read>

    return outy_h_xl;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <get_y_xl>:

int16_t get_y_xl(I2C_HandleTypeDef* hi2cx) {
 80012ca:	b590      	push	{r4, r7, lr}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
    return (uint16_t) get_outy_h_xl(hi2cx) << 8 | get_outy_l_xl(hi2cx);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffe0 	bl	8001298 <get_outy_h_xl>
 80012d8:	4603      	mov	r3, r0
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21c      	sxth	r4, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffc1 	bl	8001266 <get_outy_l_xl>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4323      	orrs	r3, r4
 80012ea:	b21b      	sxth	r3, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}

080012f4 <get_outz_l_xl>:

uint8_t get_outz_l_xl(I2C_HandleTypeDef* hi2cx) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af04      	add	r7, sp, #16
 80012fa:	6078      	str	r0, [r7, #4]
    uint8_t outz_l_xl = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTZ_L_XL, 1, &outz_l_xl, 1, HAL_MAX_DELAY);
 8001300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2301      	movs	r3, #1
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	f107 030f 	add.w	r3, r7, #15
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	222c      	movs	r2, #44	; 0x2c
 8001314:	21d6      	movs	r1, #214	; 0xd6
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f001 ff92 	bl	8003240 <HAL_I2C_Mem_Read>

    return outz_l_xl;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <get_outz_h_xl>:

uint8_t get_outz_h_xl(I2C_HandleTypeDef* hi2cx) {
 8001326:	b580      	push	{r7, lr}
 8001328:	b088      	sub	sp, #32
 800132a:	af04      	add	r7, sp, #16
 800132c:	6078      	str	r0, [r7, #4]
    uint8_t outz_h_xl = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, OUTZ_H_XL, 1, &outz_h_xl, 1, HAL_MAX_DELAY);
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030f 	add.w	r3, r7, #15
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	222d      	movs	r2, #45	; 0x2d
 8001346:	21d6      	movs	r1, #214	; 0xd6
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f001 ff79 	bl	8003240 <HAL_I2C_Mem_Read>

    return outz_h_xl;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <get_z_xl>:

int16_t get_z_xl(I2C_HandleTypeDef* hi2cx) {
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    return (int16_t)(get_outz_h_xl(hi2cx) << 8 | get_outz_l_xl(hi2cx));
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffe0 	bl	8001326 <get_outz_h_xl>
 8001366:	4603      	mov	r3, r0
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21c      	sxth	r4, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ffc1 	bl	80012f4 <get_outz_l_xl>
 8001372:	4603      	mov	r3, r0
 8001374:	b21b      	sxth	r3, r3
 8001376:	4323      	orrs	r3, r4
 8001378:	b21b      	sxth	r3, r3
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}

08001382 <get_who_am_i>:


uint8_t get_who_am_i(I2C_HandleTypeDef* hi2cx) {
 8001382:	b580      	push	{r7, lr}
 8001384:	b088      	sub	sp, #32
 8001386:	af04      	add	r7, sp, #16
 8001388:	6078      	str	r0, [r7, #4]

	uint8_t who_am_i = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(hi2cx, LSM6DSO_ADDR, WHO_AM_I, 1, &who_am_i, 1, HAL_MAX_DELAY);
 800138e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2301      	movs	r3, #1
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	f107 030f 	add.w	r3, r7, #15
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	220f      	movs	r2, #15
 80013a2:	21d6      	movs	r1, #214	; 0xd6
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f001 ff4b 	bl	8003240 <HAL_I2C_Mem_Read>

	return who_am_i;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <is_valid_who_am_i>:

uint8_t is_valid_who_am_i(uint8_t who_am_i) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	return who_am_i == 0x69;
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b69      	cmp	r3, #105	; 0x69
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <INIT_LSM6DSO>:

void INIT_LSM6DSO(I2C_HandleTypeDef* hi2cx) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	uint8_t who_am_i = get_who_am_i(hi2cx);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffd0 	bl	8001382 <get_who_am_i>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

	if (is_valid_who_am_i(who_am_i)) {
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ffe3 	bl	80013b4 <is_valid_who_am_i>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <INIT_LSM6DSO+0x30>
		set_ctrl1_xl(hi2cx, (uint8_t)0b10100000);
 80013f4:	21a0      	movs	r1, #160	; 0xa0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fdeb 	bl	8000fd2 <set_ctrl1_xl>
		set_ctrl2_g(hi2cx, (uint8_t)0b10000000);
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fdfe 	bl	8001000 <set_ctrl2_g>
	}
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f001 f975 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 f85f 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 f97b 	bl	8001714 <MX_GPIO_Init>
  MX_I2C1_Init();
 800141e:	f000 f8a1 	bl	8001564 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001422:	f000 f8cd 	bl	80015c0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001426:	f000 f94b 	bl	80016c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800142a:	f000 f8f7 	bl	800161c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  INIT_LSM6DSO(&hi2c2);
 800142e:	4826      	ldr	r0, [pc, #152]	; (80014c8 <main+0xbc>)
 8001430:	f7ff ffd0 	bl	80013d4 <INIT_LSM6DSO>

  ssd1306_Init();
 8001434:	f000 fa10 	bl	8001858 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8001438:	f000 fd99 	bl	8001f6e <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 800143c:	f000 fda2 	bl	8001f84 <ssd1306_Clear>
  ssd1306_SetColor(White);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 f9f9 	bl	8001838 <ssd1306_SetColor>

  CirclePosition circlePos;
  circlePos.x = ssd1306_GetWidth() / 2;
 8001446:	f000 f9e8 	bl	800181a <ssd1306_GetWidth>
 800144a:	4603      	mov	r3, r0
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	b21b      	sxth	r3, r3
 8001452:	803b      	strh	r3, [r7, #0]
  circlePos.y = ssd1306_GetHeight() / 2;
 8001454:	f000 f9e8 	bl	8001828 <ssd1306_GetHeight>
 8001458:	4603      	mov	r3, r0
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	b21b      	sxth	r3, r3
 8001460:	807b      	strh	r3, [r7, #2]

  HAL_TIM_Base_Start_IT(&htim1);
 8001462:	481a      	ldr	r0, [pc, #104]	; (80014cc <main+0xc0>)
 8001464:	f003 faa2 	bl	80049ac <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  if (isDisplayEnabled) {
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <main+0xc4>)
 800146a:	f993 3000 	ldrsb.w	r3, [r3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d026      	beq.n	80014c0 <main+0xb4>
	 	  ssd1306_DisplayOn();
 8001472:	f000 fd6e 	bl	8001f52 <ssd1306_DisplayOn>
//	  convert_accel_raw_to_g(get_y_xl(&hi2c2), 0.000061),
//	  convert_accel_raw_to_g(get_z_xl(&hi2c2), 0.000061));
//
//	  HAL_UART_Transmit(&huart1, (const uint8_t *)msg, strlen(msg), 100);
//	  HAL_UART_Transmit(&huart1, (const uint8_t *)msg1, strlen(msg1), 100);
	  int16_t raw_x = get_x_xl(&hi2c2);
 8001476:	4814      	ldr	r0, [pc, #80]	; (80014c8 <main+0xbc>)
 8001478:	f7ff fee0 	bl	800123c <get_x_xl>
 800147c:	4603      	mov	r3, r0
 800147e:	81fb      	strh	r3, [r7, #14]
	  int16_t raw_y = get_y_xl(&hi2c2);
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <main+0xbc>)
 8001482:	f7ff ff22 	bl	80012ca <get_y_xl>
 8001486:	4603      	mov	r3, r0
 8001488:	81bb      	strh	r3, [r7, #12]

	  float accel_x = convert_accel_raw_to_g(raw_x, 0.000061f);
 800148a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148e:	4911      	ldr	r1, [pc, #68]	; (80014d4 <main+0xc8>)
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd89 	bl	8000fa8 <convert_accel_raw_to_g>
 8001496:	60b8      	str	r0, [r7, #8]
	  float accel_y = convert_accel_raw_to_g(raw_y, 0.000061f);
 8001498:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800149c:	490d      	ldr	r1, [pc, #52]	; (80014d4 <main+0xc8>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fd82 	bl	8000fa8 <convert_accel_raw_to_g>
 80014a4:	6078      	str	r0, [r7, #4]
	  update_circle_position(&circlePos, accel_x, accel_y);
 80014a6:	463b      	mov	r3, r7
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fd75 	bl	8001f9c <update_circle_position>
	  draw_circle(circlePos);
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f000 fdda 	bl	800206c <draw_circle>
	  HAL_Delay(100);
 80014b8:	2064      	movs	r0, #100	; 0x64
 80014ba:	f001 f983 	bl	80027c4 <HAL_Delay>
 80014be:	e7d3      	b.n	8001468 <main+0x5c>
		 ssd1306_DisplayOff();
 80014c0:	f000 fd4e 	bl	8001f60 <ssd1306_DisplayOff>
		 continue;
 80014c4:	bf00      	nop
  {
 80014c6:	e7cf      	b.n	8001468 <main+0x5c>
 80014c8:	20000254 	.word	0x20000254
 80014cc:	200002a8 	.word	0x200002a8
 80014d0:	20000000 	.word	0x20000000
 80014d4:	387fda40 	.word	0x387fda40

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f004 f850 	bl	800558c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001516:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fde3 	bl	80040ec <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800152c:	f000 f962 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2102      	movs	r1, #2
 800154a:	4618      	mov	r0, r3
 800154c:	f003 f850 	bl	80045f0 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001556:	f000 f94d 	bl	80017f4 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3740      	adds	r7, #64	; 0x40
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x50>)
 800156a:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <MX_I2C1_Init+0x54>)
 800156c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_I2C1_Init+0x58>)
 8001572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_I2C1_Init+0x50>)
 80015a2:	f001 fc0f 	bl	8002dc4 <HAL_I2C_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ac:	f000 f922 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000200 	.word	0x20000200
 80015b8:	40005400 	.word	0x40005400
 80015bc:	00061a80 	.word	0x00061a80

080015c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C2_Init+0x50>)
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <MX_I2C2_Init+0x54>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C2_Init+0x50>)
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_I2C2_Init+0x58>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C2_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_I2C2_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_I2C2_Init+0x50>)
 80015de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MX_I2C2_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_I2C2_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <MX_I2C2_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_I2C2_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_I2C2_Init+0x50>)
 80015fe:	f001 fbe1 	bl	8002dc4 <HAL_I2C_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001608:	f000 f8f4 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000254 	.word	0x20000254
 8001614:	40005800 	.word	0x40005800
 8001618:	000186a0 	.word	0x000186a0

0800161c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <MX_TIM1_Init+0x9c>)
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <MX_TIM1_Init+0xa0>)
 800163c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_TIM1_Init+0x9c>)
 8001640:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001644:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_TIM1_Init+0x9c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM1_Init+0x9c>)
 800164e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001652:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_TIM1_Init+0x9c>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_TIM1_Init+0x9c>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_TIM1_Init+0x9c>)
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MX_TIM1_Init+0x9c>)
 8001668:	f003 f950 	bl	800490c <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001672:	f000 f8bf 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_TIM1_Init+0x9c>)
 8001684:	f003 fad4 	bl	8004c30 <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800168e:	f000 f8b1 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <MX_TIM1_Init+0x9c>)
 80016a0:	f003 fcb6 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016aa:	f000 f8a3 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200002a8 	.word	0x200002a8
 80016bc:	40012c00 	.word	0x40012c00

080016c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART1_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f8:	f003 fcfa 	bl	80050f0 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f877 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200002f0 	.word	0x200002f0
 8001710:	40013800 	.word	0x40013800

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_GPIO_Init+0xd0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <MX_GPIO_Init+0xd0>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <MX_GPIO_Init+0xd0>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <MX_GPIO_Init+0xd0>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <MX_GPIO_Init+0xd0>)
 8001746:	f043 0320 	orr.w	r3, r3, #32
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <MX_GPIO_Init+0xd0>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <MX_GPIO_Init+0xd0>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <MX_GPIO_Init+0xd0>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <MX_GPIO_Init+0xd0>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <MX_GPIO_Init+0xd0>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <MX_GPIO_Init+0xd0>)
 8001776:	f043 0308 	orr.w	r3, r3, #8
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <MX_GPIO_Init+0xd0>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <MX_GPIO_Init+0xd4>)
 8001790:	f001 face 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4619      	mov	r1, r3
 80017ac:	480e      	ldr	r0, [pc, #56]	; (80017e8 <MX_GPIO_Init+0xd4>)
 80017ae:	f001 f93b 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017b2:	2304      	movs	r3, #4
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_GPIO_Init+0xd8>)
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4619      	mov	r1, r3
 80017c4:	480a      	ldr	r0, [pc, #40]	; (80017f0 <MX_GPIO_Init+0xdc>)
 80017c6:	f001 f92f 	bl	8002a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2008      	movs	r0, #8
 80017d0:	f001 f8f3 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017d4:	2008      	movs	r0, #8
 80017d6:	f001 f90c 	bl	80029f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40011000 	.word	0x40011000
 80017ec:	10210000 	.word	0x10210000
 80017f0:	40010800 	.word	0x40010800

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>

080017fe <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
 8001810:	2340      	movs	r3, #64	; 0x40
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <ssd1306_GetWidth>:
/* CODE END Private functions */


/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 800181e:	2380      	movs	r3, #128	; 0x80
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <ssd1306_GetHeight>:


uint16_t ssd1306_GetHeight(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 800182c:	2340      	movs	r3, #64	; 0x40
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
	...

08001838 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <ssd1306_SetColor+0x1c>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	7153      	strb	r3, [r2, #5]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000338 	.word	0x20000338

08001858 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 800185c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001860:	2205      	movs	r2, #5
 8001862:	2178      	movs	r1, #120	; 0x78
 8001864:	4846      	ldr	r0, [pc, #280]	; (8001980 <ssd1306_Init+0x128>)
 8001866:	f001 ff5f 	bl	8003728 <HAL_I2C_IsDeviceReady>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <ssd1306_Init+0x12c>)
 8001872:	2200      	movs	r2, #0
 8001874:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8001876:	2300      	movs	r3, #0
 8001878:	e07f      	b.n	800197a <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 800187a:	2064      	movs	r0, #100	; 0x64
 800187c:	f000 ffa2 	bl	80027c4 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8001880:	20ae      	movs	r0, #174	; 0xae
 8001882:	f000 fc15 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8001886:	20d5      	movs	r0, #213	; 0xd5
 8001888:	f000 fc12 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 800188c:	20f0      	movs	r0, #240	; 0xf0
 800188e:	f000 fc0f 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001892:	20a8      	movs	r0, #168	; 0xa8
 8001894:	f000 fc0c 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8001898:	f7ff ffb8 	bl	800180c <height>
 800189c:	4603      	mov	r3, r0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fc03 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 80018aa:	20d3      	movs	r0, #211	; 0xd3
 80018ac:	f000 fc00 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 fbfd 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 80018b6:	2040      	movs	r0, #64	; 0x40
 80018b8:	f000 fbfa 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 80018bc:	208d      	movs	r0, #141	; 0x8d
 80018be:	f000 fbf7 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 80018c2:	2014      	movs	r0, #20
 80018c4:	f000 fbf4 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 80018c8:	2020      	movs	r0, #32
 80018ca:	f000 fbf1 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 fbee 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 80018d4:	20a0      	movs	r0, #160	; 0xa0
 80018d6:	f000 fbeb 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 80018da:	20c0      	movs	r0, #192	; 0xc0
 80018dc:	f000 fbe8 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 80018e0:	20da      	movs	r0, #218	; 0xda
 80018e2:	f000 fbe5 	bl	80020b0 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <ssd1306_Init+0x130>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 80018ee:	2012      	movs	r0, #18
 80018f0:	f000 fbde 	bl	80020b0 <ssd1306_WriteCommand>
 80018f4:	e006      	b.n	8001904 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <ssd1306_Init+0x130>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 80018fe:	2002      	movs	r0, #2
 8001900:	f000 fbd6 	bl	80020b0 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 8001904:	2081      	movs	r0, #129	; 0x81
 8001906:	f000 fbd3 	bl	80020b0 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <ssd1306_Init+0x130>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 8001912:	20cf      	movs	r0, #207	; 0xcf
 8001914:	f000 fbcc 	bl	80020b0 <ssd1306_WriteCommand>
 8001918:	e006      	b.n	8001928 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <ssd1306_Init+0x130>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d102      	bne.n	8001928 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 8001922:	208f      	movs	r0, #143	; 0x8f
 8001924:	f000 fbc4 	bl	80020b0 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 8001928:	20d9      	movs	r0, #217	; 0xd9
 800192a:	f000 fbc1 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 800192e:	20f1      	movs	r0, #241	; 0xf1
 8001930:	f000 fbbe 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8001934:	20db      	movs	r0, #219	; 0xdb
 8001936:	f000 fbbb 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 800193a:	2040      	movs	r0, #64	; 0x40
 800193c:	f000 fbb8 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8001940:	20a4      	movs	r0, #164	; 0xa4
 8001942:	f000 fbb5 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8001946:	20a6      	movs	r0, #166	; 0xa6
 8001948:	f000 fbb2 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 800194c:	202e      	movs	r0, #46	; 0x2e
 800194e:	f000 fbaf 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8001952:	20af      	movs	r0, #175	; 0xaf
 8001954:	f000 fbac 	bl	80020b0 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <ssd1306_Init+0x12c>)
 800195a:	2200      	movs	r2, #0
 800195c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <ssd1306_Init+0x12c>)
 8001960:	2200      	movs	r2, #0
 8001962:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <ssd1306_Init+0x12c>)
 8001966:	2200      	movs	r2, #0
 8001968:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 800196a:	f000 fb0b 	bl	8001f84 <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800196e:	f000 f831 	bl	80019d4 <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <ssd1306_Init+0x12c>)
 8001974:	2201      	movs	r2, #1
 8001976:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000200 	.word	0x20000200
 8001984:	20000338 	.word	0x20000338
 8001988:	20000740 	.word	0x20000740

0800198c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill()
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
	/* Set memory */
	uint32_t i;


	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	e00e      	b.n	80019b6 <ssd1306_Fill+0x2a>
	{
		SSD1306_Buffer[i] = (SSD1306.Color == Black) ? 0x00 : 0xFF;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <ssd1306_Fill+0x40>)
 800199a:	795b      	ldrb	r3, [r3, #5]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <ssd1306_Fill+0x18>
 80019a0:	2100      	movs	r1, #0
 80019a2:	e000      	b.n	80019a6 <ssd1306_Fill+0x1a>
 80019a4:	21ff      	movs	r1, #255	; 0xff
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <ssd1306_Fill+0x44>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	460a      	mov	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019bc:	d3ec      	bcc.n	8001998 <ssd1306_Fill+0xc>
	}
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000338 	.word	0x20000338
 80019d0:	20000340 	.word	0x20000340

080019d4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	e019      	b.n	8001a14 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	3b50      	subs	r3, #80	; 0x50
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fb62 	bl	80020b0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 fb5f 	bl	80020b0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 80019f2:	2010      	movs	r0, #16
 80019f4:	f000 fb5c 	bl	80020b0 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	01db      	lsls	r3, r3, #7
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <ssd1306_UpdateScreen+0x50>)
 80019fe:	189c      	adds	r4, r3, r2
 8001a00:	f7ff fefd 	bl	80017fe <width>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4619      	mov	r1, r3
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f000 fb69 	bl	80020e0 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	3301      	adds	r3, #1
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d9e2      	bls.n	80019e0 <ssd1306_UpdateScreen+0xc>
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	20000340 	.word	0x20000340

08001a28 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <ssd1306_DrawPixel+0xe4>)
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	73fb      	strb	r3, [r7, #15]


	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	b29c      	uxth	r4, r3
 8001a42:	f7ff feea 	bl	800181a <ssd1306_GetWidth>
 8001a46:	4603      	mov	r3, r0
 8001a48:	429c      	cmp	r4, r3
 8001a4a:	d25a      	bcs.n	8001b02 <ssd1306_DrawPixel+0xda>
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	b29c      	uxth	r4, r3
 8001a50:	f7ff feea 	bl	8001828 <ssd1306_GetHeight>
 8001a54:	4603      	mov	r3, r0
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d253      	bcs.n	8001b02 <ssd1306_DrawPixel+0xda>
		return;
	}


	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <ssd1306_DrawPixel+0xe4>)
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73fb      	strb	r3, [r7, #15]
	}


	// Draw in the right color
	if (color == White)
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d121      	bne.n	8001aba <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001a76:	79fc      	ldrb	r4, [r7, #7]
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	b2dd      	uxtb	r5, r3
 8001a7e:	462e      	mov	r6, r5
 8001a80:	f7ff febd 	bl	80017fe <width>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4618      	mov	r0, r3
 8001a88:	4603      	mov	r3, r0
 8001a8a:	fb06 f303 	mul.w	r3, r6, r3
 8001a8e:	4423      	add	r3, r4
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <ssd1306_DrawPixel+0xe8>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	b25a      	sxtb	r2, r3
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b259      	sxtb	r1, r3
 8001aa8:	79fa      	ldrb	r2, [r7, #7]
 8001aaa:	462b      	mov	r3, r5
 8001aac:	fb00 f303 	mul.w	r3, r0, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2c9      	uxtb	r1, r1
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <ssd1306_DrawPixel+0xe8>)
 8001ab6:	54d1      	strb	r1, [r2, r3]
 8001ab8:	e024      	b.n	8001b04 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001aba:	79fc      	ldrb	r4, [r7, #7]
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	b2dd      	uxtb	r5, r3
 8001ac2:	462e      	mov	r6, r5
 8001ac4:	f7ff fe9b 	bl	80017fe <width>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	4603      	mov	r3, r0
 8001ace:	fb06 f303 	mul.w	r3, r6, r3
 8001ad2:	4423      	add	r3, r4
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <ssd1306_DrawPixel+0xe8>)
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	4013      	ands	r3, r2
 8001aee:	b259      	sxtb	r1, r3
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	462b      	mov	r3, r5
 8001af4:	fb00 f303 	mul.w	r3, r0, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b2c9      	uxtb	r1, r1
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <ssd1306_DrawPixel+0xe8>)
 8001afe:	54d1      	strb	r1, [r2, r3]
 8001b00:	e000      	b.n	8001b04 <ssd1306_DrawPixel+0xdc>
		return;
 8001b02:	bf00      	nop
	}
}
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000338 	.word	0x20000338
 8001b10:	20000340 	.word	0x20000340

08001b14 <ssd1306_DrawHorizontalLine>:
	}
}


void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	80bb      	strh	r3, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	807b      	strh	r3, [r7, #2]
  if (y < 0 || y >= height()) { return; }
 8001b26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f2c0 8086 	blt.w	8001c3c <ssd1306_DrawHorizontalLine+0x128>
 8001b30:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001b34:	f7ff fe6a 	bl	800180c <height>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	429c      	cmp	r4, r3
 8001b3c:	da7e      	bge.n	8001c3c <ssd1306_DrawHorizontalLine+0x128>


  if (x < 0)
 8001b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da06      	bge.n	8001b54 <ssd1306_DrawHorizontalLine+0x40>
  {
    length += x;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	807b      	strh	r3, [r7, #2]
    x = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	80fb      	strh	r3, [r7, #6]
  }


  if ( (x + length) > width())
 8001b54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b5c:	18d4      	adds	r4, r2, r3
 8001b5e:	f7ff fe4e 	bl	80017fe <width>
 8001b62:	4603      	mov	r3, r0
 8001b64:	429c      	cmp	r4, r3
 8001b66:	dd07      	ble.n	8001b78 <ssd1306_DrawHorizontalLine+0x64>
  {
    length = (width() - x);
 8001b68:	f7ff fe49 	bl	80017fe <width>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	807b      	strh	r3, [r7, #2]
  }


  if (length <= 0) { return; }
 8001b78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	dd5f      	ble.n	8001c40 <ssd1306_DrawHorizontalLine+0x12c>


  uint8_t * bufferPtr = SSD1306_Buffer;
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <ssd1306_DrawHorizontalLine+0x134>)
 8001b82:	60fb      	str	r3, [r7, #12]
  bufferPtr += (y >> 3) * width();
 8001b84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b88:	10db      	asrs	r3, r3, #3
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	461c      	mov	r4, r3
 8001b8e:	f7ff fe36 	bl	80017fe <width>
 8001b92:	4603      	mov	r3, r0
 8001b94:	fb04 f303 	mul.w	r3, r4, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  bufferPtr += x;
 8001ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]


  uint8_t drawBit = 1 << (y & 7);
 8001baa:	88bb      	ldrh	r3, [r7, #4]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	72fb      	strb	r3, [r7, #11]


  switch (SSD1306.Color)
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <ssd1306_DrawHorizontalLine+0x138>)
 8001bba:	795b      	ldrb	r3, [r3, #5]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d034      	beq.n	8001c2a <ssd1306_DrawHorizontalLine+0x116>
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	dc3e      	bgt.n	8001c42 <ssd1306_DrawHorizontalLine+0x12e>
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <ssd1306_DrawHorizontalLine+0xdc>
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d13a      	bne.n	8001c42 <ssd1306_DrawHorizontalLine+0x12e>
  {
    case White:
    	while (length--)
 8001bcc:	e007      	b.n	8001bde <ssd1306_DrawHorizontalLine+0xca>
    	{
    		*bufferPtr++ |= drawBit;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	60fa      	str	r2, [r7, #12]
 8001bd4:	7819      	ldrb	r1, [r3, #0]
 8001bd6:	7afa      	ldrb	r2, [r7, #11]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8001bde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	3a01      	subs	r2, #1
 8001be6:	b292      	uxth	r2, r2
 8001be8:	807a      	strh	r2, [r7, #2]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ef      	bne.n	8001bce <ssd1306_DrawHorizontalLine+0xba>
    	};
    	break;
 8001bee:	e028      	b.n	8001c42 <ssd1306_DrawHorizontalLine+0x12e>
    case Black:
    	drawBit = ~drawBit;
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	72fb      	strb	r3, [r7, #11]
    	while (length--)
 8001bf6:	e007      	b.n	8001c08 <ssd1306_DrawHorizontalLine+0xf4>
    	{
    		*bufferPtr++ &= drawBit;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60fa      	str	r2, [r7, #12]
 8001bfe:	7819      	ldrb	r1, [r3, #0]
 8001c00:	7afa      	ldrb	r2, [r7, #11]
 8001c02:	400a      	ands	r2, r1
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8001c08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	3a01      	subs	r2, #1
 8001c10:	b292      	uxth	r2, r2
 8001c12:	807a      	strh	r2, [r7, #2]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ef      	bne.n	8001bf8 <ssd1306_DrawHorizontalLine+0xe4>
    	};
    	break;
 8001c18:	e013      	b.n	8001c42 <ssd1306_DrawHorizontalLine+0x12e>
    case Inverse:
    	while (length--)
    	{
    		*bufferPtr++ ^= drawBit;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60fa      	str	r2, [r7, #12]
 8001c20:	7819      	ldrb	r1, [r3, #0]
 8001c22:	7afa      	ldrb	r2, [r7, #11]
 8001c24:	404a      	eors	r2, r1
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
    	while (length--)
 8001c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	3a01      	subs	r2, #1
 8001c32:	b292      	uxth	r2, r2
 8001c34:	807a      	strh	r2, [r7, #2]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ef      	bne.n	8001c1a <ssd1306_DrawHorizontalLine+0x106>
    	}; break;
 8001c3a:	e002      	b.n	8001c42 <ssd1306_DrawHorizontalLine+0x12e>
  if (y < 0 || y >= height()) { return; }
 8001c3c:	bf00      	nop
 8001c3e:	e000      	b.n	8001c42 <ssd1306_DrawHorizontalLine+0x12e>
  if (length <= 0) { return; }
 8001c40:	bf00      	nop
  }
}
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	20000340 	.word	0x20000340
 8001c4c:	20000338 	.word	0x20000338

08001c50 <ssd1306_DrawCircle>:
	}
}


void ssd1306_DrawCircle(int16_t x0, int16_t y0, int16_t radius)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	80bb      	strh	r3, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	807b      	strh	r3, [r7, #2]
	int16_t x = 0, y = radius;
 8001c62:	2300      	movs	r3, #0
 8001c64:	81fb      	strh	r3, [r7, #14]
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	81bb      	strh	r3, [r7, #12]
	int16_t dp = 1 - radius;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	f1c3 0301 	rsb	r3, r3, #1
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	817b      	strh	r3, [r7, #10]
	do
	{
		if (dp < 0)
 8001c74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	da0d      	bge.n	8001c98 <ssd1306_DrawCircle+0x48>
			dp = dp + 2 * (++x) + 3;
 8001c7c:	89fb      	ldrh	r3, [r7, #14]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	81fb      	strh	r3, [r7, #14]
 8001c84:	89fb      	ldrh	r3, [r7, #14]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	897b      	ldrh	r3, [r7, #10]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3303      	adds	r3, #3
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	817b      	strh	r3, [r7, #10]
 8001c96:	e015      	b.n	8001cc4 <ssd1306_DrawCircle+0x74>
		else
			dp = dp + 2 * (++x) - 2 * (--y) + 5;
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	81fb      	strh	r3, [r7, #14]
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	4413      	add	r3, r2
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	89bb      	ldrh	r3, [r7, #12]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	81bb      	strh	r3, [r7, #12]
 8001cb4:	89bb      	ldrh	r3, [r7, #12]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3305      	adds	r3, #5
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	817b      	strh	r3, [r7, #10]


		ssd1306_DrawPixel(x0 + x, y0 + y);     //For the 8 octants
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	b2d8      	uxtb	r0, r3
 8001cd0:	88bb      	ldrh	r3, [r7, #4]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	89bb      	ldrh	r3, [r7, #12]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7ff fea3 	bl	8001a28 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - x, y0 + y);
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	89fb      	ldrh	r3, [r7, #14]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	b2d8      	uxtb	r0, r3
 8001cee:	88bb      	ldrh	r3, [r7, #4]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	89bb      	ldrh	r3, [r7, #12]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7ff fe94 	bl	8001a28 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 + x, y0 - y);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2d8      	uxtb	r0, r3
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7ff fe85 	bl	8001a28 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - x, y0 - y);
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b2d8      	uxtb	r0, r3
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	89bb      	ldrh	r3, [r7, #12]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7ff fe76 	bl	8001a28 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 + y, y0 + x);
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	b2d8      	uxtb	r0, r3
 8001d48:	88bb      	ldrh	r3, [r7, #4]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	89fb      	ldrh	r3, [r7, #14]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7ff fe67 	bl	8001a28 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - y, y0 + x);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	89bb      	ldrh	r3, [r7, #12]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	b2d8      	uxtb	r0, r3
 8001d66:	88bb      	ldrh	r3, [r7, #4]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7ff fe58 	bl	8001a28 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 + y, y0 - x);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	89bb      	ldrh	r3, [r7, #12]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b2d8      	uxtb	r0, r3
 8001d84:	88bb      	ldrh	r3, [r7, #4]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	89fb      	ldrh	r3, [r7, #14]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7ff fe49 	bl	8001a28 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(x0 - y, y0 - x);
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	89bb      	ldrh	r3, [r7, #12]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b2d8      	uxtb	r0, r3
 8001da2:	88bb      	ldrh	r3, [r7, #4]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	89fb      	ldrh	r3, [r7, #14]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7ff fe3a 	bl	8001a28 <ssd1306_DrawPixel>


	} while (x < y);
 8001db4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001db8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f6ff af59 	blt.w	8001c74 <ssd1306_DrawCircle+0x24>


	ssd1306_DrawPixel(x0 + radius, y0);
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	88ba      	ldrh	r2, [r7, #4]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fe27 	bl	8001a28 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x0, y0 + radius);
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	b2d8      	uxtb	r0, r3
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7ff fe1c 	bl	8001a28 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x0 - radius, y0);
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	88ba      	ldrh	r2, [r7, #4]
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe10 	bl	8001a28 <ssd1306_DrawPixel>
	ssd1306_DrawPixel(x0, y0 - radius);
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	b2d8      	uxtb	r0, r3
 8001e0c:	88bb      	ldrh	r3, [r7, #4]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7ff fe05 	bl	8001a28 <ssd1306_DrawPixel>
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <ssd1306_FillCircle>:


void ssd1306_FillCircle(int16_t x0, int16_t y0, int16_t radius)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	80fb      	strh	r3, [r7, #6]
 8001e30:	460b      	mov	r3, r1
 8001e32:	80bb      	strh	r3, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = radius;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	81bb      	strh	r3, [r7, #12]
  int16_t dp = 1 - radius;
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	f1c3 0301 	rsb	r3, r3, #1
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	817b      	strh	r3, [r7, #10]
  do
  {
	  if (dp < 0)
 8001e4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	da0d      	bge.n	8001e6e <ssd1306_FillCircle+0x48>
	  {
		  dp = dp + 2 * (++x) + 3;
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	81fb      	strh	r3, [r7, #14]
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	897b      	ldrh	r3, [r7, #10]
 8001e62:	4413      	add	r3, r2
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3303      	adds	r3, #3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	817b      	strh	r3, [r7, #10]
 8001e6c:	e015      	b.n	8001e9a <ssd1306_FillCircle+0x74>
	  }
	  else
	  {
		  dp = dp + 2 * (++x) - 2 * (--y) + 5;
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	81fb      	strh	r3, [r7, #14]
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	897b      	ldrh	r3, [r7, #10]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	89bb      	ldrh	r3, [r7, #12]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	81bb      	strh	r3, [r7, #12]
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3305      	adds	r3, #5
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	817b      	strh	r3, [r7, #10]
	  }


    ssd1306_DrawHorizontalLine(x0 - x, y0 - y, 2*x);
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b218      	sxth	r0, r3
 8001ea4:	88ba      	ldrh	r2, [r7, #4]
 8001ea6:	89bb      	ldrh	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	b219      	sxth	r1, r3
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f7ff fe2c 	bl	8001b14 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - x, y0 + y, 2*x);
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b218      	sxth	r0, r3
 8001ec6:	88ba      	ldrh	r2, [r7, #4]
 8001ec8:	89bb      	ldrh	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b219      	sxth	r1, r3
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f7ff fe1b 	bl	8001b14 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 - x, 2*y);
 8001ede:	88fa      	ldrh	r2, [r7, #6]
 8001ee0:	89bb      	ldrh	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	b218      	sxth	r0, r3
 8001ee8:	88ba      	ldrh	r2, [r7, #4]
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b219      	sxth	r1, r3
 8001ef2:	89bb      	ldrh	r3, [r7, #12]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7ff fe0a 	bl	8001b14 <ssd1306_DrawHorizontalLine>
    ssd1306_DrawHorizontalLine(x0 - y, y0 + x, 2*y);
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	89bb      	ldrh	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b218      	sxth	r0, r3
 8001f0a:	88ba      	ldrh	r2, [r7, #4]
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b219      	sxth	r1, r3
 8001f14:	89bb      	ldrh	r3, [r7, #12]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f7ff fdf9 	bl	8001b14 <ssd1306_DrawHorizontalLine>




  } while (x < y);
 8001f22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	db8d      	blt.n	8001e4a <ssd1306_FillCircle+0x24>
  ssd1306_DrawHorizontalLine(x0 - radius, y0, 2 * radius);
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b218      	sxth	r0, r3
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7ff fde5 	bl	8001b14 <ssd1306_DrawHorizontalLine>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <ssd1306_DisplayOn>:
	SSD1306.CurrentY = y;
}


void ssd1306_DisplayOn(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(DISPLAYON);
 8001f56:	20af      	movs	r0, #175	; 0xaf
 8001f58:	f000 f8aa 	bl	80020b0 <ssd1306_WriteCommand>
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ssd1306_DisplayOff>:


void ssd1306_DisplayOff(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(DISPLAYOFF);
 8001f64:	20ae      	movs	r0, #174	; 0xae
 8001f66:	f000 f8a3 	bl	80020b0 <ssd1306_WriteCommand>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8001f72:	20a1      	movs	r0, #161	; 0xa1
 8001f74:	f000 f89c 	bl	80020b0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8001f78:	20c8      	movs	r0, #200	; 0xc8
 8001f7a:	f000 f899 	bl	80020b0 <ssd1306_WriteCommand>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <ssd1306_Clear+0x14>)
 8001f90:	f003 fafc 	bl	800558c <memset>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000340 	.word	0x20000340

08001f9c <update_circle_position>:

void update_circle_position(CirclePosition* position, float accel_x, float accel_y) {
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
    uint16_t screenWidth = ssd1306_GetWidth();
 8001fa8:	f7ff fc37 	bl	800181a <ssd1306_GetWidth>
 8001fac:	4603      	mov	r3, r0
 8001fae:	82fb      	strh	r3, [r7, #22]
    uint16_t screenHeight = ssd1306_GetHeight();
 8001fb0:	f7ff fc3a 	bl	8001828 <ssd1306_GetHeight>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	82bb      	strh	r3, [r7, #20]

    float sensitivity = 3.0f;
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <update_circle_position+0xcc>)
 8001fba:	613b      	str	r3, [r7, #16]
    position->x -= (int16_t)(accel_x * sensitivity);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc2:	b29c      	uxth	r4, r3
 8001fc4:	6939      	ldr	r1, [r7, #16]
 8001fc6:	68b8      	ldr	r0, [r7, #8]
 8001fc8:	f7fe f8ca 	bl	8000160 <__aeabi_fmul>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe ff8c 	bl	8000eec <__aeabi_f2iz>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	1ae3      	subs	r3, r4, r3
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	801a      	strh	r2, [r3, #0]
    position->y += (int16_t)(accel_y * sensitivity);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fea:	b29c      	uxth	r4, r3
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe f8b6 	bl	8000160 <__aeabi_fmul>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe ff78 	bl	8000eec <__aeabi_f2iz>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	b29b      	uxth	r3, r3
 8002002:	4423      	add	r3, r4
 8002004:	b29b      	uxth	r3, r3
 8002006:	b21a      	sxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	805a      	strh	r2, [r3, #2]

    if (position->x < CIRCLE_RADIUS) {
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002012:	2b09      	cmp	r3, #9
 8002014:	dc02      	bgt.n	800201c <update_circle_position+0x80>
        position->x = CIRCLE_RADIUS;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	220a      	movs	r2, #10
 800201a:	801a      	strh	r2, [r3, #0]
    }
    if (position->x > screenWidth - CIRCLE_RADIUS) {
 800201c:	8afb      	ldrh	r3, [r7, #22]
 800201e:	3b09      	subs	r3, #9
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002026:	4293      	cmp	r3, r2
 8002028:	dc05      	bgt.n	8002036 <update_circle_position+0x9a>
        position->x = screenWidth - CIRCLE_RADIUS;
 800202a:	8afb      	ldrh	r3, [r7, #22]
 800202c:	3b0a      	subs	r3, #10
 800202e:	b29b      	uxth	r3, r3
 8002030:	b21a      	sxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	801a      	strh	r2, [r3, #0]
    }
    if (position->y < CIRCLE_RADIUS) {
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800203c:	2b09      	cmp	r3, #9
 800203e:	dc02      	bgt.n	8002046 <update_circle_position+0xaa>
        position->y = CIRCLE_RADIUS;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	220a      	movs	r2, #10
 8002044:	805a      	strh	r2, [r3, #2]
    }
    if (position->y > screenHeight - CIRCLE_RADIUS) {
 8002046:	8abb      	ldrh	r3, [r7, #20]
 8002048:	3b09      	subs	r3, #9
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002050:	4293      	cmp	r3, r2
 8002052:	dc05      	bgt.n	8002060 <update_circle_position+0xc4>
        position->y = screenHeight - CIRCLE_RADIUS;
 8002054:	8abb      	ldrh	r3, [r7, #20]
 8002056:	3b0a      	subs	r3, #10
 8002058:	b29b      	uxth	r3, r3
 800205a:	b21a      	sxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	805a      	strh	r2, [r3, #2]
    }
}
 8002060:	bf00      	nop
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	40400000 	.word	0x40400000

0800206c <draw_circle>:

void draw_circle(CirclePosition position) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    ssd1306_SetColor(Black);
 8002074:	2000      	movs	r0, #0
 8002076:	f7ff fbdf 	bl	8001838 <ssd1306_SetColor>
    ssd1306_Fill();
 800207a:	f7ff fc87 	bl	800198c <ssd1306_Fill>

    ssd1306_SetColor(White);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff fbda 	bl	8001838 <ssd1306_SetColor>

    ssd1306_DrawCircle(position.x, position.y, CIRCLE_RADIUS);
 8002084:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002088:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800208c:	220a      	movs	r2, #10
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fdde 	bl	8001c50 <ssd1306_DrawCircle>

    ssd1306_FillCircle(position.x, position.y, CIRCLE_RADIUS);
 8002094:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002098:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800209c:	220a      	movs	r2, #10
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fec1 	bl	8001e26 <ssd1306_FillCircle>

    ssd1306_UpdateScreen();
 80020a4:	f7ff fc96 	bl	80019d4 <ssd1306_UpdateScreen>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80020ba:	230a      	movs	r3, #10
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	2301      	movs	r3, #1
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2301      	movs	r3, #1
 80020c8:	2200      	movs	r2, #0
 80020ca:	2178      	movs	r1, #120	; 0x78
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <ssd1306_WriteCommand+0x2c>)
 80020ce:	f000 ffbd 	bl	800304c <HAL_I2C_Mem_Write>
#endif
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000200 	.word	0x20000200

080020e0 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af04      	add	r7, sp, #16
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 80020ec:	2364      	movs	r3, #100	; 0x64
 80020ee:	9302      	str	r3, [sp, #8]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	2178      	movs	r1, #120	; 0x78
 80020fe:	4803      	ldr	r0, [pc, #12]	; (800210c <ssd1306_WriteData+0x2c>)
 8002100:	f000 ffa4 	bl	800304c <HAL_I2C_Mem_Write>
#endif
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000200 	.word	0x20000200

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_MspInit+0x40>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_MspInit+0x40>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6193      	str	r3, [r2, #24]
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_MspInit+0x40>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_MspInit+0x40>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_MspInit+0x40>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_MspInit+0x40>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2b      	ldr	r2, [pc, #172]	; (800221c <HAL_I2C_MspInit+0xc8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d124      	bne.n	80021be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 800217a:	f043 0308 	orr.w	r3, r3, #8
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800218c:	23c0      	movs	r3, #192	; 0xc0
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002190:	2312      	movs	r3, #18
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	4619      	mov	r1, r3
 800219e:	4821      	ldr	r0, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0xd0>)
 80021a0:	f000 fc42 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 80021aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ae:	61d3      	str	r3, [r2, #28]
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021bc:	e029      	b.n	8002212 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a19      	ldr	r2, [pc, #100]	; (8002228 <HAL_I2C_MspInit+0xd4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d124      	bne.n	8002212 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 80021ce:	f043 0308 	orr.w	r3, r3, #8
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e6:	2312      	movs	r3, #18
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	4619      	mov	r1, r3
 80021f4:	480b      	ldr	r0, [pc, #44]	; (8002224 <HAL_I2C_MspInit+0xd0>)
 80021f6:	f000 fc17 	bl	8002a28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 8002200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_I2C_MspInit+0xcc>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40005400 	.word	0x40005400
 8002220:	40021000 	.word	0x40021000
 8002224:	40010c00 	.word	0x40010c00
 8002228:	40005800 	.word	0x40005800

0800222c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_TIM_Base_MspInit+0x44>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d113      	bne.n	8002266 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_TIM_Base_MspInit+0x48>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <HAL_TIM_Base_MspInit+0x48>)
 8002244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002248:	6193      	str	r3, [r2, #24]
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_TIM_Base_MspInit+0x48>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2019      	movs	r0, #25
 800225c:	f000 fbad 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002260:	2019      	movs	r0, #25
 8002262:	f000 fbc6 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40021000 	.word	0x40021000

08002278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_UART_MspInit+0x8c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d131      	bne.n	80022fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_UART_MspInit+0x90>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_UART_MspInit+0x90>)
 800229e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_UART_MspInit+0x90>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_UART_MspInit+0x90>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_UART_MspInit+0x90>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_UART_MspInit+0x90>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4619      	mov	r1, r3
 80022dc:	480b      	ldr	r0, [pc, #44]	; (800230c <HAL_UART_MspInit+0x94>)
 80022de:	f000 fba3 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_UART_MspInit+0x94>)
 80022f8:	f000 fb96 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40013800 	.word	0x40013800
 8002308:	40021000 	.word	0x40021000
 800230c:	40010800 	.word	0x40010800

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002356:	f000 fa19 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}

0800235e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002362:	2004      	movs	r0, #4
 8002364:	f000 fd16 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <TIM1_UP_IRQHandler+0x10>)
 8002372:	f002 fb6d 	bl	8004a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200002a8 	.word	0x200002a8

08002380 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 800238a:	f000 fa11 	bl	80027b0 <HAL_GetTick>
 800238e:	60f8      	str	r0, [r7, #12]

    if (current_time - last_interrupt_time < 200) {
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_GPIO_EXTI_Callback+0x4c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2bc7      	cmp	r3, #199	; 0xc7
 800239a:	d912      	bls.n	80023c2 <HAL_GPIO_EXTI_Callback+0x42>
        return;
    }
    last_interrupt_time = current_time;
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_GPIO_EXTI_Callback+0x4c>)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80023a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a6:	480a      	ldr	r0, [pc, #40]	; (80023d0 <HAL_GPIO_EXTI_Callback+0x50>)
 80023a8:	f000 fcda 	bl	8002d60 <HAL_GPIO_TogglePin>

	isDisplayEnabled = !isDisplayEnabled;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_EXTI_Callback+0x44>
        return;
 80023c2:	bf00      	nop


}
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000744 	.word	0x20000744
 80023d0:	40011000 	.word	0x40011000
 80023d4:	20000000 	.word	0x20000000

080023d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023dc:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 80023e0:	af04      	add	r7, sp, #16
 80023e2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80023e6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80023ea:	6018      	str	r0, [r3, #0]
	  if(htim->Instance == TIM1)
 80023ec:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80023f0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a45      	ldr	r2, [pc, #276]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f040 8082 	bne.w	8002504 <HAL_TIM_PeriodElapsedCallback+0x12c>
	  {
		  char msg[350] = {};
 8002400:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002404:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	3304      	adds	r3, #4
 800240e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f003 f8b9 	bl	800558c <memset>
		  char msg1[350] = {};
 800241a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800241e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	3304      	adds	r3, #4
 8002428:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f8ac 	bl	800558c <memset>

		  sprintf(msg, "g-x: %hi, g-y: %hi, g-z: %hi\n",
		  get_x_g(&hi2c2), get_y_g(&hi2c2), get_z_g(&hi2c2));
 8002434:	4837      	ldr	r0, [pc, #220]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002436:	f7fe fe2c 	bl	8001092 <get_x_g>
 800243a:	4603      	mov	r3, r0
		  sprintf(msg, "g-x: %hi, g-y: %hi, g-z: %hi\n",
 800243c:	461c      	mov	r4, r3
		  get_x_g(&hi2c2), get_y_g(&hi2c2), get_z_g(&hi2c2));
 800243e:	4835      	ldr	r0, [pc, #212]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002440:	f7fe fe6e 	bl	8001120 <get_y_g>
 8002444:	4603      	mov	r3, r0
		  sprintf(msg, "g-x: %hi, g-y: %hi, g-z: %hi\n",
 8002446:	461d      	mov	r5, r3
		  get_x_g(&hi2c2), get_y_g(&hi2c2), get_z_g(&hi2c2));
 8002448:	4832      	ldr	r0, [pc, #200]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800244a:	f7fe feb0 	bl	80011ae <get_z_g>
 800244e:	4603      	mov	r3, r0
		  sprintf(msg, "g-x: %hi, g-y: %hi, g-z: %hi\n",
 8002450:	f107 0008 	add.w	r0, r7, #8
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	462b      	mov	r3, r5
 8002458:	4622      	mov	r2, r4
 800245a:	492f      	ldr	r1, [pc, #188]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800245c:	f003 ff10 	bl	8006280 <siprintf>

		  sprintf(msg1, "xl-x: %.4f, xl-y: %.4f, xl-z: %.4f\n",
		  convert_accel_raw_to_g(get_x_xl(&hi2c2), 0.000061),
 8002460:	482c      	ldr	r0, [pc, #176]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002462:	f7fe feeb 	bl	800123c <get_x_xl>
 8002466:	4603      	mov	r3, r0
 8002468:	b21b      	sxth	r3, r3
 800246a:	492c      	ldr	r1, [pc, #176]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fd9b 	bl	8000fa8 <convert_accel_raw_to_g>
 8002472:	4603      	mov	r3, r0
		  sprintf(msg1, "xl-x: %.4f, xl-y: %.4f, xl-z: %.4f\n",
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f88b 	bl	8000590 <__aeabi_f2d>
 800247a:	4680      	mov	r8, r0
 800247c:	4689      	mov	r9, r1
          convert_accel_raw_to_g(get_y_xl(&hi2c2), 0.000061),
 800247e:	4825      	ldr	r0, [pc, #148]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002480:	f7fe ff23 	bl	80012ca <get_y_xl>
 8002484:	4603      	mov	r3, r0
 8002486:	b21b      	sxth	r3, r3
 8002488:	4924      	ldr	r1, [pc, #144]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fd8c 	bl	8000fa8 <convert_accel_raw_to_g>
 8002490:	4603      	mov	r3, r0
		  sprintf(msg1, "xl-x: %.4f, xl-y: %.4f, xl-z: %.4f\n",
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f87c 	bl	8000590 <__aeabi_f2d>
 8002498:	4604      	mov	r4, r0
 800249a:	460d      	mov	r5, r1
		  convert_accel_raw_to_g(get_z_xl(&hi2c2), 0.000061));
 800249c:	481d      	ldr	r0, [pc, #116]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800249e:	f7fe ff5b 	bl	8001358 <get_z_xl>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	491d      	ldr	r1, [pc, #116]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fd7d 	bl	8000fa8 <convert_accel_raw_to_g>
 80024ae:	4603      	mov	r3, r0
		  sprintf(msg1, "xl-x: %.4f, xl-y: %.4f, xl-z: %.4f\n",
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f86d 	bl	8000590 <__aeabi_f2d>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 80024be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024c2:	e9cd 4500 	strd	r4, r5, [sp]
 80024c6:	4642      	mov	r2, r8
 80024c8:	464b      	mov	r3, r9
 80024ca:	4915      	ldr	r1, [pc, #84]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80024cc:	f003 fed8 	bl	8006280 <siprintf>
	  	  HAL_UART_Transmit(&huart1, (const uint8_t *)msg, strlen(msg), 100);
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd fe3b 	bl	8000150 <strlen>
 80024da:	4603      	mov	r3, r0
 80024dc:	b29a      	uxth	r2, r3
 80024de:	f107 0108 	add.w	r1, r7, #8
 80024e2:	2364      	movs	r3, #100	; 0x64
 80024e4:	480f      	ldr	r0, [pc, #60]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80024e6:	f002 fe53 	bl	8005190 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (const uint8_t *)msg1, strlen(msg1), 100);
 80024ea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fe2e 	bl	8000150 <strlen>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 80024fc:	2364      	movs	r3, #100	; 0x64
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002500:	f002 fe46 	bl	8005190 <HAL_UART_Transmit>
	  }
}
 8002504:	bf00      	nop
 8002506:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 800250a:	46bd      	mov	sp, r7
 800250c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002510:	40012c00 	.word	0x40012c00
 8002514:	20000254 	.word	0x20000254
 8002518:	08009e18 	.word	0x08009e18
 800251c:	387fda40 	.word	0x387fda40
 8002520:	08009e38 	.word	0x08009e38
 8002524:	200002f0 	.word	0x200002f0

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <_kill>:

int _kill(int pid, int sig)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002540:	f002 fffa 	bl	8005538 <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	2216      	movs	r2, #22
 8002548:	601a      	str	r2, [r3, #0]
  return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_exit>:

void _exit (int status)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800255e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffe7 	bl	8002536 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002568:	e7fe      	b.n	8002568 <_exit+0x12>

0800256a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e00a      	b.n	8002592 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800257c:	f3af 8000 	nop.w
 8002580:	4601      	mov	r1, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	60ba      	str	r2, [r7, #8]
 8002588:	b2ca      	uxtb	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbf0      	blt.n	800257c <_read+0x12>
  }

  return len;
 800259a:	687b      	ldr	r3, [r7, #4]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e009      	b.n	80025ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	60ba      	str	r2, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbf1      	blt.n	80025b6 <_write+0x12>
  }
  return len;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_close>:

int _close(int file)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002602:	605a      	str	r2, [r3, #4]
  return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <_isatty>:

int _isatty(int file)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <_sbrk+0x5c>)
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <_sbrk+0x60>)
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_sbrk+0x64>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <_sbrk+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	d207      	bcs.n	800267c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800266c:	f002 ff64 	bl	8005538 <__errno>
 8002670:	4603      	mov	r3, r0
 8002672:	220c      	movs	r2, #12
 8002674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800267a:	e009      	b.n	8002690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_sbrk+0x64>)
 800268c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20005000 	.word	0x20005000
 800269c:	00000400 	.word	0x00000400
 80026a0:	20000748 	.word	0x20000748
 80026a4:	20000760 	.word	0x20000760

080026a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026b4:	f7ff fff8 	bl	80026a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b8:	480b      	ldr	r0, [pc, #44]	; (80026e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026ba:	490c      	ldr	r1, [pc, #48]	; (80026ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c0:	e002      	b.n	80026c8 <LoopCopyDataInit>

080026c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c6:	3304      	adds	r3, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026cc:	d3f9      	bcc.n	80026c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026d0:	4c09      	ldr	r4, [pc, #36]	; (80026f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d4:	e001      	b.n	80026da <LoopFillZerobss>

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d8:	3204      	adds	r2, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026de:	f002 ff31 	bl	8005544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026e2:	f7fe fe93 	bl	800140c <main>
  bx lr
 80026e6:	4770      	bx	lr
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80026f0:	0800a334 	.word	0x0800a334
  ldr r2, =_sbss
 80026f4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80026f8:	20000760 	.word	0x20000760

080026fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_2_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_Init+0x28>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a07      	ldr	r2, [pc, #28]	; (8002728 <HAL_Init+0x28>)
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002710:	2003      	movs	r0, #3
 8002712:	f000 f947 	bl	80029a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002716:	200f      	movs	r0, #15
 8002718:	f000 f808 	bl	800272c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800271c:	f7ff fcf8 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000

0800272c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x54>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_InitTick+0x58>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002742:	fbb3 f3f1 	udiv	r3, r3, r1
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f95f 	bl	8002a0e <HAL_SYSTICK_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e00e      	b.n	8002778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d80a      	bhi.n	8002776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002760:	2200      	movs	r2, #0
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002768:	f000 f927 	bl	80029ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800276c:	4a06      	ldr	r2, [pc, #24]	; (8002788 <HAL_InitTick+0x5c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000004 	.word	0x20000004
 8002784:	2000000c 	.word	0x2000000c
 8002788:	20000008 	.word	0x20000008

0800278c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_IncTick+0x1c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_IncTick+0x20>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a03      	ldr	r2, [pc, #12]	; (80027ac <HAL_IncTick+0x20>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	2000000c 	.word	0x2000000c
 80027ac:	2000074c 	.word	0x2000074c

080027b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return uwTick;
 80027b4:	4b02      	ldr	r3, [pc, #8]	; (80027c0 <HAL_GetTick+0x10>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	2000074c 	.word	0x2000074c

080027c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffe0 	bl	80027b0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000000c 	.word	0x2000000c

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4906      	ldr	r1, [pc, #24]	; (80028a4 <__NVIC_EnableIRQ+0x34>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002970:	d301      	bcc.n	8002976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <SysTick_Config+0x40>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297e:	210f      	movs	r1, #15
 8002980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002984:	f7ff ff90 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <SysTick_Config+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <SysTick_Config+0x40>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff2d 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029cc:	f7ff ff42 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7ff ff90 	bl	80028fc <NVIC_EncodePriority>
 80029dc:	4602      	mov	r2, r0
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff5f 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff35 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffa2 	bl	8002960 <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b08b      	sub	sp, #44	; 0x2c
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3a:	e169      	b.n	8002d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	f040 8158 	bne.w	8002d0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a9a      	ldr	r2, [pc, #616]	; (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d05e      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a64:	4a98      	ldr	r2, [pc, #608]	; (8002cc8 <HAL_GPIO_Init+0x2a0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d875      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a6a:	4a98      	ldr	r2, [pc, #608]	; (8002ccc <HAL_GPIO_Init+0x2a4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d058      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a70:	4a96      	ldr	r2, [pc, #600]	; (8002ccc <HAL_GPIO_Init+0x2a4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d86f      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a76:	4a96      	ldr	r2, [pc, #600]	; (8002cd0 <HAL_GPIO_Init+0x2a8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d052      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a7c:	4a94      	ldr	r2, [pc, #592]	; (8002cd0 <HAL_GPIO_Init+0x2a8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d869      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a82:	4a94      	ldr	r2, [pc, #592]	; (8002cd4 <HAL_GPIO_Init+0x2ac>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d04c      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a88:	4a92      	ldr	r2, [pc, #584]	; (8002cd4 <HAL_GPIO_Init+0x2ac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d863      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a8e:	4a92      	ldr	r2, [pc, #584]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d046      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
 8002a94:	4a90      	ldr	r2, [pc, #576]	; (8002cd8 <HAL_GPIO_Init+0x2b0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d85d      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002a9a:	2b12      	cmp	r3, #18
 8002a9c:	d82a      	bhi.n	8002af4 <HAL_GPIO_Init+0xcc>
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d859      	bhi.n	8002b56 <HAL_GPIO_Init+0x12e>
 8002aa2:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_GPIO_Init+0x80>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002b23 	.word	0x08002b23
 8002aac:	08002afd 	.word	0x08002afd
 8002ab0:	08002b0f 	.word	0x08002b0f
 8002ab4:	08002b51 	.word	0x08002b51
 8002ab8:	08002b57 	.word	0x08002b57
 8002abc:	08002b57 	.word	0x08002b57
 8002ac0:	08002b57 	.word	0x08002b57
 8002ac4:	08002b57 	.word	0x08002b57
 8002ac8:	08002b57 	.word	0x08002b57
 8002acc:	08002b57 	.word	0x08002b57
 8002ad0:	08002b57 	.word	0x08002b57
 8002ad4:	08002b57 	.word	0x08002b57
 8002ad8:	08002b57 	.word	0x08002b57
 8002adc:	08002b57 	.word	0x08002b57
 8002ae0:	08002b57 	.word	0x08002b57
 8002ae4:	08002b57 	.word	0x08002b57
 8002ae8:	08002b57 	.word	0x08002b57
 8002aec:	08002b05 	.word	0x08002b05
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	4a79      	ldr	r2, [pc, #484]	; (8002cdc <HAL_GPIO_Init+0x2b4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002afa:	e02c      	b.n	8002b56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	623b      	str	r3, [r7, #32]
          break;
 8002b02:	e029      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	e024      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	3308      	adds	r3, #8
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e01f      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e01a      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	623b      	str	r3, [r7, #32]
          break;
 8002b2e:	e013      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	611a      	str	r2, [r3, #16]
          break;
 8002b42:	e009      	b.n	8002b58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b44:	2308      	movs	r3, #8
 8002b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	615a      	str	r2, [r3, #20]
          break;
 8002b4e:	e003      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
          break;
 8002b54:	e000      	b.n	8002b58 <HAL_GPIO_Init+0x130>
          break;
 8002b56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	; 0xff
 8002b5c:	d801      	bhi.n	8002b62 <HAL_GPIO_Init+0x13a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	e001      	b.n	8002b66 <HAL_GPIO_Init+0x13e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2bff      	cmp	r3, #255	; 0xff
 8002b6c:	d802      	bhi.n	8002b74 <HAL_GPIO_Init+0x14c>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	e002      	b.n	8002b7a <HAL_GPIO_Init+0x152>
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	3b08      	subs	r3, #8
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	210f      	movs	r1, #15
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80b1 	beq.w	8002d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	4a4c      	ldr	r2, [pc, #304]	; (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6193      	str	r3, [r2, #24]
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc0:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <HAL_GPIO_Init+0x2bc>)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_GPIO_Init+0x2c0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1ec>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_GPIO_Init+0x2c4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1e8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3e      	ldr	r2, [pc, #248]	; (8002cf0 <HAL_GPIO_Init+0x2c8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1e4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <HAL_GPIO_Init+0x2cc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1e0>
 8002c04:	2303      	movs	r3, #3
 8002c06:	e006      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e004      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e002      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_GPIO_Init+0x1ee>
 8002c14:	2300      	movs	r3, #0
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4093      	lsls	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c26:	492f      	ldr	r1, [pc, #188]	; (8002ce4 <HAL_GPIO_Init+0x2bc>)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d006      	beq.n	8002c4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	492c      	ldr	r1, [pc, #176]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	4928      	ldr	r1, [pc, #160]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	4922      	ldr	r1, [pc, #136]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	491e      	ldr	r1, [pc, #120]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4918      	ldr	r1, [pc, #96]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4914      	ldr	r1, [pc, #80]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d021      	beq.n	8002cfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
 8002cc4:	e021      	b.n	8002d0a <HAL_GPIO_Init+0x2e2>
 8002cc6:	bf00      	nop
 8002cc8:	10320000 	.word	0x10320000
 8002ccc:	10310000 	.word	0x10310000
 8002cd0:	10220000 	.word	0x10220000
 8002cd4:	10210000 	.word	0x10210000
 8002cd8:	10120000 	.word	0x10120000
 8002cdc:	10110000 	.word	0x10110000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40010800 	.word	0x40010800
 8002cec:	40010c00 	.word	0x40010c00
 8002cf0:	40011000 	.word	0x40011000
 8002cf4:	40011400 	.word	0x40011400
 8002cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	4909      	ldr	r1, [pc, #36]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f47f ae8e 	bne.w	8002a3c <HAL_GPIO_Init+0x14>
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	372c      	adds	r7, #44	; 0x2c
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43d9      	mvns	r1, r3
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	400b      	ands	r3, r1
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	611a      	str	r2, [r3, #16]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fae4 	bl	8002380 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e12b      	b.n	800302e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff f9b2 	bl	8002154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	; 0x24
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e28:	f001 fd2a 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8002e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a81      	ldr	r2, [pc, #516]	; (8003038 <HAL_I2C_Init+0x274>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d807      	bhi.n	8002e48 <HAL_I2C_Init+0x84>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_I2C_Init+0x278>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e006      	b.n	8002e56 <HAL_I2C_Init+0x92>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a7d      	ldr	r2, [pc, #500]	; (8003040 <HAL_I2C_Init+0x27c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	bf94      	ite	ls
 8002e50:	2301      	movls	r3, #1
 8002e52:	2300      	movhi	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0e7      	b.n	800302e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a78      	ldr	r2, [pc, #480]	; (8003044 <HAL_I2C_Init+0x280>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0c9b      	lsrs	r3, r3, #18
 8002e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a6a      	ldr	r2, [pc, #424]	; (8003038 <HAL_I2C_Init+0x274>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d802      	bhi.n	8002e98 <HAL_I2C_Init+0xd4>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3301      	adds	r3, #1
 8002e96:	e009      	b.n	8002eac <HAL_I2C_Init+0xe8>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	4a69      	ldr	r2, [pc, #420]	; (8003048 <HAL_I2C_Init+0x284>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	3301      	adds	r3, #1
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	495c      	ldr	r1, [pc, #368]	; (8003038 <HAL_I2C_Init+0x274>)
 8002ec8:	428b      	cmp	r3, r1
 8002eca:	d819      	bhi.n	8002f00 <HAL_I2C_Init+0x13c>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e59      	subs	r1, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eda:	1c59      	adds	r1, r3, #1
 8002edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_I2C_Init+0x138>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1e59      	subs	r1, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efa:	e051      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e04f      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d111      	bne.n	8002f2c <HAL_I2C_Init+0x168>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	440b      	add	r3, r1
 8002f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e012      	b.n	8002f52 <HAL_I2C_Init+0x18e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e58      	subs	r0, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	0099      	lsls	r1, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Init+0x196>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e022      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10e      	bne.n	8002f80 <HAL_I2C_Init+0x1bc>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e58      	subs	r0, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	440b      	add	r3, r1
 8002f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7e:	e00f      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	6809      	ldr	r1, [r1, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6911      	ldr	r1, [r2, #16]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68d2      	ldr	r2, [r2, #12]
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	000186a0 	.word	0x000186a0
 800303c:	001e847f 	.word	0x001e847f
 8003040:	003d08ff 	.word	0x003d08ff
 8003044:	431bde83 	.word	0x431bde83
 8003048:	10624dd3 	.word	0x10624dd3

0800304c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003066:	f7ff fba3 	bl	80027b0 <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	f040 80d9 	bne.w	800322c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2319      	movs	r3, #25
 8003080:	2201      	movs	r2, #1
 8003082:	496d      	ldr	r1, [pc, #436]	; (8003238 <HAL_I2C_Mem_Write+0x1ec>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fdfb 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
 8003092:	e0cc      	b.n	800322e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_I2C_Mem_Write+0x56>
 800309e:	2302      	movs	r3, #2
 80030a0:	e0c5      	b.n	800322e <HAL_I2C_Mem_Write+0x1e2>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d007      	beq.n	80030c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2221      	movs	r2, #33	; 0x21
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a4d      	ldr	r2, [pc, #308]	; (800323c <HAL_I2C_Mem_Write+0x1f0>)
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800310a:	88f8      	ldrh	r0, [r7, #6]
 800310c:	893a      	ldrh	r2, [r7, #8]
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4603      	mov	r3, r0
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fc32 	bl	8003984 <I2C_RequestMemoryWrite>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d052      	beq.n	80031cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e081      	b.n	800322e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fec0 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b04      	cmp	r3, #4
 8003140:	d107      	bne.n	8003152 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06b      	b.n	800322e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d11b      	bne.n	80031cc <HAL_I2C_Mem_Write+0x180>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	2b00      	cmp	r3, #0
 800319a:	d017      	beq.n	80031cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1aa      	bne.n	800312a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 feb3 	bl	8003f44 <I2C_WaitOnBTFFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00d      	beq.n	8003200 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d107      	bne.n	80031fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e016      	b.n	800322e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	00100002 	.word	0x00100002
 800323c:	ffff0000 	.word	0xffff0000

08003240 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	; 0x30
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800325e:	f7ff faa7 	bl	80027b0 <HAL_GetTick>
 8003262:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	f040 8250 	bne.w	8003712 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2319      	movs	r3, #25
 8003278:	2201      	movs	r2, #1
 800327a:	4982      	ldr	r1, [pc, #520]	; (8003484 <HAL_I2C_Mem_Read+0x244>)
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fcff 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
 800328a:	e243      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_I2C_Mem_Read+0x5a>
 8003296:	2302      	movs	r3, #2
 8003298:	e23c      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d007      	beq.n	80032c0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2222      	movs	r2, #34	; 0x22
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a62      	ldr	r2, [pc, #392]	; (8003488 <HAL_I2C_Mem_Read+0x248>)
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003302:	88f8      	ldrh	r0, [r7, #6]
 8003304:	893a      	ldrh	r2, [r7, #8]
 8003306:	8979      	ldrh	r1, [r7, #10]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4603      	mov	r3, r0
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fbcc 	bl	8003ab0 <I2C_RequestMemoryRead>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1f8      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d113      	bne.n	8003352 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e1cc      	b.n	80036ec <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b01      	cmp	r3, #1
 8003358:	d11e      	bne.n	8003398 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003368:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800336a:	b672      	cpsid	i
}
 800336c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003394:	b662      	cpsie	i
}
 8003396:	e035      	b.n	8003404 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	2b02      	cmp	r3, #2
 800339e:	d11e      	bne.n	80033de <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
}
 80033b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033da:	b662      	cpsie	i
}
 80033dc:	e012      	b.n	8003404 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003404:	e172      	b.n	80036ec <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b03      	cmp	r3, #3
 800340c:	f200 811f 	bhi.w	800364e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b01      	cmp	r3, #1
 8003416:	d123      	bne.n	8003460 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fdd9 	bl	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e173      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800345e:	e145      	b.n	80036ec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b02      	cmp	r3, #2
 8003466:	d152      	bne.n	800350e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	2200      	movs	r2, #0
 8003470:	4906      	ldr	r1, [pc, #24]	; (800348c <HAL_I2C_Mem_Read+0x24c>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fc04 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e148      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
 8003482:	bf00      	nop
 8003484:	00100002 	.word	0x00100002
 8003488:	ffff0000 	.word	0xffff0000
 800348c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034d6:	b662      	cpsie	i
}
 80034d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800350c:	e0ee      	b.n	80036ec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	4981      	ldr	r1, [pc, #516]	; (800371c <HAL_I2C_Mem_Read+0x4dc>)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fbb1 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0f5      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003538:	b672      	cpsid	i
}
 800353a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800356e:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <HAL_I2C_Mem_Read+0x4e0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	08db      	lsrs	r3, r3, #3
 8003574:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <HAL_I2C_Mem_Read+0x4e4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0a1a      	lsrs	r2, r3, #8
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00da      	lsls	r2, r3, #3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	3b01      	subs	r3, #1
 800358c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d118      	bne.n	80035c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035b6:	b662      	cpsie	i
}
 80035b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0a6      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d1d9      	bne.n	8003588 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003616:	b662      	cpsie	i
}
 8003618:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364c:	e04e      	b.n	80036ec <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fcbe 	bl	8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e058      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d124      	bne.n	80036ec <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f47f ae88 	bne.w	8003406 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003712:	2302      	movs	r3, #2
  }
}
 8003714:	4618      	mov	r0, r3
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	00010004 	.word	0x00010004
 8003720:	20000004 	.word	0x20000004
 8003724:	14f8b589 	.word	0x14f8b589

08003728 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	460b      	mov	r3, r1
 8003736:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff f83a 	bl	80027b0 <HAL_GetTick>
 800373c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	f040 8111 	bne.w	8003972 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2319      	movs	r3, #25
 8003756:	2201      	movs	r2, #1
 8003758:	4988      	ldr	r1, [pc, #544]	; (800397c <HAL_I2C_IsDeviceReady+0x254>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fa90 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
 8003768:	e104      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_I2C_IsDeviceReady+0x50>
 8003774:	2302      	movs	r3, #2
 8003776:	e0fd      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x24c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d007      	beq.n	800379e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2224      	movs	r2, #36	; 0x24
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a70      	ldr	r2, [pc, #448]	; (8003980 <HAL_I2C_IsDeviceReady+0x258>)
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2200      	movs	r2, #0
 80037da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa4e 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	d103      	bne.n	8003802 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e0b6      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003814:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe ffcb 	bl	80027b0 <HAL_GetTick>
 800381a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800384a:	e025      	b.n	8003898 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800384c:	f7fe ffb0 	bl	80027b0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <HAL_I2C_IsDeviceReady+0x13a>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	22a0      	movs	r2, #160	; 0xa0
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2ba0      	cmp	r3, #160	; 0xa0
 80038a2:	d005      	beq.n	80038b0 <HAL_I2C_IsDeviceReady+0x188>
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_I2C_IsDeviceReady+0x188>
 80038aa:	7dbb      	ldrb	r3, [r7, #22]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0cd      	beq.n	800384c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d129      	bne.n	800391a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2319      	movs	r3, #25
 80038f2:	2201      	movs	r2, #1
 80038f4:	4921      	ldr	r1, [pc, #132]	; (800397c <HAL_I2C_IsDeviceReady+0x254>)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f9c2 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e036      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e02c      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003928:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003932:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2319      	movs	r3, #25
 800393a:	2201      	movs	r2, #1
 800393c:	490f      	ldr	r1, [pc, #60]	; (800397c <HAL_I2C_IsDeviceReady+0x254>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f99e 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e012      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3301      	adds	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	f4ff af32 	bcc.w	80037c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00100002 	.word	0x00100002
 8003980:	ffff0000 	.word	0xffff0000

08003984 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4603      	mov	r3, r0
 8003994:	817b      	strh	r3, [r7, #10]
 8003996:	460b      	mov	r3, r1
 8003998:	813b      	strh	r3, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f960 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d4:	d103      	bne.n	80039de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e05f      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039e2:	897b      	ldrh	r3, [r7, #10]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6a3a      	ldr	r2, [r7, #32]
 80039f6:	492d      	ldr	r1, [pc, #180]	; (8003aac <I2C_RequestMemoryWrite+0x128>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f9bb 	bl	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04c      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a20:	6a39      	ldr	r1, [r7, #32]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa46 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d107      	bne.n	8003a46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e02b      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	611a      	str	r2, [r3, #16]
 8003a5a:	e021      	b.n	8003aa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fa20 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e005      	b.n	8003aa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a96:	893b      	ldrh	r3, [r7, #8]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	00010002 	.word	0x00010002

08003ab0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	813b      	strh	r3, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f8c2 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b10:	d103      	bne.n	8003b1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0aa      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	4952      	ldr	r1, [pc, #328]	; (8003c7c <I2C_RequestMemoryRead+0x1cc>)
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f91d 	bl	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e097      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	6a39      	ldr	r1, [r7, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f9a8 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00d      	beq.n	8003b86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d107      	bne.n	8003b82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e076      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8c:	893b      	ldrh	r3, [r7, #8]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	611a      	str	r2, [r3, #16]
 8003b96:	e021      	b.n	8003bdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f982 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d107      	bne.n	8003bce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e050      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd2:	893b      	ldrh	r3, [r7, #8]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	6a39      	ldr	r1, [r7, #32]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f967 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d107      	bne.n	8003c04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e035      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f82b 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3e:	d103      	bne.n	8003c48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e013      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c4c:	897b      	ldrh	r3, [r7, #10]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	4906      	ldr	r1, [pc, #24]	; (8003c7c <I2C_RequestMemoryRead+0x1cc>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f886 	bl	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	00010002 	.word	0x00010002

08003c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c90:	e048      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c98:	d044      	beq.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9a:	f7fe fd89 	bl	80027b0 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d139      	bne.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10d      	bne.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	43da      	mvns	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	e00c      	b.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d116      	bne.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e023      	b.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10d      	bne.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	e00c      	b.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d093      	beq.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d82:	e071      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d123      	bne.n	8003ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e067      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de2:	d041      	beq.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fe fce4 	bl	80027b0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d136      	bne.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10c      	bne.n	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bf14      	ite	ne
 8003e16:	2301      	movne	r3, #1
 8003e18:	2300      	moveq	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	e00b      	b.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d016      	beq.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e021      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	0c1b      	lsrs	r3, r3, #16
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10c      	bne.n	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e00b      	b.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f af6d 	bne.w	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec0:	e034      	b.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f8e3 	bl	800408e <I2C_IsAcknowledgeFailed>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e034      	b.n	8003f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed8:	d028      	beq.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fe fc69 	bl	80027b0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11d      	bne.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d016      	beq.n	8003f2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e007      	b.n	8003f3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d1c3      	bne.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f50:	e034      	b.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f89b 	bl	800408e <I2C_IsAcknowledgeFailed>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e034      	b.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f68:	d028      	beq.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fe fc21 	bl	80027b0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d11d      	bne.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d016      	beq.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e007      	b.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d1c3      	bne.n	8003f52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fe0:	e049      	b.n	8004076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d119      	bne.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0210 	mvn.w	r2, #16
 8003ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e030      	b.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004024:	f7fe fbc4 	bl	80027b0 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d11d      	bne.n	8004076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d016      	beq.n	8004076 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e007      	b.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d1ae      	bne.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a4:	d11b      	bne.n	80040de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e272      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8087 	beq.w	800421a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800410c:	4b92      	ldr	r3, [pc, #584]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b04      	cmp	r3, #4
 8004116:	d00c      	beq.n	8004132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004118:	4b8f      	ldr	r3, [pc, #572]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d112      	bne.n	800414a <HAL_RCC_OscConfig+0x5e>
 8004124:	4b8c      	ldr	r3, [pc, #560]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d10b      	bne.n	800414a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004132:	4b89      	ldr	r3, [pc, #548]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d06c      	beq.n	8004218 <HAL_RCC_OscConfig+0x12c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d168      	bne.n	8004218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e24c      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004152:	d106      	bne.n	8004162 <HAL_RCC_OscConfig+0x76>
 8004154:	4b80      	ldr	r3, [pc, #512]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a7f      	ldr	r2, [pc, #508]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800415a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	e02e      	b.n	80041c0 <HAL_RCC_OscConfig+0xd4>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0x98>
 800416a:	4b7b      	ldr	r3, [pc, #492]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7a      	ldr	r2, [pc, #488]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b78      	ldr	r3, [pc, #480]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a77      	ldr	r2, [pc, #476]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800417c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e01d      	b.n	80041c0 <HAL_RCC_OscConfig+0xd4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0xbc>
 800418e:	4b72      	ldr	r3, [pc, #456]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a71      	ldr	r2, [pc, #452]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b6f      	ldr	r3, [pc, #444]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a6e      	ldr	r2, [pc, #440]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e00b      	b.n	80041c0 <HAL_RCC_OscConfig+0xd4>
 80041a8:	4b6b      	ldr	r3, [pc, #428]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a6a      	ldr	r2, [pc, #424]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b68      	ldr	r3, [pc, #416]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a67      	ldr	r2, [pc, #412]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80041ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d013      	beq.n	80041f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fe faf2 	bl	80027b0 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d0:	f7fe faee 	bl	80027b0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	; 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e200      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	4b5d      	ldr	r3, [pc, #372]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0xe4>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fe fade 	bl	80027b0 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f8:	f7fe fada 	bl	80027b0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	; 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e1ec      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420a:	4b53      	ldr	r3, [pc, #332]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x10c>
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d063      	beq.n	80042ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004226:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004232:	4b49      	ldr	r3, [pc, #292]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b08      	cmp	r3, #8
 800423c:	d11c      	bne.n	8004278 <HAL_RCC_OscConfig+0x18c>
 800423e:	4b46      	ldr	r3, [pc, #280]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d116      	bne.n	8004278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424a:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_RCC_OscConfig+0x176>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d001      	beq.n	8004262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e1c0      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4939      	ldr	r1, [pc, #228]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	e03a      	b.n	80042ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fe fa93 	bl	80027b0 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428e:	f7fe fa8f 	bl	80027b0 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e1a1      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ac:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4927      	ldr	r1, [pc, #156]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	600b      	str	r3, [r1, #0]
 80042c0:	e015      	b.n	80042ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe fa72 	bl	80027b0 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d0:	f7fe fa6e 	bl	80027b0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e180      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d03a      	beq.n	8004370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d019      	beq.n	8004336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004308:	f7fe fa52 	bl	80027b0 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004310:	f7fe fa4e 	bl	80027b0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e160      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <HAL_RCC_OscConfig+0x26c>)
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800432e:	2001      	movs	r0, #1
 8004330:	f000 face 	bl	80048d0 <RCC_Delay>
 8004334:	e01c      	b.n	8004370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433c:	f7fe fa38 	bl	80027b0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004342:	e00f      	b.n	8004364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004344:	f7fe fa34 	bl	80027b0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d908      	bls.n	8004364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e146      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	42420000 	.word	0x42420000
 8004360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b92      	ldr	r3, [pc, #584]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e9      	bne.n	8004344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80a6 	beq.w	80044ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b8b      	ldr	r3, [pc, #556]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10d      	bne.n	80043aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4a87      	ldr	r2, [pc, #540]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004398:	61d3      	str	r3, [r2, #28]
 800439a:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a6:	2301      	movs	r3, #1
 80043a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b82      	ldr	r3, [pc, #520]	; (80045b4 <HAL_RCC_OscConfig+0x4c8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d118      	bne.n	80043e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043b6:	4b7f      	ldr	r3, [pc, #508]	; (80045b4 <HAL_RCC_OscConfig+0x4c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7e      	ldr	r2, [pc, #504]	; (80045b4 <HAL_RCC_OscConfig+0x4c8>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c2:	f7fe f9f5 	bl	80027b0 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ca:	f7fe f9f1 	bl	80027b0 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b64      	cmp	r3, #100	; 0x64
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e103      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043dc:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <HAL_RCC_OscConfig+0x4c8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d106      	bne.n	80043fe <HAL_RCC_OscConfig+0x312>
 80043f0:	4b6f      	ldr	r3, [pc, #444]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6213      	str	r3, [r2, #32]
 80043fc:	e02d      	b.n	800445a <HAL_RCC_OscConfig+0x36e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x334>
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4a69      	ldr	r2, [pc, #420]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	6213      	str	r3, [r2, #32]
 8004412:	4b67      	ldr	r3, [pc, #412]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4a66      	ldr	r2, [pc, #408]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004418:	f023 0304 	bic.w	r3, r3, #4
 800441c:	6213      	str	r3, [r2, #32]
 800441e:	e01c      	b.n	800445a <HAL_RCC_OscConfig+0x36e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d10c      	bne.n	8004442 <HAL_RCC_OscConfig+0x356>
 8004428:	4b61      	ldr	r3, [pc, #388]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	4a60      	ldr	r2, [pc, #384]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800442e:	f043 0304 	orr.w	r3, r3, #4
 8004432:	6213      	str	r3, [r2, #32]
 8004434:	4b5e      	ldr	r3, [pc, #376]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4a5d      	ldr	r2, [pc, #372]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6213      	str	r3, [r2, #32]
 8004440:	e00b      	b.n	800445a <HAL_RCC_OscConfig+0x36e>
 8004442:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4a5a      	ldr	r2, [pc, #360]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	6213      	str	r3, [r2, #32]
 800444e:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4a57      	ldr	r2, [pc, #348]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004454:	f023 0304 	bic.w	r3, r3, #4
 8004458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d015      	beq.n	800448e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004462:	f7fe f9a5 	bl	80027b0 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004468:	e00a      	b.n	8004480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446a:	f7fe f9a1 	bl	80027b0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f241 3288 	movw	r2, #5000	; 0x1388
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e0b1      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004480:	4b4b      	ldr	r3, [pc, #300]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ee      	beq.n	800446a <HAL_RCC_OscConfig+0x37e>
 800448c:	e014      	b.n	80044b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448e:	f7fe f98f 	bl	80027b0 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004494:	e00a      	b.n	80044ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fe f98b 	bl	80027b0 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e09b      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ac:	4b40      	ldr	r3, [pc, #256]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1ee      	bne.n	8004496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d105      	bne.n	80044ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044be:	4b3c      	ldr	r3, [pc, #240]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8087 	beq.w	80045e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d061      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d146      	bne.n	8004576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e8:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <HAL_RCC_OscConfig+0x4cc>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ee:	f7fe f95f 	bl	80027b0 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fe f95b 	bl	80027b0 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e06d      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004508:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451c:	d108      	bne.n	8004530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	4921      	ldr	r1, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a19      	ldr	r1, [r3, #32]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	430b      	orrs	r3, r1
 8004542:	491b      	ldr	r1, [pc, #108]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <HAL_RCC_OscConfig+0x4cc>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fe f92f 	bl	80027b0 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004556:	f7fe f92b 	bl	80027b0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e03d      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x46a>
 8004574:	e035      	b.n	80045e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_RCC_OscConfig+0x4cc>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fe f918 	bl	80027b0 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004584:	f7fe f914 	bl	80027b0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e026      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x498>
 80045a2:	e01e      	b.n	80045e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e019      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40007000 	.word	0x40007000
 80045b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_OscConfig+0x500>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021000 	.word	0x40021000

080045f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0d0      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d910      	bls.n	8004634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b67      	ldr	r3, [pc, #412]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 0207 	bic.w	r2, r3, #7
 800461a:	4965      	ldr	r1, [pc, #404]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b63      	ldr	r3, [pc, #396]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0b8      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d020      	beq.n	8004682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800464c:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a58      	ldr	r2, [pc, #352]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004664:	4b53      	ldr	r3, [pc, #332]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a52      	ldr	r2, [pc, #328]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800466e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004670:	4b50      	ldr	r3, [pc, #320]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	494d      	ldr	r1, [pc, #308]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d040      	beq.n	8004710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d115      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e073      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046be:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e06b      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ce:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f023 0203 	bic.w	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4936      	ldr	r1, [pc, #216]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e0:	f7fe f866 	bl	80027b0 <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e8:	f7fe f862 	bl	80027b0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e053      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 020c 	and.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	429a      	cmp	r2, r3
 800470e:	d1eb      	bne.n	80046e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d210      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 0207 	bic.w	r2, r3, #7
 8004726:	4922      	ldr	r1, [pc, #136]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e032      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4916      	ldr	r1, [pc, #88]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	490e      	ldr	r1, [pc, #56]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800477e:	f000 f821 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8004782:	4602      	mov	r2, r0
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	490a      	ldr	r1, [pc, #40]	; (80047b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <HAL_RCC_ClockConfig+0x1cc>)
 8004798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <HAL_RCC_ClockConfig+0x1d0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd ffc4 	bl	800272c <HAL_InitTick>

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40022000 	.word	0x40022000
 80047b4:	40021000 	.word	0x40021000
 80047b8:	08009e5c 	.word	0x08009e5c
 80047bc:	20000004 	.word	0x20000004
 80047c0:	20000008 	.word	0x20000008

080047c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047de:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <HAL_RCC_GetSysClockFreq+0x94>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d002      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x30>
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0x36>
 80047f2:	e027      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_GetSysClockFreq+0x98>)
 80047f6:	613b      	str	r3, [r7, #16]
      break;
 80047f8:	e027      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	0c9b      	lsrs	r3, r3, #18
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	4a17      	ldr	r2, [pc, #92]	; (8004860 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004804:	5cd3      	ldrb	r3, [r2, r3]
 8004806:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d010      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <HAL_RCC_GetSysClockFreq+0x94>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	0c5b      	lsrs	r3, r3, #17
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	4a11      	ldr	r2, [pc, #68]	; (8004864 <HAL_RCC_GetSysClockFreq+0xa0>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a0d      	ldr	r2, [pc, #52]	; (800485c <HAL_RCC_GetSysClockFreq+0x98>)
 8004826:	fb03 f202 	mul.w	r2, r3, r2
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e004      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004838:	fb02 f303 	mul.w	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	613b      	str	r3, [r7, #16]
      break;
 8004842:	e002      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetSysClockFreq+0x98>)
 8004846:	613b      	str	r3, [r7, #16]
      break;
 8004848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800484a:	693b      	ldr	r3, [r7, #16]
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	007a1200 	.word	0x007a1200
 8004860:	08009e74 	.word	0x08009e74
 8004864:	08009e84 	.word	0x08009e84
 8004868:	003d0900 	.word	0x003d0900

0800486c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004870:	4b02      	ldr	r3, [pc, #8]	; (800487c <HAL_RCC_GetHCLKFreq+0x10>)
 8004872:	681b      	ldr	r3, [r3, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	20000004 	.word	0x20000004

08004880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004884:	f7ff fff2 	bl	800486c <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	08009e6c 	.word	0x08009e6c

080048a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048ac:	f7ff ffde 	bl	800486c <HAL_RCC_GetHCLKFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	0adb      	lsrs	r3, r3, #11
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4903      	ldr	r1, [pc, #12]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	08009e6c 	.word	0x08009e6c

080048d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <RCC_Delay+0x34>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <RCC_Delay+0x38>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0a5b      	lsrs	r3, r3, #9
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048ec:	bf00      	nop
  }
  while (Delay --);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e5a      	subs	r2, r3, #1
 80048f2:	60fa      	str	r2, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f9      	bne.n	80048ec <RCC_Delay+0x1c>
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr
 8004904:	20000004 	.word	0x20000004
 8004908:	10624dd3 	.word	0x10624dd3

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e041      	b.n	80049a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fd fc7a 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fa5c 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e03a      	b.n	8004a3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_TIM_Base_Start_IT+0x98>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <HAL_TIM_Base_Start_IT+0x9c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <HAL_TIM_Base_Start_IT+0xa0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d111      	bne.n	8004a28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b06      	cmp	r3, #6
 8004a14:	d010      	beq.n	8004a38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	e007      	b.n	8004a38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800

08004a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0202 	mvn.w	r2, #2
 8004a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f998 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f98b 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f99a 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d020      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01b      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0204 	mvn.w	r2, #4
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f972 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f965 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f974 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0208 	mvn.w	r2, #8
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2204      	movs	r2, #4
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f94c 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f93f 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f94e 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0210 	mvn.w	r2, #16
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f926 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f919 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f928 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00c      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0201 	mvn.w	r2, #1
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fc0e 	bl	80023d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa7f 	bl	80050de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8f8 	bl	8004df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0220 	mvn.w	r2, #32
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa52 	bl	80050cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIM_ConfigClockSource+0x1c>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0b4      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x186>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c84:	d03e      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0xd4>
 8004c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8a:	f200 8087 	bhi.w	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	f000 8086 	beq.w	8004da2 <HAL_TIM_ConfigClockSource+0x172>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d87f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b70      	cmp	r3, #112	; 0x70
 8004c9e:	d01a      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ca0:	2b70      	cmp	r3, #112	; 0x70
 8004ca2:	d87b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b60      	cmp	r3, #96	; 0x60
 8004ca6:	d050      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x11a>
 8004ca8:	2b60      	cmp	r3, #96	; 0x60
 8004caa:	d877      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b50      	cmp	r3, #80	; 0x50
 8004cae:	d03c      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0xfa>
 8004cb0:	2b50      	cmp	r3, #80	; 0x50
 8004cb2:	d873      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d058      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x13a>
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d86f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b30      	cmp	r3, #48	; 0x30
 8004cbe:	d064      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d86b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d060      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d867      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d05a      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	e062      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f000 f974 	bl	8004fd2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]
      break;
 8004d02:	e04f      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6899      	ldr	r1, [r3, #8]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f000 f95d 	bl	8004fd2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d26:	609a      	str	r2, [r3, #8]
      break;
 8004d28:	e03c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 f8d4 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2150      	movs	r1, #80	; 0x50
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f92b 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d48:	e02c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 f8f2 	bl	8004f40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2160      	movs	r1, #96	; 0x60
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f91b 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d68:	e01c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 f8b4 	bl	8004ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2140      	movs	r1, #64	; 0x40
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f90b 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d88:	e00c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 f902 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d9a:	e003      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e000      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
	...

08004e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <TIM_Base_SetConfig+0xd4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <TIM_Base_SetConfig+0xd8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d007      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <TIM_Base_SetConfig+0xd4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <TIM_Base_SetConfig+0xd8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	; (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800

08004ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 0201 	bic.w	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 030a 	bic.w	r3, r3, #10
 8004f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	031b      	lsls	r3, r3, #12
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f043 0307 	orr.w	r3, r3, #7
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b087      	sub	sp, #28
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	609a      	str	r2, [r3, #8]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e046      	b.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d009      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10c      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4313      	orrs	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800

080050cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e042      	b.n	8005188 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fd f8ae 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	; 0x24
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f971 	bl	800541c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d175      	bne.n	800529c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_UART_Transmit+0x2c>
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e06e      	b.n	800529e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2221      	movs	r2, #33	; 0x21
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ce:	f7fd faef 	bl	80027b0 <HAL_GetTick>
 80051d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d108      	bne.n	80051fc <HAL_UART_Transmit+0x6c>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d104      	bne.n	80051fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	e003      	b.n	8005204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005204:	e02e      	b.n	8005264 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2180      	movs	r1, #128	; 0x80
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f848 	bl	80052a6 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e03a      	b.n	800529e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800523c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3302      	adds	r3, #2
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	e007      	b.n	8005256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	3301      	adds	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1cb      	bne.n	8005206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	2140      	movs	r1, #64	; 0x40
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f814 	bl	80052a6 <UART_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e006      	b.n	800529e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	e000      	b.n	800529e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800529c:	2302      	movs	r3, #2
  }
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4613      	mov	r3, r2
 80052b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b6:	e03b      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052be:	d037      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7fd fa76 	bl	80027b0 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e03a      	b.n	8005350 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d020      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d01d      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d116      	bne.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f81d 	bl	8005358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2208      	movs	r2, #8
 8005322:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e00f      	b.n	8005350 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	d0b4      	beq.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b095      	sub	sp, #84	; 0x54
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005380:	643a      	str	r2, [r7, #64]	; 0x40
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3314      	adds	r3, #20
 800539a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3314      	adds	r3, #20
 80053b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d119      	bne.n	8005404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f023 0310 	bic.w	r3, r3, #16
 80053e6:	647b      	str	r3, [r7, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f0:	61ba      	str	r2, [r7, #24]
 80053f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	613b      	str	r3, [r7, #16]
   return(result);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005412:	bf00      	nop
 8005414:	3754      	adds	r7, #84	; 0x54
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005456:	f023 030c 	bic.w	r3, r3, #12
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	430b      	orrs	r3, r1
 8005462:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2c      	ldr	r2, [pc, #176]	; (8005530 <UART_SetConfig+0x114>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005484:	f7ff fa10 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	e002      	b.n	8005492 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800548c:	f7ff f9f8 	bl	8004880 <HAL_RCC_GetPCLK1Freq>
 8005490:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	4a22      	ldr	r2, [pc, #136]	; (8005534 <UART_SetConfig+0x118>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	0119      	lsls	r1, r3, #4
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009a      	lsls	r2, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <UART_SetConfig+0x118>)
 80054ca:	fba3 0302 	umull	r0, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	2064      	movs	r0, #100	; 0x64
 80054d2:	fb00 f303 	mul.w	r3, r0, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	3332      	adds	r3, #50	; 0x32
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <UART_SetConfig+0x118>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e8:	4419      	add	r1, r3
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009a      	lsls	r2, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005500:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <UART_SetConfig+0x118>)
 8005502:	fba3 0302 	umull	r0, r3, r3, r2
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	2064      	movs	r0, #100	; 0x64
 800550a:	fb00 f303 	mul.w	r3, r0, r3
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	3332      	adds	r3, #50	; 0x32
 8005514:	4a07      	ldr	r2, [pc, #28]	; (8005534 <UART_SetConfig+0x118>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	440a      	add	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40013800 	.word	0x40013800
 8005534:	51eb851f 	.word	0x51eb851f

08005538 <__errno>:
 8005538:	4b01      	ldr	r3, [pc, #4]	; (8005540 <__errno+0x8>)
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000010 	.word	0x20000010

08005544 <__libc_init_array>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	2600      	movs	r6, #0
 8005548:	4d0c      	ldr	r5, [pc, #48]	; (800557c <__libc_init_array+0x38>)
 800554a:	4c0d      	ldr	r4, [pc, #52]	; (8005580 <__libc_init_array+0x3c>)
 800554c:	1b64      	subs	r4, r4, r5
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	42a6      	cmp	r6, r4
 8005552:	d109      	bne.n	8005568 <__libc_init_array+0x24>
 8005554:	f004 fc52 	bl	8009dfc <_init>
 8005558:	2600      	movs	r6, #0
 800555a:	4d0a      	ldr	r5, [pc, #40]	; (8005584 <__libc_init_array+0x40>)
 800555c:	4c0a      	ldr	r4, [pc, #40]	; (8005588 <__libc_init_array+0x44>)
 800555e:	1b64      	subs	r4, r4, r5
 8005560:	10a4      	asrs	r4, r4, #2
 8005562:	42a6      	cmp	r6, r4
 8005564:	d105      	bne.n	8005572 <__libc_init_array+0x2e>
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	f855 3b04 	ldr.w	r3, [r5], #4
 800556c:	4798      	blx	r3
 800556e:	3601      	adds	r6, #1
 8005570:	e7ee      	b.n	8005550 <__libc_init_array+0xc>
 8005572:	f855 3b04 	ldr.w	r3, [r5], #4
 8005576:	4798      	blx	r3
 8005578:	3601      	adds	r6, #1
 800557a:	e7f2      	b.n	8005562 <__libc_init_array+0x1e>
 800557c:	0800a32c 	.word	0x0800a32c
 8005580:	0800a32c 	.word	0x0800a32c
 8005584:	0800a32c 	.word	0x0800a32c
 8005588:	0800a330 	.word	0x0800a330

0800558c <memset>:
 800558c:	4603      	mov	r3, r0
 800558e:	4402      	add	r2, r0
 8005590:	4293      	cmp	r3, r2
 8005592:	d100      	bne.n	8005596 <memset+0xa>
 8005594:	4770      	bx	lr
 8005596:	f803 1b01 	strb.w	r1, [r3], #1
 800559a:	e7f9      	b.n	8005590 <memset+0x4>

0800559c <__cvt>:
 800559c:	2b00      	cmp	r3, #0
 800559e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a2:	461f      	mov	r7, r3
 80055a4:	bfbb      	ittet	lt
 80055a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80055aa:	461f      	movlt	r7, r3
 80055ac:	2300      	movge	r3, #0
 80055ae:	232d      	movlt	r3, #45	; 0x2d
 80055b0:	b088      	sub	sp, #32
 80055b2:	4614      	mov	r4, r2
 80055b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055b8:	7013      	strb	r3, [r2, #0]
 80055ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80055c0:	f023 0820 	bic.w	r8, r3, #32
 80055c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055c8:	d005      	beq.n	80055d6 <__cvt+0x3a>
 80055ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055ce:	d100      	bne.n	80055d2 <__cvt+0x36>
 80055d0:	3501      	adds	r5, #1
 80055d2:	2302      	movs	r3, #2
 80055d4:	e000      	b.n	80055d8 <__cvt+0x3c>
 80055d6:	2303      	movs	r3, #3
 80055d8:	aa07      	add	r2, sp, #28
 80055da:	9204      	str	r2, [sp, #16]
 80055dc:	aa06      	add	r2, sp, #24
 80055de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80055e2:	e9cd 3500 	strd	r3, r5, [sp]
 80055e6:	4622      	mov	r2, r4
 80055e8:	463b      	mov	r3, r7
 80055ea:	f001 fd85 	bl	80070f8 <_dtoa_r>
 80055ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055f2:	4606      	mov	r6, r0
 80055f4:	d102      	bne.n	80055fc <__cvt+0x60>
 80055f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055f8:	07db      	lsls	r3, r3, #31
 80055fa:	d522      	bpl.n	8005642 <__cvt+0xa6>
 80055fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005600:	eb06 0905 	add.w	r9, r6, r5
 8005604:	d110      	bne.n	8005628 <__cvt+0x8c>
 8005606:	7833      	ldrb	r3, [r6, #0]
 8005608:	2b30      	cmp	r3, #48	; 0x30
 800560a:	d10a      	bne.n	8005622 <__cvt+0x86>
 800560c:	2200      	movs	r2, #0
 800560e:	2300      	movs	r3, #0
 8005610:	4620      	mov	r0, r4
 8005612:	4639      	mov	r1, r7
 8005614:	f7fb fa7c 	bl	8000b10 <__aeabi_dcmpeq>
 8005618:	b918      	cbnz	r0, 8005622 <__cvt+0x86>
 800561a:	f1c5 0501 	rsb	r5, r5, #1
 800561e:	f8ca 5000 	str.w	r5, [sl]
 8005622:	f8da 3000 	ldr.w	r3, [sl]
 8005626:	4499      	add	r9, r3
 8005628:	2200      	movs	r2, #0
 800562a:	2300      	movs	r3, #0
 800562c:	4620      	mov	r0, r4
 800562e:	4639      	mov	r1, r7
 8005630:	f7fb fa6e 	bl	8000b10 <__aeabi_dcmpeq>
 8005634:	b108      	cbz	r0, 800563a <__cvt+0x9e>
 8005636:	f8cd 901c 	str.w	r9, [sp, #28]
 800563a:	2230      	movs	r2, #48	; 0x30
 800563c:	9b07      	ldr	r3, [sp, #28]
 800563e:	454b      	cmp	r3, r9
 8005640:	d307      	bcc.n	8005652 <__cvt+0xb6>
 8005642:	4630      	mov	r0, r6
 8005644:	9b07      	ldr	r3, [sp, #28]
 8005646:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005648:	1b9b      	subs	r3, r3, r6
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	b008      	add	sp, #32
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	9107      	str	r1, [sp, #28]
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e7f0      	b.n	800563c <__cvt+0xa0>

0800565a <__exponent>:
 800565a:	4603      	mov	r3, r0
 800565c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800565e:	2900      	cmp	r1, #0
 8005660:	f803 2b02 	strb.w	r2, [r3], #2
 8005664:	bfb6      	itet	lt
 8005666:	222d      	movlt	r2, #45	; 0x2d
 8005668:	222b      	movge	r2, #43	; 0x2b
 800566a:	4249      	neglt	r1, r1
 800566c:	2909      	cmp	r1, #9
 800566e:	7042      	strb	r2, [r0, #1]
 8005670:	dd2b      	ble.n	80056ca <__exponent+0x70>
 8005672:	f10d 0407 	add.w	r4, sp, #7
 8005676:	46a4      	mov	ip, r4
 8005678:	270a      	movs	r7, #10
 800567a:	fb91 f6f7 	sdiv	r6, r1, r7
 800567e:	460a      	mov	r2, r1
 8005680:	46a6      	mov	lr, r4
 8005682:	fb07 1516 	mls	r5, r7, r6, r1
 8005686:	2a63      	cmp	r2, #99	; 0x63
 8005688:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800568c:	4631      	mov	r1, r6
 800568e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005692:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005696:	dcf0      	bgt.n	800567a <__exponent+0x20>
 8005698:	3130      	adds	r1, #48	; 0x30
 800569a:	f1ae 0502 	sub.w	r5, lr, #2
 800569e:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056a2:	4629      	mov	r1, r5
 80056a4:	1c44      	adds	r4, r0, #1
 80056a6:	4561      	cmp	r1, ip
 80056a8:	d30a      	bcc.n	80056c0 <__exponent+0x66>
 80056aa:	f10d 0209 	add.w	r2, sp, #9
 80056ae:	eba2 020e 	sub.w	r2, r2, lr
 80056b2:	4565      	cmp	r5, ip
 80056b4:	bf88      	it	hi
 80056b6:	2200      	movhi	r2, #0
 80056b8:	4413      	add	r3, r2
 80056ba:	1a18      	subs	r0, r3, r0
 80056bc:	b003      	add	sp, #12
 80056be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056c4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056c8:	e7ed      	b.n	80056a6 <__exponent+0x4c>
 80056ca:	2330      	movs	r3, #48	; 0x30
 80056cc:	3130      	adds	r1, #48	; 0x30
 80056ce:	7083      	strb	r3, [r0, #2]
 80056d0:	70c1      	strb	r1, [r0, #3]
 80056d2:	1d03      	adds	r3, r0, #4
 80056d4:	e7f1      	b.n	80056ba <__exponent+0x60>
	...

080056d8 <_printf_float>:
 80056d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	b091      	sub	sp, #68	; 0x44
 80056de:	460c      	mov	r4, r1
 80056e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80056e4:	4616      	mov	r6, r2
 80056e6:	461f      	mov	r7, r3
 80056e8:	4605      	mov	r5, r0
 80056ea:	f002 fe59 	bl	80083a0 <_localeconv_r>
 80056ee:	6803      	ldr	r3, [r0, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	9309      	str	r3, [sp, #36]	; 0x24
 80056f4:	f7fa fd2c 	bl	8000150 <strlen>
 80056f8:	2300      	movs	r3, #0
 80056fa:	930e      	str	r3, [sp, #56]	; 0x38
 80056fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005700:	900a      	str	r0, [sp, #40]	; 0x28
 8005702:	3307      	adds	r3, #7
 8005704:	f023 0307 	bic.w	r3, r3, #7
 8005708:	f103 0208 	add.w	r2, r3, #8
 800570c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005710:	f8d4 b000 	ldr.w	fp, [r4]
 8005714:	f8c8 2000 	str.w	r2, [r8]
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005720:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005724:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005728:	930b      	str	r3, [sp, #44]	; 0x2c
 800572a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800572e:	4640      	mov	r0, r8
 8005730:	4b9c      	ldr	r3, [pc, #624]	; (80059a4 <_printf_float+0x2cc>)
 8005732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005734:	f7fb fa1e 	bl	8000b74 <__aeabi_dcmpun>
 8005738:	bb70      	cbnz	r0, 8005798 <_printf_float+0xc0>
 800573a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800573e:	4640      	mov	r0, r8
 8005740:	4b98      	ldr	r3, [pc, #608]	; (80059a4 <_printf_float+0x2cc>)
 8005742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005744:	f7fb f9f8 	bl	8000b38 <__aeabi_dcmple>
 8005748:	bb30      	cbnz	r0, 8005798 <_printf_float+0xc0>
 800574a:	2200      	movs	r2, #0
 800574c:	2300      	movs	r3, #0
 800574e:	4640      	mov	r0, r8
 8005750:	4651      	mov	r1, sl
 8005752:	f7fb f9e7 	bl	8000b24 <__aeabi_dcmplt>
 8005756:	b110      	cbz	r0, 800575e <_printf_float+0x86>
 8005758:	232d      	movs	r3, #45	; 0x2d
 800575a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800575e:	4b92      	ldr	r3, [pc, #584]	; (80059a8 <_printf_float+0x2d0>)
 8005760:	4892      	ldr	r0, [pc, #584]	; (80059ac <_printf_float+0x2d4>)
 8005762:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005766:	bf94      	ite	ls
 8005768:	4698      	movls	r8, r3
 800576a:	4680      	movhi	r8, r0
 800576c:	2303      	movs	r3, #3
 800576e:	f04f 0a00 	mov.w	sl, #0
 8005772:	6123      	str	r3, [r4, #16]
 8005774:	f02b 0304 	bic.w	r3, fp, #4
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	4633      	mov	r3, r6
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	9700      	str	r7, [sp, #0]
 8005782:	aa0f      	add	r2, sp, #60	; 0x3c
 8005784:	f000 f9d4 	bl	8005b30 <_printf_common>
 8005788:	3001      	adds	r0, #1
 800578a:	f040 8090 	bne.w	80058ae <_printf_float+0x1d6>
 800578e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005792:	b011      	add	sp, #68	; 0x44
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005798:	4642      	mov	r2, r8
 800579a:	4653      	mov	r3, sl
 800579c:	4640      	mov	r0, r8
 800579e:	4651      	mov	r1, sl
 80057a0:	f7fb f9e8 	bl	8000b74 <__aeabi_dcmpun>
 80057a4:	b148      	cbz	r0, 80057ba <_printf_float+0xe2>
 80057a6:	f1ba 0f00 	cmp.w	sl, #0
 80057aa:	bfb8      	it	lt
 80057ac:	232d      	movlt	r3, #45	; 0x2d
 80057ae:	4880      	ldr	r0, [pc, #512]	; (80059b0 <_printf_float+0x2d8>)
 80057b0:	bfb8      	it	lt
 80057b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057b6:	4b7f      	ldr	r3, [pc, #508]	; (80059b4 <_printf_float+0x2dc>)
 80057b8:	e7d3      	b.n	8005762 <_printf_float+0x8a>
 80057ba:	6863      	ldr	r3, [r4, #4]
 80057bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	d142      	bne.n	800584a <_printf_float+0x172>
 80057c4:	2306      	movs	r3, #6
 80057c6:	6063      	str	r3, [r4, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	9206      	str	r2, [sp, #24]
 80057cc:	aa0e      	add	r2, sp, #56	; 0x38
 80057ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80057d2:	aa0d      	add	r2, sp, #52	; 0x34
 80057d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80057d8:	9203      	str	r2, [sp, #12]
 80057da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80057de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	6863      	ldr	r3, [r4, #4]
 80057e6:	4642      	mov	r2, r8
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	4628      	mov	r0, r5
 80057ec:	4653      	mov	r3, sl
 80057ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80057f0:	f7ff fed4 	bl	800559c <__cvt>
 80057f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f6:	4680      	mov	r8, r0
 80057f8:	2947      	cmp	r1, #71	; 0x47
 80057fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057fc:	d108      	bne.n	8005810 <_printf_float+0x138>
 80057fe:	1cc8      	adds	r0, r1, #3
 8005800:	db02      	blt.n	8005808 <_printf_float+0x130>
 8005802:	6863      	ldr	r3, [r4, #4]
 8005804:	4299      	cmp	r1, r3
 8005806:	dd40      	ble.n	800588a <_printf_float+0x1b2>
 8005808:	f1a9 0902 	sub.w	r9, r9, #2
 800580c:	fa5f f989 	uxtb.w	r9, r9
 8005810:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005814:	d81f      	bhi.n	8005856 <_printf_float+0x17e>
 8005816:	464a      	mov	r2, r9
 8005818:	3901      	subs	r1, #1
 800581a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800581e:	910d      	str	r1, [sp, #52]	; 0x34
 8005820:	f7ff ff1b 	bl	800565a <__exponent>
 8005824:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005826:	4682      	mov	sl, r0
 8005828:	1813      	adds	r3, r2, r0
 800582a:	2a01      	cmp	r2, #1
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	dc02      	bgt.n	8005836 <_printf_float+0x15e>
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	07d2      	lsls	r2, r2, #31
 8005834:	d501      	bpl.n	800583a <_printf_float+0x162>
 8005836:	3301      	adds	r3, #1
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800583e:	2b00      	cmp	r3, #0
 8005840:	d09b      	beq.n	800577a <_printf_float+0xa2>
 8005842:	232d      	movs	r3, #45	; 0x2d
 8005844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005848:	e797      	b.n	800577a <_printf_float+0xa2>
 800584a:	2947      	cmp	r1, #71	; 0x47
 800584c:	d1bc      	bne.n	80057c8 <_printf_float+0xf0>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ba      	bne.n	80057c8 <_printf_float+0xf0>
 8005852:	2301      	movs	r3, #1
 8005854:	e7b7      	b.n	80057c6 <_printf_float+0xee>
 8005856:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800585a:	d118      	bne.n	800588e <_printf_float+0x1b6>
 800585c:	2900      	cmp	r1, #0
 800585e:	6863      	ldr	r3, [r4, #4]
 8005860:	dd0b      	ble.n	800587a <_printf_float+0x1a2>
 8005862:	6121      	str	r1, [r4, #16]
 8005864:	b913      	cbnz	r3, 800586c <_printf_float+0x194>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	07d0      	lsls	r0, r2, #31
 800586a:	d502      	bpl.n	8005872 <_printf_float+0x19a>
 800586c:	3301      	adds	r3, #1
 800586e:	440b      	add	r3, r1
 8005870:	6123      	str	r3, [r4, #16]
 8005872:	f04f 0a00 	mov.w	sl, #0
 8005876:	65a1      	str	r1, [r4, #88]	; 0x58
 8005878:	e7df      	b.n	800583a <_printf_float+0x162>
 800587a:	b913      	cbnz	r3, 8005882 <_printf_float+0x1aa>
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	07d2      	lsls	r2, r2, #31
 8005880:	d501      	bpl.n	8005886 <_printf_float+0x1ae>
 8005882:	3302      	adds	r3, #2
 8005884:	e7f4      	b.n	8005870 <_printf_float+0x198>
 8005886:	2301      	movs	r3, #1
 8005888:	e7f2      	b.n	8005870 <_printf_float+0x198>
 800588a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800588e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005890:	4299      	cmp	r1, r3
 8005892:	db05      	blt.n	80058a0 <_printf_float+0x1c8>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	6121      	str	r1, [r4, #16]
 8005898:	07d8      	lsls	r0, r3, #31
 800589a:	d5ea      	bpl.n	8005872 <_printf_float+0x19a>
 800589c:	1c4b      	adds	r3, r1, #1
 800589e:	e7e7      	b.n	8005870 <_printf_float+0x198>
 80058a0:	2900      	cmp	r1, #0
 80058a2:	bfcc      	ite	gt
 80058a4:	2201      	movgt	r2, #1
 80058a6:	f1c1 0202 	rsble	r2, r1, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	e7e0      	b.n	8005870 <_printf_float+0x198>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	055a      	lsls	r2, r3, #21
 80058b2:	d407      	bmi.n	80058c4 <_printf_float+0x1ec>
 80058b4:	6923      	ldr	r3, [r4, #16]
 80058b6:	4642      	mov	r2, r8
 80058b8:	4631      	mov	r1, r6
 80058ba:	4628      	mov	r0, r5
 80058bc:	47b8      	blx	r7
 80058be:	3001      	adds	r0, #1
 80058c0:	d12b      	bne.n	800591a <_printf_float+0x242>
 80058c2:	e764      	b.n	800578e <_printf_float+0xb6>
 80058c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058c8:	f240 80dd 	bls.w	8005a86 <_printf_float+0x3ae>
 80058cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	f7fb f91c 	bl	8000b10 <__aeabi_dcmpeq>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d033      	beq.n	8005944 <_printf_float+0x26c>
 80058dc:	2301      	movs	r3, #1
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	4a35      	ldr	r2, [pc, #212]	; (80059b8 <_printf_float+0x2e0>)
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	f43f af51 	beq.w	800578e <_printf_float+0xb6>
 80058ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058f0:	429a      	cmp	r2, r3
 80058f2:	db02      	blt.n	80058fa <_printf_float+0x222>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	07d8      	lsls	r0, r3, #31
 80058f8:	d50f      	bpl.n	800591a <_printf_float+0x242>
 80058fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058fe:	4631      	mov	r1, r6
 8005900:	4628      	mov	r0, r5
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	f43f af42 	beq.w	800578e <_printf_float+0xb6>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	f104 091a 	add.w	r9, r4, #26
 8005912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005914:	3b01      	subs	r3, #1
 8005916:	4543      	cmp	r3, r8
 8005918:	dc09      	bgt.n	800592e <_printf_float+0x256>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	079b      	lsls	r3, r3, #30
 800591e:	f100 8102 	bmi.w	8005b26 <_printf_float+0x44e>
 8005922:	68e0      	ldr	r0, [r4, #12]
 8005924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005926:	4298      	cmp	r0, r3
 8005928:	bfb8      	it	lt
 800592a:	4618      	movlt	r0, r3
 800592c:	e731      	b.n	8005792 <_printf_float+0xba>
 800592e:	2301      	movs	r3, #1
 8005930:	464a      	mov	r2, r9
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	f43f af28 	beq.w	800578e <_printf_float+0xb6>
 800593e:	f108 0801 	add.w	r8, r8, #1
 8005942:	e7e6      	b.n	8005912 <_printf_float+0x23a>
 8005944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005946:	2b00      	cmp	r3, #0
 8005948:	dc38      	bgt.n	80059bc <_printf_float+0x2e4>
 800594a:	2301      	movs	r3, #1
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <_printf_float+0x2e0>)
 8005952:	47b8      	blx	r7
 8005954:	3001      	adds	r0, #1
 8005956:	f43f af1a 	beq.w	800578e <_printf_float+0xb6>
 800595a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800595e:	4313      	orrs	r3, r2
 8005960:	d102      	bne.n	8005968 <_printf_float+0x290>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	07d9      	lsls	r1, r3, #31
 8005966:	d5d8      	bpl.n	800591a <_printf_float+0x242>
 8005968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	f43f af0b 	beq.w	800578e <_printf_float+0xb6>
 8005978:	f04f 0900 	mov.w	r9, #0
 800597c:	f104 0a1a 	add.w	sl, r4, #26
 8005980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005982:	425b      	negs	r3, r3
 8005984:	454b      	cmp	r3, r9
 8005986:	dc01      	bgt.n	800598c <_printf_float+0x2b4>
 8005988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800598a:	e794      	b.n	80058b6 <_printf_float+0x1de>
 800598c:	2301      	movs	r3, #1
 800598e:	4652      	mov	r2, sl
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f aef9 	beq.w	800578e <_printf_float+0xb6>
 800599c:	f109 0901 	add.w	r9, r9, #1
 80059a0:	e7ee      	b.n	8005980 <_printf_float+0x2a8>
 80059a2:	bf00      	nop
 80059a4:	7fefffff 	.word	0x7fefffff
 80059a8:	08009e8c 	.word	0x08009e8c
 80059ac:	08009e90 	.word	0x08009e90
 80059b0:	08009e98 	.word	0x08009e98
 80059b4:	08009e94 	.word	0x08009e94
 80059b8:	08009e9c 	.word	0x08009e9c
 80059bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059c0:	429a      	cmp	r2, r3
 80059c2:	bfa8      	it	ge
 80059c4:	461a      	movge	r2, r3
 80059c6:	2a00      	cmp	r2, #0
 80059c8:	4691      	mov	r9, r2
 80059ca:	dc37      	bgt.n	8005a3c <_printf_float+0x364>
 80059cc:	f04f 0b00 	mov.w	fp, #0
 80059d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059d4:	f104 021a 	add.w	r2, r4, #26
 80059d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80059dc:	ebaa 0309 	sub.w	r3, sl, r9
 80059e0:	455b      	cmp	r3, fp
 80059e2:	dc33      	bgt.n	8005a4c <_printf_float+0x374>
 80059e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059e8:	429a      	cmp	r2, r3
 80059ea:	db3b      	blt.n	8005a64 <_printf_float+0x38c>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	07da      	lsls	r2, r3, #31
 80059f0:	d438      	bmi.n	8005a64 <_printf_float+0x38c>
 80059f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059f6:	eba3 020a 	sub.w	r2, r3, sl
 80059fa:	eba3 0901 	sub.w	r9, r3, r1
 80059fe:	4591      	cmp	r9, r2
 8005a00:	bfa8      	it	ge
 8005a02:	4691      	movge	r9, r2
 8005a04:	f1b9 0f00 	cmp.w	r9, #0
 8005a08:	dc34      	bgt.n	8005a74 <_printf_float+0x39c>
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a12:	f104 0a1a 	add.w	sl, r4, #26
 8005a16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	eba3 0309 	sub.w	r3, r3, r9
 8005a20:	4543      	cmp	r3, r8
 8005a22:	f77f af7a 	ble.w	800591a <_printf_float+0x242>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4652      	mov	r2, sl
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b8      	blx	r7
 8005a30:	3001      	adds	r0, #1
 8005a32:	f43f aeac 	beq.w	800578e <_printf_float+0xb6>
 8005a36:	f108 0801 	add.w	r8, r8, #1
 8005a3a:	e7ec      	b.n	8005a16 <_printf_float+0x33e>
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4642      	mov	r2, r8
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	d1c0      	bne.n	80059cc <_printf_float+0x2f4>
 8005a4a:	e6a0      	b.n	800578e <_printf_float+0xb6>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a54:	47b8      	blx	r7
 8005a56:	3001      	adds	r0, #1
 8005a58:	f43f ae99 	beq.w	800578e <_printf_float+0xb6>
 8005a5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a5e:	f10b 0b01 	add.w	fp, fp, #1
 8005a62:	e7b9      	b.n	80059d8 <_printf_float+0x300>
 8005a64:	4631      	mov	r1, r6
 8005a66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d1bf      	bne.n	80059f2 <_printf_float+0x31a>
 8005a72:	e68c      	b.n	800578e <_printf_float+0xb6>
 8005a74:	464b      	mov	r3, r9
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	eb08 020a 	add.w	r2, r8, sl
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	d1c2      	bne.n	8005a0a <_printf_float+0x332>
 8005a84:	e683      	b.n	800578e <_printf_float+0xb6>
 8005a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a88:	2a01      	cmp	r2, #1
 8005a8a:	dc01      	bgt.n	8005a90 <_printf_float+0x3b8>
 8005a8c:	07db      	lsls	r3, r3, #31
 8005a8e:	d537      	bpl.n	8005b00 <_printf_float+0x428>
 8005a90:	2301      	movs	r3, #1
 8005a92:	4642      	mov	r2, r8
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f ae77 	beq.w	800578e <_printf_float+0xb6>
 8005aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	47b8      	blx	r7
 8005aaa:	3001      	adds	r0, #1
 8005aac:	f43f ae6f 	beq.w	800578e <_printf_float+0xb6>
 8005ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f7fb f82a 	bl	8000b10 <__aeabi_dcmpeq>
 8005abc:	b9d8      	cbnz	r0, 8005af6 <_printf_float+0x41e>
 8005abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac0:	f108 0201 	add.w	r2, r8, #1
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	d10e      	bne.n	8005aee <_printf_float+0x416>
 8005ad0:	e65d      	b.n	800578e <_printf_float+0xb6>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	464a      	mov	r2, r9
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f ae56 	beq.w	800578e <_printf_float+0xb6>
 8005ae2:	f108 0801 	add.w	r8, r8, #1
 8005ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4543      	cmp	r3, r8
 8005aec:	dcf1      	bgt.n	8005ad2 <_printf_float+0x3fa>
 8005aee:	4653      	mov	r3, sl
 8005af0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005af4:	e6e0      	b.n	80058b8 <_printf_float+0x1e0>
 8005af6:	f04f 0800 	mov.w	r8, #0
 8005afa:	f104 091a 	add.w	r9, r4, #26
 8005afe:	e7f2      	b.n	8005ae6 <_printf_float+0x40e>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4642      	mov	r2, r8
 8005b04:	e7df      	b.n	8005ac6 <_printf_float+0x3ee>
 8005b06:	2301      	movs	r3, #1
 8005b08:	464a      	mov	r2, r9
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	f43f ae3c 	beq.w	800578e <_printf_float+0xb6>
 8005b16:	f108 0801 	add.w	r8, r8, #1
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b1e:	1a5b      	subs	r3, r3, r1
 8005b20:	4543      	cmp	r3, r8
 8005b22:	dcf0      	bgt.n	8005b06 <_printf_float+0x42e>
 8005b24:	e6fd      	b.n	8005922 <_printf_float+0x24a>
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	f104 0919 	add.w	r9, r4, #25
 8005b2e:	e7f4      	b.n	8005b1a <_printf_float+0x442>

08005b30 <_printf_common>:
 8005b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b34:	4616      	mov	r6, r2
 8005b36:	4699      	mov	r9, r3
 8005b38:	688a      	ldr	r2, [r1, #8]
 8005b3a:	690b      	ldr	r3, [r1, #16]
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	bfb8      	it	lt
 8005b42:	4613      	movlt	r3, r2
 8005b44:	6033      	str	r3, [r6, #0]
 8005b46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b50:	b10a      	cbz	r2, 8005b56 <_printf_common+0x26>
 8005b52:	3301      	adds	r3, #1
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	0699      	lsls	r1, r3, #26
 8005b5a:	bf42      	ittt	mi
 8005b5c:	6833      	ldrmi	r3, [r6, #0]
 8005b5e:	3302      	addmi	r3, #2
 8005b60:	6033      	strmi	r3, [r6, #0]
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	f015 0506 	ands.w	r5, r5, #6
 8005b68:	d106      	bne.n	8005b78 <_printf_common+0x48>
 8005b6a:	f104 0a19 	add.w	sl, r4, #25
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	6832      	ldr	r2, [r6, #0]
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dc28      	bgt.n	8005bca <_printf_common+0x9a>
 8005b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b7c:	1e13      	subs	r3, r2, #0
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	bf18      	it	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	0692      	lsls	r2, r2, #26
 8005b86:	d42d      	bmi.n	8005be4 <_printf_common+0xb4>
 8005b88:	4649      	mov	r1, r9
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d020      	beq.n	8005bd8 <_printf_common+0xa8>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	68e5      	ldr	r5, [r4, #12]
 8005b9a:	f003 0306 	and.w	r3, r3, #6
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	bf18      	it	ne
 8005ba2:	2500      	movne	r5, #0
 8005ba4:	6832      	ldr	r2, [r6, #0]
 8005ba6:	f04f 0600 	mov.w	r6, #0
 8005baa:	68a3      	ldr	r3, [r4, #8]
 8005bac:	bf08      	it	eq
 8005bae:	1aad      	subeq	r5, r5, r2
 8005bb0:	6922      	ldr	r2, [r4, #16]
 8005bb2:	bf08      	it	eq
 8005bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bfc4      	itt	gt
 8005bbc:	1a9b      	subgt	r3, r3, r2
 8005bbe:	18ed      	addgt	r5, r5, r3
 8005bc0:	341a      	adds	r4, #26
 8005bc2:	42b5      	cmp	r5, r6
 8005bc4:	d11a      	bne.n	8005bfc <_printf_common+0xcc>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e008      	b.n	8005bdc <_printf_common+0xac>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	47c0      	blx	r8
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d103      	bne.n	8005be0 <_printf_common+0xb0>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be0:	3501      	adds	r5, #1
 8005be2:	e7c4      	b.n	8005b6e <_printf_common+0x3e>
 8005be4:	2030      	movs	r0, #48	; 0x30
 8005be6:	18e1      	adds	r1, r4, r3
 8005be8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf2:	4422      	add	r2, r4
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bfa:	e7c5      	b.n	8005b88 <_printf_common+0x58>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4622      	mov	r2, r4
 8005c00:	4649      	mov	r1, r9
 8005c02:	4638      	mov	r0, r7
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d0e6      	beq.n	8005bd8 <_printf_common+0xa8>
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7d9      	b.n	8005bc2 <_printf_common+0x92>
	...

08005c10 <_printf_i>:
 8005c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	7e0f      	ldrb	r7, [r1, #24]
 8005c16:	4691      	mov	r9, r2
 8005c18:	2f78      	cmp	r7, #120	; 0x78
 8005c1a:	4680      	mov	r8, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	469a      	mov	sl, r3
 8005c20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c26:	d807      	bhi.n	8005c38 <_printf_i+0x28>
 8005c28:	2f62      	cmp	r7, #98	; 0x62
 8005c2a:	d80a      	bhi.n	8005c42 <_printf_i+0x32>
 8005c2c:	2f00      	cmp	r7, #0
 8005c2e:	f000 80d9 	beq.w	8005de4 <_printf_i+0x1d4>
 8005c32:	2f58      	cmp	r7, #88	; 0x58
 8005c34:	f000 80a4 	beq.w	8005d80 <_printf_i+0x170>
 8005c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c40:	e03a      	b.n	8005cb8 <_printf_i+0xa8>
 8005c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c46:	2b15      	cmp	r3, #21
 8005c48:	d8f6      	bhi.n	8005c38 <_printf_i+0x28>
 8005c4a:	a101      	add	r1, pc, #4	; (adr r1, 8005c50 <_printf_i+0x40>)
 8005c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c50:	08005ca9 	.word	0x08005ca9
 8005c54:	08005cbd 	.word	0x08005cbd
 8005c58:	08005c39 	.word	0x08005c39
 8005c5c:	08005c39 	.word	0x08005c39
 8005c60:	08005c39 	.word	0x08005c39
 8005c64:	08005c39 	.word	0x08005c39
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005c39 	.word	0x08005c39
 8005c70:	08005c39 	.word	0x08005c39
 8005c74:	08005c39 	.word	0x08005c39
 8005c78:	08005c39 	.word	0x08005c39
 8005c7c:	08005dcb 	.word	0x08005dcb
 8005c80:	08005ced 	.word	0x08005ced
 8005c84:	08005dad 	.word	0x08005dad
 8005c88:	08005c39 	.word	0x08005c39
 8005c8c:	08005c39 	.word	0x08005c39
 8005c90:	08005ded 	.word	0x08005ded
 8005c94:	08005c39 	.word	0x08005c39
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005c39 	.word	0x08005c39
 8005ca0:	08005c39 	.word	0x08005c39
 8005ca4:	08005db5 	.word	0x08005db5
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	602a      	str	r2, [r5, #0]
 8005cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0a4      	b.n	8005e06 <_printf_i+0x1f6>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	6829      	ldr	r1, [r5, #0]
 8005cc0:	0606      	lsls	r6, r0, #24
 8005cc2:	f101 0304 	add.w	r3, r1, #4
 8005cc6:	d50a      	bpl.n	8005cde <_printf_i+0xce>
 8005cc8:	680e      	ldr	r6, [r1, #0]
 8005cca:	602b      	str	r3, [r5, #0]
 8005ccc:	2e00      	cmp	r6, #0
 8005cce:	da03      	bge.n	8005cd8 <_printf_i+0xc8>
 8005cd0:	232d      	movs	r3, #45	; 0x2d
 8005cd2:	4276      	negs	r6, r6
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	230a      	movs	r3, #10
 8005cda:	485e      	ldr	r0, [pc, #376]	; (8005e54 <_printf_i+0x244>)
 8005cdc:	e019      	b.n	8005d12 <_printf_i+0x102>
 8005cde:	680e      	ldr	r6, [r1, #0]
 8005ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ce4:	602b      	str	r3, [r5, #0]
 8005ce6:	bf18      	it	ne
 8005ce8:	b236      	sxthne	r6, r6
 8005cea:	e7ef      	b.n	8005ccc <_printf_i+0xbc>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	1d19      	adds	r1, r3, #4
 8005cf2:	6029      	str	r1, [r5, #0]
 8005cf4:	0601      	lsls	r1, r0, #24
 8005cf6:	d501      	bpl.n	8005cfc <_printf_i+0xec>
 8005cf8:	681e      	ldr	r6, [r3, #0]
 8005cfa:	e002      	b.n	8005d02 <_printf_i+0xf2>
 8005cfc:	0646      	lsls	r6, r0, #25
 8005cfe:	d5fb      	bpl.n	8005cf8 <_printf_i+0xe8>
 8005d00:	881e      	ldrh	r6, [r3, #0]
 8005d02:	2f6f      	cmp	r7, #111	; 0x6f
 8005d04:	bf0c      	ite	eq
 8005d06:	2308      	moveq	r3, #8
 8005d08:	230a      	movne	r3, #10
 8005d0a:	4852      	ldr	r0, [pc, #328]	; (8005e54 <_printf_i+0x244>)
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d12:	6865      	ldr	r5, [r4, #4]
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	bfa8      	it	ge
 8005d18:	6821      	ldrge	r1, [r4, #0]
 8005d1a:	60a5      	str	r5, [r4, #8]
 8005d1c:	bfa4      	itt	ge
 8005d1e:	f021 0104 	bicge.w	r1, r1, #4
 8005d22:	6021      	strge	r1, [r4, #0]
 8005d24:	b90e      	cbnz	r6, 8005d2a <_printf_i+0x11a>
 8005d26:	2d00      	cmp	r5, #0
 8005d28:	d04d      	beq.n	8005dc6 <_printf_i+0x1b6>
 8005d2a:	4615      	mov	r5, r2
 8005d2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d30:	fb03 6711 	mls	r7, r3, r1, r6
 8005d34:	5dc7      	ldrb	r7, [r0, r7]
 8005d36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d3a:	4637      	mov	r7, r6
 8005d3c:	42bb      	cmp	r3, r7
 8005d3e:	460e      	mov	r6, r1
 8005d40:	d9f4      	bls.n	8005d2c <_printf_i+0x11c>
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d10b      	bne.n	8005d5e <_printf_i+0x14e>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	07de      	lsls	r6, r3, #31
 8005d4a:	d508      	bpl.n	8005d5e <_printf_i+0x14e>
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	6861      	ldr	r1, [r4, #4]
 8005d50:	4299      	cmp	r1, r3
 8005d52:	bfde      	ittt	le
 8005d54:	2330      	movle	r3, #48	; 0x30
 8005d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d5e:	1b52      	subs	r2, r2, r5
 8005d60:	6122      	str	r2, [r4, #16]
 8005d62:	464b      	mov	r3, r9
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f8cd a000 	str.w	sl, [sp]
 8005d6c:	aa03      	add	r2, sp, #12
 8005d6e:	f7ff fedf 	bl	8005b30 <_printf_common>
 8005d72:	3001      	adds	r0, #1
 8005d74:	d14c      	bne.n	8005e10 <_printf_i+0x200>
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d7a:	b004      	add	sp, #16
 8005d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d80:	4834      	ldr	r0, [pc, #208]	; (8005e54 <_printf_i+0x244>)
 8005d82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d86:	6829      	ldr	r1, [r5, #0]
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d8e:	6029      	str	r1, [r5, #0]
 8005d90:	061d      	lsls	r5, r3, #24
 8005d92:	d514      	bpl.n	8005dbe <_printf_i+0x1ae>
 8005d94:	07df      	lsls	r7, r3, #31
 8005d96:	bf44      	itt	mi
 8005d98:	f043 0320 	orrmi.w	r3, r3, #32
 8005d9c:	6023      	strmi	r3, [r4, #0]
 8005d9e:	b91e      	cbnz	r6, 8005da8 <_printf_i+0x198>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	f023 0320 	bic.w	r3, r3, #32
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	2310      	movs	r3, #16
 8005daa:	e7af      	b.n	8005d0c <_printf_i+0xfc>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	f043 0320 	orr.w	r3, r3, #32
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	2378      	movs	r3, #120	; 0x78
 8005db6:	4828      	ldr	r0, [pc, #160]	; (8005e58 <_printf_i+0x248>)
 8005db8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dbc:	e7e3      	b.n	8005d86 <_printf_i+0x176>
 8005dbe:	0659      	lsls	r1, r3, #25
 8005dc0:	bf48      	it	mi
 8005dc2:	b2b6      	uxthmi	r6, r6
 8005dc4:	e7e6      	b.n	8005d94 <_printf_i+0x184>
 8005dc6:	4615      	mov	r5, r2
 8005dc8:	e7bb      	b.n	8005d42 <_printf_i+0x132>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	6826      	ldr	r6, [r4, #0]
 8005dce:	1d18      	adds	r0, r3, #4
 8005dd0:	6961      	ldr	r1, [r4, #20]
 8005dd2:	6028      	str	r0, [r5, #0]
 8005dd4:	0635      	lsls	r5, r6, #24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	d501      	bpl.n	8005dde <_printf_i+0x1ce>
 8005dda:	6019      	str	r1, [r3, #0]
 8005ddc:	e002      	b.n	8005de4 <_printf_i+0x1d4>
 8005dde:	0670      	lsls	r0, r6, #25
 8005de0:	d5fb      	bpl.n	8005dda <_printf_i+0x1ca>
 8005de2:	8019      	strh	r1, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	4615      	mov	r5, r2
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	e7ba      	b.n	8005d62 <_printf_i+0x152>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	2100      	movs	r1, #0
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	602a      	str	r2, [r5, #0]
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f002 faef 	bl	80083dc <memchr>
 8005dfe:	b108      	cbz	r0, 8005e04 <_printf_i+0x1f4>
 8005e00:	1b40      	subs	r0, r0, r5
 8005e02:	6060      	str	r0, [r4, #4]
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0e:	e7a8      	b.n	8005d62 <_printf_i+0x152>
 8005e10:	462a      	mov	r2, r5
 8005e12:	4649      	mov	r1, r9
 8005e14:	4640      	mov	r0, r8
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	47d0      	blx	sl
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d0ab      	beq.n	8005d76 <_printf_i+0x166>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	079b      	lsls	r3, r3, #30
 8005e22:	d413      	bmi.n	8005e4c <_printf_i+0x23c>
 8005e24:	68e0      	ldr	r0, [r4, #12]
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	bfb8      	it	lt
 8005e2c:	4618      	movlt	r0, r3
 8005e2e:	e7a4      	b.n	8005d7a <_printf_i+0x16a>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4632      	mov	r2, r6
 8005e34:	4649      	mov	r1, r9
 8005e36:	4640      	mov	r0, r8
 8005e38:	47d0      	blx	sl
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d09b      	beq.n	8005d76 <_printf_i+0x166>
 8005e3e:	3501      	adds	r5, #1
 8005e40:	68e3      	ldr	r3, [r4, #12]
 8005e42:	9903      	ldr	r1, [sp, #12]
 8005e44:	1a5b      	subs	r3, r3, r1
 8005e46:	42ab      	cmp	r3, r5
 8005e48:	dcf2      	bgt.n	8005e30 <_printf_i+0x220>
 8005e4a:	e7eb      	b.n	8005e24 <_printf_i+0x214>
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	f104 0619 	add.w	r6, r4, #25
 8005e52:	e7f5      	b.n	8005e40 <_printf_i+0x230>
 8005e54:	08009e9e 	.word	0x08009e9e
 8005e58:	08009eaf 	.word	0x08009eaf

08005e5c <_scanf_float>:
 8005e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e60:	b087      	sub	sp, #28
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	688b      	ldr	r3, [r1, #8]
 8005e66:	4617      	mov	r7, r2
 8005e68:	1e5a      	subs	r2, r3, #1
 8005e6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e6e:	bf85      	ittet	hi
 8005e70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e74:	195b      	addhi	r3, r3, r5
 8005e76:	2300      	movls	r3, #0
 8005e78:	9302      	strhi	r3, [sp, #8]
 8005e7a:	bf88      	it	hi
 8005e7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e80:	468b      	mov	fp, r1
 8005e82:	f04f 0500 	mov.w	r5, #0
 8005e86:	bf8c      	ite	hi
 8005e88:	608b      	strhi	r3, [r1, #8]
 8005e8a:	9302      	strls	r3, [sp, #8]
 8005e8c:	680b      	ldr	r3, [r1, #0]
 8005e8e:	4680      	mov	r8, r0
 8005e90:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005e94:	f84b 3b1c 	str.w	r3, [fp], #28
 8005e98:	460c      	mov	r4, r1
 8005e9a:	465e      	mov	r6, fp
 8005e9c:	46aa      	mov	sl, r5
 8005e9e:	46a9      	mov	r9, r5
 8005ea0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ea4:	9501      	str	r5, [sp, #4]
 8005ea6:	68a2      	ldr	r2, [r4, #8]
 8005ea8:	b152      	cbz	r2, 8005ec0 <_scanf_float+0x64>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b4e      	cmp	r3, #78	; 0x4e
 8005eb0:	d864      	bhi.n	8005f7c <_scanf_float+0x120>
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d83c      	bhi.n	8005f30 <_scanf_float+0xd4>
 8005eb6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005eba:	b2c8      	uxtb	r0, r1
 8005ebc:	280e      	cmp	r0, #14
 8005ebe:	d93a      	bls.n	8005f36 <_scanf_float+0xda>
 8005ec0:	f1b9 0f00 	cmp.w	r9, #0
 8005ec4:	d003      	beq.n	8005ece <_scanf_float+0x72>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ed2:	f1ba 0f01 	cmp.w	sl, #1
 8005ed6:	f200 8113 	bhi.w	8006100 <_scanf_float+0x2a4>
 8005eda:	455e      	cmp	r6, fp
 8005edc:	f200 8105 	bhi.w	80060ea <_scanf_float+0x28e>
 8005ee0:	2501      	movs	r5, #1
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	b007      	add	sp, #28
 8005ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005eee:	2a0d      	cmp	r2, #13
 8005ef0:	d8e6      	bhi.n	8005ec0 <_scanf_float+0x64>
 8005ef2:	a101      	add	r1, pc, #4	; (adr r1, 8005ef8 <_scanf_float+0x9c>)
 8005ef4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ef8:	08006037 	.word	0x08006037
 8005efc:	08005ec1 	.word	0x08005ec1
 8005f00:	08005ec1 	.word	0x08005ec1
 8005f04:	08005ec1 	.word	0x08005ec1
 8005f08:	08006097 	.word	0x08006097
 8005f0c:	0800606f 	.word	0x0800606f
 8005f10:	08005ec1 	.word	0x08005ec1
 8005f14:	08005ec1 	.word	0x08005ec1
 8005f18:	08006045 	.word	0x08006045
 8005f1c:	08005ec1 	.word	0x08005ec1
 8005f20:	08005ec1 	.word	0x08005ec1
 8005f24:	08005ec1 	.word	0x08005ec1
 8005f28:	08005ec1 	.word	0x08005ec1
 8005f2c:	08005ffd 	.word	0x08005ffd
 8005f30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005f34:	e7db      	b.n	8005eee <_scanf_float+0x92>
 8005f36:	290e      	cmp	r1, #14
 8005f38:	d8c2      	bhi.n	8005ec0 <_scanf_float+0x64>
 8005f3a:	a001      	add	r0, pc, #4	; (adr r0, 8005f40 <_scanf_float+0xe4>)
 8005f3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f40:	08005fef 	.word	0x08005fef
 8005f44:	08005ec1 	.word	0x08005ec1
 8005f48:	08005fef 	.word	0x08005fef
 8005f4c:	08006083 	.word	0x08006083
 8005f50:	08005ec1 	.word	0x08005ec1
 8005f54:	08005f9d 	.word	0x08005f9d
 8005f58:	08005fd9 	.word	0x08005fd9
 8005f5c:	08005fd9 	.word	0x08005fd9
 8005f60:	08005fd9 	.word	0x08005fd9
 8005f64:	08005fd9 	.word	0x08005fd9
 8005f68:	08005fd9 	.word	0x08005fd9
 8005f6c:	08005fd9 	.word	0x08005fd9
 8005f70:	08005fd9 	.word	0x08005fd9
 8005f74:	08005fd9 	.word	0x08005fd9
 8005f78:	08005fd9 	.word	0x08005fd9
 8005f7c:	2b6e      	cmp	r3, #110	; 0x6e
 8005f7e:	d809      	bhi.n	8005f94 <_scanf_float+0x138>
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d8b2      	bhi.n	8005eea <_scanf_float+0x8e>
 8005f84:	2b54      	cmp	r3, #84	; 0x54
 8005f86:	d077      	beq.n	8006078 <_scanf_float+0x21c>
 8005f88:	2b59      	cmp	r3, #89	; 0x59
 8005f8a:	d199      	bne.n	8005ec0 <_scanf_float+0x64>
 8005f8c:	2d07      	cmp	r5, #7
 8005f8e:	d197      	bne.n	8005ec0 <_scanf_float+0x64>
 8005f90:	2508      	movs	r5, #8
 8005f92:	e029      	b.n	8005fe8 <_scanf_float+0x18c>
 8005f94:	2b74      	cmp	r3, #116	; 0x74
 8005f96:	d06f      	beq.n	8006078 <_scanf_float+0x21c>
 8005f98:	2b79      	cmp	r3, #121	; 0x79
 8005f9a:	e7f6      	b.n	8005f8a <_scanf_float+0x12e>
 8005f9c:	6821      	ldr	r1, [r4, #0]
 8005f9e:	05c8      	lsls	r0, r1, #23
 8005fa0:	d51a      	bpl.n	8005fd8 <_scanf_float+0x17c>
 8005fa2:	9b02      	ldr	r3, [sp, #8]
 8005fa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005fa8:	6021      	str	r1, [r4, #0]
 8005faa:	f109 0901 	add.w	r9, r9, #1
 8005fae:	b11b      	cbz	r3, 8005fb8 <_scanf_float+0x15c>
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	3201      	adds	r2, #1
 8005fb4:	9302      	str	r3, [sp, #8]
 8005fb6:	60a2      	str	r2, [r4, #8]
 8005fb8:	68a3      	ldr	r3, [r4, #8]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	60a3      	str	r3, [r4, #8]
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	f340 8084 	ble.w	80060d8 <_scanf_float+0x27c>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	603b      	str	r3, [r7, #0]
 8005fd6:	e766      	b.n	8005ea6 <_scanf_float+0x4a>
 8005fd8:	eb1a 0f05 	cmn.w	sl, r5
 8005fdc:	f47f af70 	bne.w	8005ec0 <_scanf_float+0x64>
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005fe6:	6022      	str	r2, [r4, #0]
 8005fe8:	f806 3b01 	strb.w	r3, [r6], #1
 8005fec:	e7e4      	b.n	8005fb8 <_scanf_float+0x15c>
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	0610      	lsls	r0, r2, #24
 8005ff2:	f57f af65 	bpl.w	8005ec0 <_scanf_float+0x64>
 8005ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ffa:	e7f4      	b.n	8005fe6 <_scanf_float+0x18a>
 8005ffc:	f1ba 0f00 	cmp.w	sl, #0
 8006000:	d10e      	bne.n	8006020 <_scanf_float+0x1c4>
 8006002:	f1b9 0f00 	cmp.w	r9, #0
 8006006:	d10e      	bne.n	8006026 <_scanf_float+0x1ca>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800600e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006012:	d108      	bne.n	8006026 <_scanf_float+0x1ca>
 8006014:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006018:	f04f 0a01 	mov.w	sl, #1
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	e7e3      	b.n	8005fe8 <_scanf_float+0x18c>
 8006020:	f1ba 0f02 	cmp.w	sl, #2
 8006024:	d055      	beq.n	80060d2 <_scanf_float+0x276>
 8006026:	2d01      	cmp	r5, #1
 8006028:	d002      	beq.n	8006030 <_scanf_float+0x1d4>
 800602a:	2d04      	cmp	r5, #4
 800602c:	f47f af48 	bne.w	8005ec0 <_scanf_float+0x64>
 8006030:	3501      	adds	r5, #1
 8006032:	b2ed      	uxtb	r5, r5
 8006034:	e7d8      	b.n	8005fe8 <_scanf_float+0x18c>
 8006036:	f1ba 0f01 	cmp.w	sl, #1
 800603a:	f47f af41 	bne.w	8005ec0 <_scanf_float+0x64>
 800603e:	f04f 0a02 	mov.w	sl, #2
 8006042:	e7d1      	b.n	8005fe8 <_scanf_float+0x18c>
 8006044:	b97d      	cbnz	r5, 8006066 <_scanf_float+0x20a>
 8006046:	f1b9 0f00 	cmp.w	r9, #0
 800604a:	f47f af3c 	bne.w	8005ec6 <_scanf_float+0x6a>
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006054:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006058:	f47f af39 	bne.w	8005ece <_scanf_float+0x72>
 800605c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006060:	2501      	movs	r5, #1
 8006062:	6022      	str	r2, [r4, #0]
 8006064:	e7c0      	b.n	8005fe8 <_scanf_float+0x18c>
 8006066:	2d03      	cmp	r5, #3
 8006068:	d0e2      	beq.n	8006030 <_scanf_float+0x1d4>
 800606a:	2d05      	cmp	r5, #5
 800606c:	e7de      	b.n	800602c <_scanf_float+0x1d0>
 800606e:	2d02      	cmp	r5, #2
 8006070:	f47f af26 	bne.w	8005ec0 <_scanf_float+0x64>
 8006074:	2503      	movs	r5, #3
 8006076:	e7b7      	b.n	8005fe8 <_scanf_float+0x18c>
 8006078:	2d06      	cmp	r5, #6
 800607a:	f47f af21 	bne.w	8005ec0 <_scanf_float+0x64>
 800607e:	2507      	movs	r5, #7
 8006080:	e7b2      	b.n	8005fe8 <_scanf_float+0x18c>
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	0591      	lsls	r1, r2, #22
 8006086:	f57f af1b 	bpl.w	8005ec0 <_scanf_float+0x64>
 800608a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800608e:	6022      	str	r2, [r4, #0]
 8006090:	f8cd 9004 	str.w	r9, [sp, #4]
 8006094:	e7a8      	b.n	8005fe8 <_scanf_float+0x18c>
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800609c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80060a0:	d006      	beq.n	80060b0 <_scanf_float+0x254>
 80060a2:	0550      	lsls	r0, r2, #21
 80060a4:	f57f af0c 	bpl.w	8005ec0 <_scanf_float+0x64>
 80060a8:	f1b9 0f00 	cmp.w	r9, #0
 80060ac:	f43f af0f 	beq.w	8005ece <_scanf_float+0x72>
 80060b0:	0591      	lsls	r1, r2, #22
 80060b2:	bf58      	it	pl
 80060b4:	9901      	ldrpl	r1, [sp, #4]
 80060b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060ba:	bf58      	it	pl
 80060bc:	eba9 0101 	subpl.w	r1, r9, r1
 80060c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80060c4:	f04f 0900 	mov.w	r9, #0
 80060c8:	bf58      	it	pl
 80060ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060ce:	6022      	str	r2, [r4, #0]
 80060d0:	e78a      	b.n	8005fe8 <_scanf_float+0x18c>
 80060d2:	f04f 0a03 	mov.w	sl, #3
 80060d6:	e787      	b.n	8005fe8 <_scanf_float+0x18c>
 80060d8:	4639      	mov	r1, r7
 80060da:	4640      	mov	r0, r8
 80060dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060e0:	4798      	blx	r3
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f43f aedf 	beq.w	8005ea6 <_scanf_float+0x4a>
 80060e8:	e6ea      	b.n	8005ec0 <_scanf_float+0x64>
 80060ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060ee:	463a      	mov	r2, r7
 80060f0:	4640      	mov	r0, r8
 80060f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060f6:	4798      	blx	r3
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	e6ec      	b.n	8005eda <_scanf_float+0x7e>
 8006100:	1e6b      	subs	r3, r5, #1
 8006102:	2b06      	cmp	r3, #6
 8006104:	d825      	bhi.n	8006152 <_scanf_float+0x2f6>
 8006106:	2d02      	cmp	r5, #2
 8006108:	d836      	bhi.n	8006178 <_scanf_float+0x31c>
 800610a:	455e      	cmp	r6, fp
 800610c:	f67f aee8 	bls.w	8005ee0 <_scanf_float+0x84>
 8006110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006114:	463a      	mov	r2, r7
 8006116:	4640      	mov	r0, r8
 8006118:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800611c:	4798      	blx	r3
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	3b01      	subs	r3, #1
 8006122:	6123      	str	r3, [r4, #16]
 8006124:	e7f1      	b.n	800610a <_scanf_float+0x2ae>
 8006126:	9802      	ldr	r0, [sp, #8]
 8006128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800612c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006130:	463a      	mov	r2, r7
 8006132:	9002      	str	r0, [sp, #8]
 8006134:	4640      	mov	r0, r8
 8006136:	4798      	blx	r3
 8006138:	6923      	ldr	r3, [r4, #16]
 800613a:	3b01      	subs	r3, #1
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006142:	fa5f fa8a 	uxtb.w	sl, sl
 8006146:	f1ba 0f02 	cmp.w	sl, #2
 800614a:	d1ec      	bne.n	8006126 <_scanf_float+0x2ca>
 800614c:	3d03      	subs	r5, #3
 800614e:	b2ed      	uxtb	r5, r5
 8006150:	1b76      	subs	r6, r6, r5
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	05da      	lsls	r2, r3, #23
 8006156:	d52f      	bpl.n	80061b8 <_scanf_float+0x35c>
 8006158:	055b      	lsls	r3, r3, #21
 800615a:	d510      	bpl.n	800617e <_scanf_float+0x322>
 800615c:	455e      	cmp	r6, fp
 800615e:	f67f aebf 	bls.w	8005ee0 <_scanf_float+0x84>
 8006162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006166:	463a      	mov	r2, r7
 8006168:	4640      	mov	r0, r8
 800616a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800616e:	4798      	blx	r3
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	3b01      	subs	r3, #1
 8006174:	6123      	str	r3, [r4, #16]
 8006176:	e7f1      	b.n	800615c <_scanf_float+0x300>
 8006178:	46aa      	mov	sl, r5
 800617a:	9602      	str	r6, [sp, #8]
 800617c:	e7df      	b.n	800613e <_scanf_float+0x2e2>
 800617e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	2965      	cmp	r1, #101	; 0x65
 8006186:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800618a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	d00c      	beq.n	80061ac <_scanf_float+0x350>
 8006192:	2945      	cmp	r1, #69	; 0x45
 8006194:	d00a      	beq.n	80061ac <_scanf_float+0x350>
 8006196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800619a:	463a      	mov	r2, r7
 800619c:	4640      	mov	r0, r8
 800619e:	4798      	blx	r3
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	1eb5      	subs	r5, r6, #2
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	463a      	mov	r2, r7
 80061ae:	4640      	mov	r0, r8
 80061b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061b4:	4798      	blx	r3
 80061b6:	462e      	mov	r6, r5
 80061b8:	6825      	ldr	r5, [r4, #0]
 80061ba:	f015 0510 	ands.w	r5, r5, #16
 80061be:	d155      	bne.n	800626c <_scanf_float+0x410>
 80061c0:	7035      	strb	r5, [r6, #0]
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d11b      	bne.n	8006206 <_scanf_float+0x3aa>
 80061ce:	9b01      	ldr	r3, [sp, #4]
 80061d0:	454b      	cmp	r3, r9
 80061d2:	eba3 0209 	sub.w	r2, r3, r9
 80061d6:	d123      	bne.n	8006220 <_scanf_float+0x3c4>
 80061d8:	2200      	movs	r2, #0
 80061da:	4659      	mov	r1, fp
 80061dc:	4640      	mov	r0, r8
 80061de:	f000 fe7b 	bl	8006ed8 <_strtod_r>
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	f012 0f02 	tst.w	r2, #2
 80061ea:	4606      	mov	r6, r0
 80061ec:	460f      	mov	r7, r1
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	d021      	beq.n	8006236 <_scanf_float+0x3da>
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	9903      	ldr	r1, [sp, #12]
 80061f6:	600a      	str	r2, [r1, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	e9c3 6700 	strd	r6, r7, [r3]
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60e3      	str	r3, [r4, #12]
 8006204:	e66d      	b.n	8005ee2 <_scanf_float+0x86>
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0e5      	beq.n	80061d8 <_scanf_float+0x37c>
 800620c:	9905      	ldr	r1, [sp, #20]
 800620e:	230a      	movs	r3, #10
 8006210:	462a      	mov	r2, r5
 8006212:	4640      	mov	r0, r8
 8006214:	3101      	adds	r1, #1
 8006216:	f000 fee1 	bl	8006fdc <_strtol_r>
 800621a:	9b04      	ldr	r3, [sp, #16]
 800621c:	9e05      	ldr	r6, [sp, #20]
 800621e:	1ac2      	subs	r2, r0, r3
 8006220:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006224:	429e      	cmp	r6, r3
 8006226:	bf28      	it	cs
 8006228:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800622c:	4630      	mov	r0, r6
 800622e:	4910      	ldr	r1, [pc, #64]	; (8006270 <_scanf_float+0x414>)
 8006230:	f000 f826 	bl	8006280 <siprintf>
 8006234:	e7d0      	b.n	80061d8 <_scanf_float+0x37c>
 8006236:	f012 0f04 	tst.w	r2, #4
 800623a:	f103 0204 	add.w	r2, r3, #4
 800623e:	d1d9      	bne.n	80061f4 <_scanf_float+0x398>
 8006240:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006244:	f8cc 2000 	str.w	r2, [ip]
 8006248:	f8d3 8000 	ldr.w	r8, [r3]
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	f7fa fc90 	bl	8000b74 <__aeabi_dcmpun>
 8006254:	b128      	cbz	r0, 8006262 <_scanf_float+0x406>
 8006256:	4807      	ldr	r0, [pc, #28]	; (8006274 <_scanf_float+0x418>)
 8006258:	f000 f80e 	bl	8006278 <nanf>
 800625c:	f8c8 0000 	str.w	r0, [r8]
 8006260:	e7cd      	b.n	80061fe <_scanf_float+0x3a2>
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa fce3 	bl	8000c30 <__aeabi_d2f>
 800626a:	e7f7      	b.n	800625c <_scanf_float+0x400>
 800626c:	2500      	movs	r5, #0
 800626e:	e638      	b.n	8005ee2 <_scanf_float+0x86>
 8006270:	08009ec0 	.word	0x08009ec0
 8006274:	0800a2c8 	.word	0x0800a2c8

08006278 <nanf>:
 8006278:	4800      	ldr	r0, [pc, #0]	; (800627c <nanf+0x4>)
 800627a:	4770      	bx	lr
 800627c:	7fc00000 	.word	0x7fc00000

08006280 <siprintf>:
 8006280:	b40e      	push	{r1, r2, r3}
 8006282:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006286:	b500      	push	{lr}
 8006288:	b09c      	sub	sp, #112	; 0x70
 800628a:	ab1d      	add	r3, sp, #116	; 0x74
 800628c:	9002      	str	r0, [sp, #8]
 800628e:	9006      	str	r0, [sp, #24]
 8006290:	9107      	str	r1, [sp, #28]
 8006292:	9104      	str	r1, [sp, #16]
 8006294:	4808      	ldr	r0, [pc, #32]	; (80062b8 <siprintf+0x38>)
 8006296:	4909      	ldr	r1, [pc, #36]	; (80062bc <siprintf+0x3c>)
 8006298:	f853 2b04 	ldr.w	r2, [r3], #4
 800629c:	9105      	str	r1, [sp, #20]
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	a902      	add	r1, sp, #8
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	f002 feba 	bl	800901c <_svfiprintf_r>
 80062a8:	2200      	movs	r2, #0
 80062aa:	9b02      	ldr	r3, [sp, #8]
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	b01c      	add	sp, #112	; 0x70
 80062b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062b4:	b003      	add	sp, #12
 80062b6:	4770      	bx	lr
 80062b8:	20000010 	.word	0x20000010
 80062bc:	ffff0208 	.word	0xffff0208

080062c0 <sulp>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	460f      	mov	r7, r1
 80062c6:	4690      	mov	r8, r2
 80062c8:	f002 fc14 	bl	8008af4 <__ulp>
 80062cc:	4604      	mov	r4, r0
 80062ce:	460d      	mov	r5, r1
 80062d0:	f1b8 0f00 	cmp.w	r8, #0
 80062d4:	d011      	beq.n	80062fa <sulp+0x3a>
 80062d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80062da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062de:	2b00      	cmp	r3, #0
 80062e0:	dd0b      	ble.n	80062fa <sulp+0x3a>
 80062e2:	2400      	movs	r4, #0
 80062e4:	051b      	lsls	r3, r3, #20
 80062e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80062ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	f7fa f9a5 	bl	8000640 <__aeabi_dmul>
 80062f6:	4604      	mov	r4, r0
 80062f8:	460d      	mov	r5, r1
 80062fa:	4620      	mov	r0, r4
 80062fc:	4629      	mov	r1, r5
 80062fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006302:	0000      	movs	r0, r0
 8006304:	0000      	movs	r0, r0
	...

08006308 <_strtod_l>:
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	469b      	mov	fp, r3
 800630e:	2300      	movs	r3, #0
 8006310:	b09f      	sub	sp, #124	; 0x7c
 8006312:	931a      	str	r3, [sp, #104]	; 0x68
 8006314:	4b9e      	ldr	r3, [pc, #632]	; (8006590 <_strtod_l+0x288>)
 8006316:	4682      	mov	sl, r0
 8006318:	681f      	ldr	r7, [r3, #0]
 800631a:	460e      	mov	r6, r1
 800631c:	4638      	mov	r0, r7
 800631e:	9215      	str	r2, [sp, #84]	; 0x54
 8006320:	f7f9 ff16 	bl	8000150 <strlen>
 8006324:	f04f 0800 	mov.w	r8, #0
 8006328:	4604      	mov	r4, r0
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	9619      	str	r6, [sp, #100]	; 0x64
 8006330:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006332:	781a      	ldrb	r2, [r3, #0]
 8006334:	2a2b      	cmp	r2, #43	; 0x2b
 8006336:	d04c      	beq.n	80063d2 <_strtod_l+0xca>
 8006338:	d83a      	bhi.n	80063b0 <_strtod_l+0xa8>
 800633a:	2a0d      	cmp	r2, #13
 800633c:	d833      	bhi.n	80063a6 <_strtod_l+0x9e>
 800633e:	2a08      	cmp	r2, #8
 8006340:	d833      	bhi.n	80063aa <_strtod_l+0xa2>
 8006342:	2a00      	cmp	r2, #0
 8006344:	d03d      	beq.n	80063c2 <_strtod_l+0xba>
 8006346:	2300      	movs	r3, #0
 8006348:	930a      	str	r3, [sp, #40]	; 0x28
 800634a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800634c:	782b      	ldrb	r3, [r5, #0]
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	f040 80aa 	bne.w	80064a8 <_strtod_l+0x1a0>
 8006354:	786b      	ldrb	r3, [r5, #1]
 8006356:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800635a:	2b58      	cmp	r3, #88	; 0x58
 800635c:	d166      	bne.n	800642c <_strtod_l+0x124>
 800635e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006360:	4650      	mov	r0, sl
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	ab1a      	add	r3, sp, #104	; 0x68
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4a8a      	ldr	r2, [pc, #552]	; (8006594 <_strtod_l+0x28c>)
 800636a:	f8cd b008 	str.w	fp, [sp, #8]
 800636e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006370:	a919      	add	r1, sp, #100	; 0x64
 8006372:	f001 fd17 	bl	8007da4 <__gethex>
 8006376:	f010 0607 	ands.w	r6, r0, #7
 800637a:	4604      	mov	r4, r0
 800637c:	d005      	beq.n	800638a <_strtod_l+0x82>
 800637e:	2e06      	cmp	r6, #6
 8006380:	d129      	bne.n	80063d6 <_strtod_l+0xce>
 8006382:	2300      	movs	r3, #0
 8006384:	3501      	adds	r5, #1
 8006386:	9519      	str	r5, [sp, #100]	; 0x64
 8006388:	930a      	str	r3, [sp, #40]	; 0x28
 800638a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 858a 	bne.w	8006ea6 <_strtod_l+0xb9e>
 8006392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006394:	b1d3      	cbz	r3, 80063cc <_strtod_l+0xc4>
 8006396:	4642      	mov	r2, r8
 8006398:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	b01f      	add	sp, #124	; 0x7c
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a6:	2a20      	cmp	r2, #32
 80063a8:	d1cd      	bne.n	8006346 <_strtod_l+0x3e>
 80063aa:	3301      	adds	r3, #1
 80063ac:	9319      	str	r3, [sp, #100]	; 0x64
 80063ae:	e7bf      	b.n	8006330 <_strtod_l+0x28>
 80063b0:	2a2d      	cmp	r2, #45	; 0x2d
 80063b2:	d1c8      	bne.n	8006346 <_strtod_l+0x3e>
 80063b4:	2201      	movs	r2, #1
 80063b6:	920a      	str	r2, [sp, #40]	; 0x28
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	9219      	str	r2, [sp, #100]	; 0x64
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1c3      	bne.n	800634a <_strtod_l+0x42>
 80063c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80063c4:	9619      	str	r6, [sp, #100]	; 0x64
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f040 856b 	bne.w	8006ea2 <_strtod_l+0xb9a>
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	e7e4      	b.n	800639c <_strtod_l+0x94>
 80063d2:	2200      	movs	r2, #0
 80063d4:	e7ef      	b.n	80063b6 <_strtod_l+0xae>
 80063d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80063d8:	b13a      	cbz	r2, 80063ea <_strtod_l+0xe2>
 80063da:	2135      	movs	r1, #53	; 0x35
 80063dc:	a81c      	add	r0, sp, #112	; 0x70
 80063de:	f002 fc8d 	bl	8008cfc <__copybits>
 80063e2:	4650      	mov	r0, sl
 80063e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063e6:	f002 f855 	bl	8008494 <_Bfree>
 80063ea:	3e01      	subs	r6, #1
 80063ec:	2e04      	cmp	r6, #4
 80063ee:	d806      	bhi.n	80063fe <_strtod_l+0xf6>
 80063f0:	e8df f006 	tbb	[pc, r6]
 80063f4:	1714030a 	.word	0x1714030a
 80063f8:	0a          	.byte	0x0a
 80063f9:	00          	.byte	0x00
 80063fa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80063fe:	0721      	lsls	r1, r4, #28
 8006400:	d5c3      	bpl.n	800638a <_strtod_l+0x82>
 8006402:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006406:	e7c0      	b.n	800638a <_strtod_l+0x82>
 8006408:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800640a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800640e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006412:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006416:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800641a:	e7f0      	b.n	80063fe <_strtod_l+0xf6>
 800641c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006598 <_strtod_l+0x290>
 8006420:	e7ed      	b.n	80063fe <_strtod_l+0xf6>
 8006422:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006426:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800642a:	e7e8      	b.n	80063fe <_strtod_l+0xf6>
 800642c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	9219      	str	r2, [sp, #100]	; 0x64
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d0f9      	beq.n	800642c <_strtod_l+0x124>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0a6      	beq.n	800638a <_strtod_l+0x82>
 800643c:	2301      	movs	r3, #1
 800643e:	9307      	str	r3, [sp, #28]
 8006440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006442:	220a      	movs	r2, #10
 8006444:	9308      	str	r3, [sp, #32]
 8006446:	2300      	movs	r3, #0
 8006448:	469b      	mov	fp, r3
 800644a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800644e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006450:	7805      	ldrb	r5, [r0, #0]
 8006452:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006456:	b2d9      	uxtb	r1, r3
 8006458:	2909      	cmp	r1, #9
 800645a:	d927      	bls.n	80064ac <_strtod_l+0x1a4>
 800645c:	4622      	mov	r2, r4
 800645e:	4639      	mov	r1, r7
 8006460:	f002 fef2 	bl	8009248 <strncmp>
 8006464:	2800      	cmp	r0, #0
 8006466:	d033      	beq.n	80064d0 <_strtod_l+0x1c8>
 8006468:	2000      	movs	r0, #0
 800646a:	462a      	mov	r2, r5
 800646c:	465c      	mov	r4, fp
 800646e:	4603      	mov	r3, r0
 8006470:	9004      	str	r0, [sp, #16]
 8006472:	2a65      	cmp	r2, #101	; 0x65
 8006474:	d001      	beq.n	800647a <_strtod_l+0x172>
 8006476:	2a45      	cmp	r2, #69	; 0x45
 8006478:	d114      	bne.n	80064a4 <_strtod_l+0x19c>
 800647a:	b91c      	cbnz	r4, 8006484 <_strtod_l+0x17c>
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	4302      	orrs	r2, r0
 8006480:	d09f      	beq.n	80063c2 <_strtod_l+0xba>
 8006482:	2400      	movs	r4, #0
 8006484:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006486:	1c72      	adds	r2, r6, #1
 8006488:	9219      	str	r2, [sp, #100]	; 0x64
 800648a:	7872      	ldrb	r2, [r6, #1]
 800648c:	2a2b      	cmp	r2, #43	; 0x2b
 800648e:	d079      	beq.n	8006584 <_strtod_l+0x27c>
 8006490:	2a2d      	cmp	r2, #45	; 0x2d
 8006492:	f000 8083 	beq.w	800659c <_strtod_l+0x294>
 8006496:	2700      	movs	r7, #0
 8006498:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800649c:	2909      	cmp	r1, #9
 800649e:	f240 8083 	bls.w	80065a8 <_strtod_l+0x2a0>
 80064a2:	9619      	str	r6, [sp, #100]	; 0x64
 80064a4:	2500      	movs	r5, #0
 80064a6:	e09f      	b.n	80065e8 <_strtod_l+0x2e0>
 80064a8:	2300      	movs	r3, #0
 80064aa:	e7c8      	b.n	800643e <_strtod_l+0x136>
 80064ac:	f1bb 0f08 	cmp.w	fp, #8
 80064b0:	bfd5      	itete	le
 80064b2:	9906      	ldrle	r1, [sp, #24]
 80064b4:	9905      	ldrgt	r1, [sp, #20]
 80064b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80064ba:	fb02 3301 	mlagt	r3, r2, r1, r3
 80064be:	f100 0001 	add.w	r0, r0, #1
 80064c2:	bfd4      	ite	le
 80064c4:	9306      	strle	r3, [sp, #24]
 80064c6:	9305      	strgt	r3, [sp, #20]
 80064c8:	f10b 0b01 	add.w	fp, fp, #1
 80064cc:	9019      	str	r0, [sp, #100]	; 0x64
 80064ce:	e7be      	b.n	800644e <_strtod_l+0x146>
 80064d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064d2:	191a      	adds	r2, r3, r4
 80064d4:	9219      	str	r2, [sp, #100]	; 0x64
 80064d6:	5d1a      	ldrb	r2, [r3, r4]
 80064d8:	f1bb 0f00 	cmp.w	fp, #0
 80064dc:	d036      	beq.n	800654c <_strtod_l+0x244>
 80064de:	465c      	mov	r4, fp
 80064e0:	9004      	str	r0, [sp, #16]
 80064e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80064e6:	2b09      	cmp	r3, #9
 80064e8:	d912      	bls.n	8006510 <_strtod_l+0x208>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e7c1      	b.n	8006472 <_strtod_l+0x16a>
 80064ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064f0:	3001      	adds	r0, #1
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	9219      	str	r2, [sp, #100]	; 0x64
 80064f6:	785a      	ldrb	r2, [r3, #1]
 80064f8:	2a30      	cmp	r2, #48	; 0x30
 80064fa:	d0f8      	beq.n	80064ee <_strtod_l+0x1e6>
 80064fc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006500:	2b08      	cmp	r3, #8
 8006502:	f200 84d5 	bhi.w	8006eb0 <_strtod_l+0xba8>
 8006506:	9004      	str	r0, [sp, #16]
 8006508:	2000      	movs	r0, #0
 800650a:	4604      	mov	r4, r0
 800650c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800650e:	9308      	str	r3, [sp, #32]
 8006510:	3a30      	subs	r2, #48	; 0x30
 8006512:	f100 0301 	add.w	r3, r0, #1
 8006516:	d013      	beq.n	8006540 <_strtod_l+0x238>
 8006518:	9904      	ldr	r1, [sp, #16]
 800651a:	1905      	adds	r5, r0, r4
 800651c:	4419      	add	r1, r3
 800651e:	9104      	str	r1, [sp, #16]
 8006520:	4623      	mov	r3, r4
 8006522:	210a      	movs	r1, #10
 8006524:	42ab      	cmp	r3, r5
 8006526:	d113      	bne.n	8006550 <_strtod_l+0x248>
 8006528:	1823      	adds	r3, r4, r0
 800652a:	2b08      	cmp	r3, #8
 800652c:	f104 0401 	add.w	r4, r4, #1
 8006530:	4404      	add	r4, r0
 8006532:	dc1b      	bgt.n	800656c <_strtod_l+0x264>
 8006534:	230a      	movs	r3, #10
 8006536:	9906      	ldr	r1, [sp, #24]
 8006538:	fb03 2301 	mla	r3, r3, r1, r2
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	2300      	movs	r3, #0
 8006540:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006542:	4618      	mov	r0, r3
 8006544:	1c51      	adds	r1, r2, #1
 8006546:	9119      	str	r1, [sp, #100]	; 0x64
 8006548:	7852      	ldrb	r2, [r2, #1]
 800654a:	e7ca      	b.n	80064e2 <_strtod_l+0x1da>
 800654c:	4658      	mov	r0, fp
 800654e:	e7d3      	b.n	80064f8 <_strtod_l+0x1f0>
 8006550:	2b08      	cmp	r3, #8
 8006552:	dc04      	bgt.n	800655e <_strtod_l+0x256>
 8006554:	9f06      	ldr	r7, [sp, #24]
 8006556:	434f      	muls	r7, r1
 8006558:	9706      	str	r7, [sp, #24]
 800655a:	3301      	adds	r3, #1
 800655c:	e7e2      	b.n	8006524 <_strtod_l+0x21c>
 800655e:	1c5f      	adds	r7, r3, #1
 8006560:	2f10      	cmp	r7, #16
 8006562:	bfde      	ittt	le
 8006564:	9f05      	ldrle	r7, [sp, #20]
 8006566:	434f      	mulle	r7, r1
 8006568:	9705      	strle	r7, [sp, #20]
 800656a:	e7f6      	b.n	800655a <_strtod_l+0x252>
 800656c:	2c10      	cmp	r4, #16
 800656e:	bfdf      	itttt	le
 8006570:	230a      	movle	r3, #10
 8006572:	9905      	ldrle	r1, [sp, #20]
 8006574:	fb03 2301 	mlale	r3, r3, r1, r2
 8006578:	9305      	strle	r3, [sp, #20]
 800657a:	e7e0      	b.n	800653e <_strtod_l+0x236>
 800657c:	2300      	movs	r3, #0
 800657e:	9304      	str	r3, [sp, #16]
 8006580:	2301      	movs	r3, #1
 8006582:	e77b      	b.n	800647c <_strtod_l+0x174>
 8006584:	2700      	movs	r7, #0
 8006586:	1cb2      	adds	r2, r6, #2
 8006588:	9219      	str	r2, [sp, #100]	; 0x64
 800658a:	78b2      	ldrb	r2, [r6, #2]
 800658c:	e784      	b.n	8006498 <_strtod_l+0x190>
 800658e:	bf00      	nop
 8006590:	0800a110 	.word	0x0800a110
 8006594:	08009ec8 	.word	0x08009ec8
 8006598:	7ff00000 	.word	0x7ff00000
 800659c:	2701      	movs	r7, #1
 800659e:	e7f2      	b.n	8006586 <_strtod_l+0x27e>
 80065a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065a2:	1c51      	adds	r1, r2, #1
 80065a4:	9119      	str	r1, [sp, #100]	; 0x64
 80065a6:	7852      	ldrb	r2, [r2, #1]
 80065a8:	2a30      	cmp	r2, #48	; 0x30
 80065aa:	d0f9      	beq.n	80065a0 <_strtod_l+0x298>
 80065ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80065b0:	2908      	cmp	r1, #8
 80065b2:	f63f af77 	bhi.w	80064a4 <_strtod_l+0x19c>
 80065b6:	f04f 0e0a 	mov.w	lr, #10
 80065ba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80065be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065c0:	9209      	str	r2, [sp, #36]	; 0x24
 80065c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065c4:	1c51      	adds	r1, r2, #1
 80065c6:	9119      	str	r1, [sp, #100]	; 0x64
 80065c8:	7852      	ldrb	r2, [r2, #1]
 80065ca:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80065ce:	2d09      	cmp	r5, #9
 80065d0:	d935      	bls.n	800663e <_strtod_l+0x336>
 80065d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065d4:	1b49      	subs	r1, r1, r5
 80065d6:	2908      	cmp	r1, #8
 80065d8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80065dc:	dc02      	bgt.n	80065e4 <_strtod_l+0x2dc>
 80065de:	4565      	cmp	r5, ip
 80065e0:	bfa8      	it	ge
 80065e2:	4665      	movge	r5, ip
 80065e4:	b107      	cbz	r7, 80065e8 <_strtod_l+0x2e0>
 80065e6:	426d      	negs	r5, r5
 80065e8:	2c00      	cmp	r4, #0
 80065ea:	d14c      	bne.n	8006686 <_strtod_l+0x37e>
 80065ec:	9907      	ldr	r1, [sp, #28]
 80065ee:	4301      	orrs	r1, r0
 80065f0:	f47f aecb 	bne.w	800638a <_strtod_l+0x82>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f47f aee4 	bne.w	80063c2 <_strtod_l+0xba>
 80065fa:	2a69      	cmp	r2, #105	; 0x69
 80065fc:	d026      	beq.n	800664c <_strtod_l+0x344>
 80065fe:	dc23      	bgt.n	8006648 <_strtod_l+0x340>
 8006600:	2a49      	cmp	r2, #73	; 0x49
 8006602:	d023      	beq.n	800664c <_strtod_l+0x344>
 8006604:	2a4e      	cmp	r2, #78	; 0x4e
 8006606:	f47f aedc 	bne.w	80063c2 <_strtod_l+0xba>
 800660a:	499d      	ldr	r1, [pc, #628]	; (8006880 <_strtod_l+0x578>)
 800660c:	a819      	add	r0, sp, #100	; 0x64
 800660e:	f001 fe17 	bl	8008240 <__match>
 8006612:	2800      	cmp	r0, #0
 8006614:	f43f aed5 	beq.w	80063c2 <_strtod_l+0xba>
 8006618:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b28      	cmp	r3, #40	; 0x28
 800661e:	d12c      	bne.n	800667a <_strtod_l+0x372>
 8006620:	4998      	ldr	r1, [pc, #608]	; (8006884 <_strtod_l+0x57c>)
 8006622:	aa1c      	add	r2, sp, #112	; 0x70
 8006624:	a819      	add	r0, sp, #100	; 0x64
 8006626:	f001 fe1f 	bl	8008268 <__hexnan>
 800662a:	2805      	cmp	r0, #5
 800662c:	d125      	bne.n	800667a <_strtod_l+0x372>
 800662e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006630:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006634:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006638:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800663c:	e6a5      	b.n	800638a <_strtod_l+0x82>
 800663e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006642:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006646:	e7bc      	b.n	80065c2 <_strtod_l+0x2ba>
 8006648:	2a6e      	cmp	r2, #110	; 0x6e
 800664a:	e7dc      	b.n	8006606 <_strtod_l+0x2fe>
 800664c:	498e      	ldr	r1, [pc, #568]	; (8006888 <_strtod_l+0x580>)
 800664e:	a819      	add	r0, sp, #100	; 0x64
 8006650:	f001 fdf6 	bl	8008240 <__match>
 8006654:	2800      	cmp	r0, #0
 8006656:	f43f aeb4 	beq.w	80063c2 <_strtod_l+0xba>
 800665a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800665c:	498b      	ldr	r1, [pc, #556]	; (800688c <_strtod_l+0x584>)
 800665e:	3b01      	subs	r3, #1
 8006660:	a819      	add	r0, sp, #100	; 0x64
 8006662:	9319      	str	r3, [sp, #100]	; 0x64
 8006664:	f001 fdec 	bl	8008240 <__match>
 8006668:	b910      	cbnz	r0, 8006670 <_strtod_l+0x368>
 800666a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800666c:	3301      	adds	r3, #1
 800666e:	9319      	str	r3, [sp, #100]	; 0x64
 8006670:	f04f 0800 	mov.w	r8, #0
 8006674:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006890 <_strtod_l+0x588>
 8006678:	e687      	b.n	800638a <_strtod_l+0x82>
 800667a:	4886      	ldr	r0, [pc, #536]	; (8006894 <_strtod_l+0x58c>)
 800667c:	f002 fdce 	bl	800921c <nan>
 8006680:	4680      	mov	r8, r0
 8006682:	4689      	mov	r9, r1
 8006684:	e681      	b.n	800638a <_strtod_l+0x82>
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	f1bb 0f00 	cmp.w	fp, #0
 800668c:	bf08      	it	eq
 800668e:	46a3      	moveq	fp, r4
 8006690:	1aeb      	subs	r3, r5, r3
 8006692:	2c10      	cmp	r4, #16
 8006694:	9806      	ldr	r0, [sp, #24]
 8006696:	4626      	mov	r6, r4
 8006698:	9307      	str	r3, [sp, #28]
 800669a:	bfa8      	it	ge
 800669c:	2610      	movge	r6, #16
 800669e:	f7f9 ff55 	bl	800054c <__aeabi_ui2d>
 80066a2:	2c09      	cmp	r4, #9
 80066a4:	4680      	mov	r8, r0
 80066a6:	4689      	mov	r9, r1
 80066a8:	dd13      	ble.n	80066d2 <_strtod_l+0x3ca>
 80066aa:	4b7b      	ldr	r3, [pc, #492]	; (8006898 <_strtod_l+0x590>)
 80066ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066b0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80066b4:	f7f9 ffc4 	bl	8000640 <__aeabi_dmul>
 80066b8:	4680      	mov	r8, r0
 80066ba:	9805      	ldr	r0, [sp, #20]
 80066bc:	4689      	mov	r9, r1
 80066be:	f7f9 ff45 	bl	800054c <__aeabi_ui2d>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4640      	mov	r0, r8
 80066c8:	4649      	mov	r1, r9
 80066ca:	f7f9 fe03 	bl	80002d4 <__adddf3>
 80066ce:	4680      	mov	r8, r0
 80066d0:	4689      	mov	r9, r1
 80066d2:	2c0f      	cmp	r4, #15
 80066d4:	dc36      	bgt.n	8006744 <_strtod_l+0x43c>
 80066d6:	9b07      	ldr	r3, [sp, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f43f ae56 	beq.w	800638a <_strtod_l+0x82>
 80066de:	dd22      	ble.n	8006726 <_strtod_l+0x41e>
 80066e0:	2b16      	cmp	r3, #22
 80066e2:	dc09      	bgt.n	80066f8 <_strtod_l+0x3f0>
 80066e4:	496c      	ldr	r1, [pc, #432]	; (8006898 <_strtod_l+0x590>)
 80066e6:	4642      	mov	r2, r8
 80066e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066ec:	464b      	mov	r3, r9
 80066ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f2:	f7f9 ffa5 	bl	8000640 <__aeabi_dmul>
 80066f6:	e7c3      	b.n	8006680 <_strtod_l+0x378>
 80066f8:	9a07      	ldr	r2, [sp, #28]
 80066fa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80066fe:	4293      	cmp	r3, r2
 8006700:	db20      	blt.n	8006744 <_strtod_l+0x43c>
 8006702:	4d65      	ldr	r5, [pc, #404]	; (8006898 <_strtod_l+0x590>)
 8006704:	f1c4 040f 	rsb	r4, r4, #15
 8006708:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800670c:	4642      	mov	r2, r8
 800670e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006712:	464b      	mov	r3, r9
 8006714:	f7f9 ff94 	bl	8000640 <__aeabi_dmul>
 8006718:	9b07      	ldr	r3, [sp, #28]
 800671a:	1b1c      	subs	r4, r3, r4
 800671c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006724:	e7e5      	b.n	80066f2 <_strtod_l+0x3ea>
 8006726:	9b07      	ldr	r3, [sp, #28]
 8006728:	3316      	adds	r3, #22
 800672a:	db0b      	blt.n	8006744 <_strtod_l+0x43c>
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	4640      	mov	r0, r8
 8006730:	1b5d      	subs	r5, r3, r5
 8006732:	4b59      	ldr	r3, [pc, #356]	; (8006898 <_strtod_l+0x590>)
 8006734:	4649      	mov	r1, r9
 8006736:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800673a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800673e:	f7fa f8a9 	bl	8000894 <__aeabi_ddiv>
 8006742:	e79d      	b.n	8006680 <_strtod_l+0x378>
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	1ba6      	subs	r6, r4, r6
 8006748:	441e      	add	r6, r3
 800674a:	2e00      	cmp	r6, #0
 800674c:	dd74      	ble.n	8006838 <_strtod_l+0x530>
 800674e:	f016 030f 	ands.w	r3, r6, #15
 8006752:	d00a      	beq.n	800676a <_strtod_l+0x462>
 8006754:	4950      	ldr	r1, [pc, #320]	; (8006898 <_strtod_l+0x590>)
 8006756:	4642      	mov	r2, r8
 8006758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800675c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006760:	464b      	mov	r3, r9
 8006762:	f7f9 ff6d 	bl	8000640 <__aeabi_dmul>
 8006766:	4680      	mov	r8, r0
 8006768:	4689      	mov	r9, r1
 800676a:	f036 060f 	bics.w	r6, r6, #15
 800676e:	d052      	beq.n	8006816 <_strtod_l+0x50e>
 8006770:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006774:	dd27      	ble.n	80067c6 <_strtod_l+0x4be>
 8006776:	f04f 0b00 	mov.w	fp, #0
 800677a:	f8cd b010 	str.w	fp, [sp, #16]
 800677e:	f8cd b020 	str.w	fp, [sp, #32]
 8006782:	f8cd b018 	str.w	fp, [sp, #24]
 8006786:	2322      	movs	r3, #34	; 0x22
 8006788:	f04f 0800 	mov.w	r8, #0
 800678c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006890 <_strtod_l+0x588>
 8006790:	f8ca 3000 	str.w	r3, [sl]
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f43f adf7 	beq.w	800638a <_strtod_l+0x82>
 800679c:	4650      	mov	r0, sl
 800679e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067a0:	f001 fe78 	bl	8008494 <_Bfree>
 80067a4:	4650      	mov	r0, sl
 80067a6:	9906      	ldr	r1, [sp, #24]
 80067a8:	f001 fe74 	bl	8008494 <_Bfree>
 80067ac:	4650      	mov	r0, sl
 80067ae:	9904      	ldr	r1, [sp, #16]
 80067b0:	f001 fe70 	bl	8008494 <_Bfree>
 80067b4:	4650      	mov	r0, sl
 80067b6:	9908      	ldr	r1, [sp, #32]
 80067b8:	f001 fe6c 	bl	8008494 <_Bfree>
 80067bc:	4659      	mov	r1, fp
 80067be:	4650      	mov	r0, sl
 80067c0:	f001 fe68 	bl	8008494 <_Bfree>
 80067c4:	e5e1      	b.n	800638a <_strtod_l+0x82>
 80067c6:	4b35      	ldr	r3, [pc, #212]	; (800689c <_strtod_l+0x594>)
 80067c8:	4640      	mov	r0, r8
 80067ca:	9305      	str	r3, [sp, #20]
 80067cc:	2300      	movs	r3, #0
 80067ce:	4649      	mov	r1, r9
 80067d0:	461f      	mov	r7, r3
 80067d2:	1136      	asrs	r6, r6, #4
 80067d4:	2e01      	cmp	r6, #1
 80067d6:	dc21      	bgt.n	800681c <_strtod_l+0x514>
 80067d8:	b10b      	cbz	r3, 80067de <_strtod_l+0x4d6>
 80067da:	4680      	mov	r8, r0
 80067dc:	4689      	mov	r9, r1
 80067de:	4b2f      	ldr	r3, [pc, #188]	; (800689c <_strtod_l+0x594>)
 80067e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80067e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80067e8:	4642      	mov	r2, r8
 80067ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ee:	464b      	mov	r3, r9
 80067f0:	f7f9 ff26 	bl	8000640 <__aeabi_dmul>
 80067f4:	4b26      	ldr	r3, [pc, #152]	; (8006890 <_strtod_l+0x588>)
 80067f6:	460a      	mov	r2, r1
 80067f8:	400b      	ands	r3, r1
 80067fa:	4929      	ldr	r1, [pc, #164]	; (80068a0 <_strtod_l+0x598>)
 80067fc:	4680      	mov	r8, r0
 80067fe:	428b      	cmp	r3, r1
 8006800:	d8b9      	bhi.n	8006776 <_strtod_l+0x46e>
 8006802:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006806:	428b      	cmp	r3, r1
 8006808:	bf86      	itte	hi
 800680a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800680e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80068a4 <_strtod_l+0x59c>
 8006812:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006816:	2300      	movs	r3, #0
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	e07f      	b.n	800691c <_strtod_l+0x614>
 800681c:	07f2      	lsls	r2, r6, #31
 800681e:	d505      	bpl.n	800682c <_strtod_l+0x524>
 8006820:	9b05      	ldr	r3, [sp, #20]
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f7f9 ff0b 	bl	8000640 <__aeabi_dmul>
 800682a:	2301      	movs	r3, #1
 800682c:	9a05      	ldr	r2, [sp, #20]
 800682e:	3701      	adds	r7, #1
 8006830:	3208      	adds	r2, #8
 8006832:	1076      	asrs	r6, r6, #1
 8006834:	9205      	str	r2, [sp, #20]
 8006836:	e7cd      	b.n	80067d4 <_strtod_l+0x4cc>
 8006838:	d0ed      	beq.n	8006816 <_strtod_l+0x50e>
 800683a:	4276      	negs	r6, r6
 800683c:	f016 020f 	ands.w	r2, r6, #15
 8006840:	d00a      	beq.n	8006858 <_strtod_l+0x550>
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <_strtod_l+0x590>)
 8006844:	4640      	mov	r0, r8
 8006846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800684a:	4649      	mov	r1, r9
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7fa f820 	bl	8000894 <__aeabi_ddiv>
 8006854:	4680      	mov	r8, r0
 8006856:	4689      	mov	r9, r1
 8006858:	1136      	asrs	r6, r6, #4
 800685a:	d0dc      	beq.n	8006816 <_strtod_l+0x50e>
 800685c:	2e1f      	cmp	r6, #31
 800685e:	dd23      	ble.n	80068a8 <_strtod_l+0x5a0>
 8006860:	f04f 0b00 	mov.w	fp, #0
 8006864:	f8cd b010 	str.w	fp, [sp, #16]
 8006868:	f8cd b020 	str.w	fp, [sp, #32]
 800686c:	f8cd b018 	str.w	fp, [sp, #24]
 8006870:	2322      	movs	r3, #34	; 0x22
 8006872:	f04f 0800 	mov.w	r8, #0
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	f8ca 3000 	str.w	r3, [sl]
 800687e:	e789      	b.n	8006794 <_strtod_l+0x48c>
 8006880:	08009e99 	.word	0x08009e99
 8006884:	08009edc 	.word	0x08009edc
 8006888:	08009e91 	.word	0x08009e91
 800688c:	0800a01c 	.word	0x0800a01c
 8006890:	7ff00000 	.word	0x7ff00000
 8006894:	0800a2c8 	.word	0x0800a2c8
 8006898:	0800a1a8 	.word	0x0800a1a8
 800689c:	0800a180 	.word	0x0800a180
 80068a0:	7ca00000 	.word	0x7ca00000
 80068a4:	7fefffff 	.word	0x7fefffff
 80068a8:	f016 0310 	ands.w	r3, r6, #16
 80068ac:	bf18      	it	ne
 80068ae:	236a      	movne	r3, #106	; 0x6a
 80068b0:	4640      	mov	r0, r8
 80068b2:	9305      	str	r3, [sp, #20]
 80068b4:	4649      	mov	r1, r9
 80068b6:	2300      	movs	r3, #0
 80068b8:	4fb0      	ldr	r7, [pc, #704]	; (8006b7c <_strtod_l+0x874>)
 80068ba:	07f2      	lsls	r2, r6, #31
 80068bc:	d504      	bpl.n	80068c8 <_strtod_l+0x5c0>
 80068be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c2:	f7f9 febd 	bl	8000640 <__aeabi_dmul>
 80068c6:	2301      	movs	r3, #1
 80068c8:	1076      	asrs	r6, r6, #1
 80068ca:	f107 0708 	add.w	r7, r7, #8
 80068ce:	d1f4      	bne.n	80068ba <_strtod_l+0x5b2>
 80068d0:	b10b      	cbz	r3, 80068d6 <_strtod_l+0x5ce>
 80068d2:	4680      	mov	r8, r0
 80068d4:	4689      	mov	r9, r1
 80068d6:	9b05      	ldr	r3, [sp, #20]
 80068d8:	b1c3      	cbz	r3, 800690c <_strtod_l+0x604>
 80068da:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80068de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	4649      	mov	r1, r9
 80068e6:	dd11      	ble.n	800690c <_strtod_l+0x604>
 80068e8:	2b1f      	cmp	r3, #31
 80068ea:	f340 8127 	ble.w	8006b3c <_strtod_l+0x834>
 80068ee:	2b34      	cmp	r3, #52	; 0x34
 80068f0:	bfd8      	it	le
 80068f2:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	bfcf      	iteee	gt
 80068fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006900:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006904:	fa03 f202 	lslle.w	r2, r3, r2
 8006908:	ea02 0901 	andle.w	r9, r2, r1
 800690c:	2200      	movs	r2, #0
 800690e:	2300      	movs	r3, #0
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7fa f8fc 	bl	8000b10 <__aeabi_dcmpeq>
 8006918:	2800      	cmp	r0, #0
 800691a:	d1a1      	bne.n	8006860 <_strtod_l+0x558>
 800691c:	9b06      	ldr	r3, [sp, #24]
 800691e:	465a      	mov	r2, fp
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4650      	mov	r0, sl
 8006924:	4623      	mov	r3, r4
 8006926:	9908      	ldr	r1, [sp, #32]
 8006928:	f001 fe1c 	bl	8008564 <__s2b>
 800692c:	9008      	str	r0, [sp, #32]
 800692e:	2800      	cmp	r0, #0
 8006930:	f43f af21 	beq.w	8006776 <_strtod_l+0x46e>
 8006934:	9b04      	ldr	r3, [sp, #16]
 8006936:	f04f 0b00 	mov.w	fp, #0
 800693a:	1b5d      	subs	r5, r3, r5
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	f8cd b010 	str.w	fp, [sp, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfb4      	ite	lt
 8006946:	462b      	movlt	r3, r5
 8006948:	2300      	movge	r3, #0
 800694a:	930e      	str	r3, [sp, #56]	; 0x38
 800694c:	9b07      	ldr	r3, [sp, #28]
 800694e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006952:	9314      	str	r3, [sp, #80]	; 0x50
 8006954:	9b08      	ldr	r3, [sp, #32]
 8006956:	4650      	mov	r0, sl
 8006958:	6859      	ldr	r1, [r3, #4]
 800695a:	f001 fd5b 	bl	8008414 <_Balloc>
 800695e:	9006      	str	r0, [sp, #24]
 8006960:	2800      	cmp	r0, #0
 8006962:	f43f af10 	beq.w	8006786 <_strtod_l+0x47e>
 8006966:	9b08      	ldr	r3, [sp, #32]
 8006968:	300c      	adds	r0, #12
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	f103 010c 	add.w	r1, r3, #12
 8006970:	3202      	adds	r2, #2
 8006972:	0092      	lsls	r2, r2, #2
 8006974:	f001 fd40 	bl	80083f8 <memcpy>
 8006978:	ab1c      	add	r3, sp, #112	; 0x70
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	ab1b      	add	r3, sp, #108	; 0x6c
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	4650      	mov	r0, sl
 8006986:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800698a:	f002 f92d 	bl	8008be8 <__d2b>
 800698e:	901a      	str	r0, [sp, #104]	; 0x68
 8006990:	2800      	cmp	r0, #0
 8006992:	f43f aef8 	beq.w	8006786 <_strtod_l+0x47e>
 8006996:	2101      	movs	r1, #1
 8006998:	4650      	mov	r0, sl
 800699a:	f001 fe7b 	bl	8008694 <__i2b>
 800699e:	4603      	mov	r3, r0
 80069a0:	9004      	str	r0, [sp, #16]
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f43f aeef 	beq.w	8006786 <_strtod_l+0x47e>
 80069a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80069aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	bfab      	itete	ge
 80069b0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80069b2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80069b4:	18ee      	addge	r6, r5, r3
 80069b6:	1b5c      	sublt	r4, r3, r5
 80069b8:	9b05      	ldr	r3, [sp, #20]
 80069ba:	bfa8      	it	ge
 80069bc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80069be:	eba5 0503 	sub.w	r5, r5, r3
 80069c2:	4415      	add	r5, r2
 80069c4:	4b6e      	ldr	r3, [pc, #440]	; (8006b80 <_strtod_l+0x878>)
 80069c6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80069ca:	bfb8      	it	lt
 80069cc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80069ce:	429d      	cmp	r5, r3
 80069d0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80069d4:	f280 80c4 	bge.w	8006b60 <_strtod_l+0x858>
 80069d8:	1b5b      	subs	r3, r3, r5
 80069da:	2b1f      	cmp	r3, #31
 80069dc:	f04f 0701 	mov.w	r7, #1
 80069e0:	eba2 0203 	sub.w	r2, r2, r3
 80069e4:	f300 80b1 	bgt.w	8006b4a <_strtod_l+0x842>
 80069e8:	2500      	movs	r5, #0
 80069ea:	fa07 f303 	lsl.w	r3, r7, r3
 80069ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f0:	18b7      	adds	r7, r6, r2
 80069f2:	9b05      	ldr	r3, [sp, #20]
 80069f4:	42be      	cmp	r6, r7
 80069f6:	4414      	add	r4, r2
 80069f8:	441c      	add	r4, r3
 80069fa:	4633      	mov	r3, r6
 80069fc:	bfa8      	it	ge
 80069fe:	463b      	movge	r3, r7
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	bfa8      	it	ge
 8006a04:	4623      	movge	r3, r4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfc2      	ittt	gt
 8006a0a:	1aff      	subgt	r7, r7, r3
 8006a0c:	1ae4      	subgt	r4, r4, r3
 8006a0e:	1af6      	subgt	r6, r6, r3
 8006a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dd17      	ble.n	8006a46 <_strtod_l+0x73e>
 8006a16:	461a      	mov	r2, r3
 8006a18:	4650      	mov	r0, sl
 8006a1a:	9904      	ldr	r1, [sp, #16]
 8006a1c:	f001 fef8 	bl	8008810 <__pow5mult>
 8006a20:	9004      	str	r0, [sp, #16]
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f43f aeaf 	beq.w	8006786 <_strtod_l+0x47e>
 8006a28:	4601      	mov	r1, r0
 8006a2a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	f001 fe47 	bl	80086c0 <__multiply>
 8006a32:	9009      	str	r0, [sp, #36]	; 0x24
 8006a34:	2800      	cmp	r0, #0
 8006a36:	f43f aea6 	beq.w	8006786 <_strtod_l+0x47e>
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a3e:	f001 fd29 	bl	8008494 <_Bfree>
 8006a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a44:	931a      	str	r3, [sp, #104]	; 0x68
 8006a46:	2f00      	cmp	r7, #0
 8006a48:	f300 808e 	bgt.w	8006b68 <_strtod_l+0x860>
 8006a4c:	9b07      	ldr	r3, [sp, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dd08      	ble.n	8006a64 <_strtod_l+0x75c>
 8006a52:	4650      	mov	r0, sl
 8006a54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a56:	9906      	ldr	r1, [sp, #24]
 8006a58:	f001 feda 	bl	8008810 <__pow5mult>
 8006a5c:	9006      	str	r0, [sp, #24]
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f43f ae91 	beq.w	8006786 <_strtod_l+0x47e>
 8006a64:	2c00      	cmp	r4, #0
 8006a66:	dd08      	ble.n	8006a7a <_strtod_l+0x772>
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	9906      	ldr	r1, [sp, #24]
 8006a6e:	f001 ff29 	bl	80088c4 <__lshift>
 8006a72:	9006      	str	r0, [sp, #24]
 8006a74:	2800      	cmp	r0, #0
 8006a76:	f43f ae86 	beq.w	8006786 <_strtod_l+0x47e>
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	dd08      	ble.n	8006a90 <_strtod_l+0x788>
 8006a7e:	4632      	mov	r2, r6
 8006a80:	4650      	mov	r0, sl
 8006a82:	9904      	ldr	r1, [sp, #16]
 8006a84:	f001 ff1e 	bl	80088c4 <__lshift>
 8006a88:	9004      	str	r0, [sp, #16]
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f43f ae7b 	beq.w	8006786 <_strtod_l+0x47e>
 8006a90:	4650      	mov	r0, sl
 8006a92:	9a06      	ldr	r2, [sp, #24]
 8006a94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a96:	f001 ffa1 	bl	80089dc <__mdiff>
 8006a9a:	4683      	mov	fp, r0
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f ae72 	beq.w	8006786 <_strtod_l+0x47e>
 8006aa2:	2400      	movs	r4, #0
 8006aa4:	68c3      	ldr	r3, [r0, #12]
 8006aa6:	9904      	ldr	r1, [sp, #16]
 8006aa8:	60c4      	str	r4, [r0, #12]
 8006aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aac:	f001 ff7a 	bl	80089a4 <__mcmp>
 8006ab0:	42a0      	cmp	r0, r4
 8006ab2:	da6b      	bge.n	8006b8c <_strtod_l+0x884>
 8006ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab6:	ea53 0308 	orrs.w	r3, r3, r8
 8006aba:	f040 8091 	bne.w	8006be0 <_strtod_l+0x8d8>
 8006abe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 808c 	bne.w	8006be0 <_strtod_l+0x8d8>
 8006ac8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006acc:	0d1b      	lsrs	r3, r3, #20
 8006ace:	051b      	lsls	r3, r3, #20
 8006ad0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ad4:	f240 8084 	bls.w	8006be0 <_strtod_l+0x8d8>
 8006ad8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006adc:	b91b      	cbnz	r3, 8006ae6 <_strtod_l+0x7de>
 8006ade:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	dd7c      	ble.n	8006be0 <_strtod_l+0x8d8>
 8006ae6:	4659      	mov	r1, fp
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4650      	mov	r0, sl
 8006aec:	f001 feea 	bl	80088c4 <__lshift>
 8006af0:	9904      	ldr	r1, [sp, #16]
 8006af2:	4683      	mov	fp, r0
 8006af4:	f001 ff56 	bl	80089a4 <__mcmp>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	dd71      	ble.n	8006be0 <_strtod_l+0x8d8>
 8006afc:	9905      	ldr	r1, [sp, #20]
 8006afe:	464b      	mov	r3, r9
 8006b00:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <_strtod_l+0x87c>)
 8006b02:	2900      	cmp	r1, #0
 8006b04:	f000 808c 	beq.w	8006c20 <_strtod_l+0x918>
 8006b08:	ea02 0109 	and.w	r1, r2, r9
 8006b0c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006b10:	f300 8086 	bgt.w	8006c20 <_strtod_l+0x918>
 8006b14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006b18:	f77f aeaa 	ble.w	8006870 <_strtod_l+0x568>
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <_strtod_l+0x880>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7f9 fd8c 	bl	8000640 <__aeabi_dmul>
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4303      	orrs	r3, r0
 8006b2c:	bf08      	it	eq
 8006b2e:	2322      	moveq	r3, #34	; 0x22
 8006b30:	4680      	mov	r8, r0
 8006b32:	4689      	mov	r9, r1
 8006b34:	bf08      	it	eq
 8006b36:	f8ca 3000 	streq.w	r3, [sl]
 8006b3a:	e62f      	b.n	800679c <_strtod_l+0x494>
 8006b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	ea03 0808 	and.w	r8, r3, r8
 8006b48:	e6e0      	b.n	800690c <_strtod_l+0x604>
 8006b4a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006b4e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006b52:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006b56:	35e2      	adds	r5, #226	; 0xe2
 8006b58:	fa07 f505 	lsl.w	r5, r7, r5
 8006b5c:	970f      	str	r7, [sp, #60]	; 0x3c
 8006b5e:	e747      	b.n	80069f0 <_strtod_l+0x6e8>
 8006b60:	2301      	movs	r3, #1
 8006b62:	2500      	movs	r5, #0
 8006b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b66:	e743      	b.n	80069f0 <_strtod_l+0x6e8>
 8006b68:	463a      	mov	r2, r7
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b6e:	f001 fea9 	bl	80088c4 <__lshift>
 8006b72:	901a      	str	r0, [sp, #104]	; 0x68
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f47f af69 	bne.w	8006a4c <_strtod_l+0x744>
 8006b7a:	e604      	b.n	8006786 <_strtod_l+0x47e>
 8006b7c:	08009ef0 	.word	0x08009ef0
 8006b80:	fffffc02 	.word	0xfffffc02
 8006b84:	7ff00000 	.word	0x7ff00000
 8006b88:	39500000 	.word	0x39500000
 8006b8c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b90:	d165      	bne.n	8006c5e <_strtod_l+0x956>
 8006b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b98:	b35a      	cbz	r2, 8006bf2 <_strtod_l+0x8ea>
 8006b9a:	4a99      	ldr	r2, [pc, #612]	; (8006e00 <_strtod_l+0xaf8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d12b      	bne.n	8006bf8 <_strtod_l+0x8f0>
 8006ba0:	9b05      	ldr	r3, [sp, #20]
 8006ba2:	4641      	mov	r1, r8
 8006ba4:	b303      	cbz	r3, 8006be8 <_strtod_l+0x8e0>
 8006ba6:	464a      	mov	r2, r9
 8006ba8:	4b96      	ldr	r3, [pc, #600]	; (8006e04 <_strtod_l+0xafc>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb4:	d81b      	bhi.n	8006bee <_strtod_l+0x8e6>
 8006bb6:	0d1b      	lsrs	r3, r3, #20
 8006bb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d119      	bne.n	8006bf8 <_strtod_l+0x8f0>
 8006bc4:	4b90      	ldr	r3, [pc, #576]	; (8006e08 <_strtod_l+0xb00>)
 8006bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d102      	bne.n	8006bd2 <_strtod_l+0x8ca>
 8006bcc:	3101      	adds	r1, #1
 8006bce:	f43f adda 	beq.w	8006786 <_strtod_l+0x47e>
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	4b8b      	ldr	r3, [pc, #556]	; (8006e04 <_strtod_l+0xafc>)
 8006bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bda:	401a      	ands	r2, r3
 8006bdc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006be0:	9b05      	ldr	r3, [sp, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d19a      	bne.n	8006b1c <_strtod_l+0x814>
 8006be6:	e5d9      	b.n	800679c <_strtod_l+0x494>
 8006be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bec:	e7e8      	b.n	8006bc0 <_strtod_l+0x8b8>
 8006bee:	4613      	mov	r3, r2
 8006bf0:	e7e6      	b.n	8006bc0 <_strtod_l+0x8b8>
 8006bf2:	ea53 0308 	orrs.w	r3, r3, r8
 8006bf6:	d081      	beq.n	8006afc <_strtod_l+0x7f4>
 8006bf8:	b1e5      	cbz	r5, 8006c34 <_strtod_l+0x92c>
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	421d      	tst	r5, r3
 8006bfe:	d0ef      	beq.n	8006be0 <_strtod_l+0x8d8>
 8006c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	9a05      	ldr	r2, [sp, #20]
 8006c08:	b1c3      	cbz	r3, 8006c3c <_strtod_l+0x934>
 8006c0a:	f7ff fb59 	bl	80062c0 <sulp>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c16:	f7f9 fb5d 	bl	80002d4 <__adddf3>
 8006c1a:	4680      	mov	r8, r0
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	e7df      	b.n	8006be0 <_strtod_l+0x8d8>
 8006c20:	4013      	ands	r3, r2
 8006c22:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c26:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006c2a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006c2e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006c32:	e7d5      	b.n	8006be0 <_strtod_l+0x8d8>
 8006c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c36:	ea13 0f08 	tst.w	r3, r8
 8006c3a:	e7e0      	b.n	8006bfe <_strtod_l+0x8f6>
 8006c3c:	f7ff fb40 	bl	80062c0 <sulp>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c48:	f7f9 fb42 	bl	80002d0 <__aeabi_dsub>
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	f7f9 ff5c 	bl	8000b10 <__aeabi_dcmpeq>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d0c1      	beq.n	8006be0 <_strtod_l+0x8d8>
 8006c5c:	e608      	b.n	8006870 <_strtod_l+0x568>
 8006c5e:	4658      	mov	r0, fp
 8006c60:	9904      	ldr	r1, [sp, #16]
 8006c62:	f002 f81d 	bl	8008ca0 <__ratio>
 8006c66:	2200      	movs	r2, #0
 8006c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	f7f9 ff62 	bl	8000b38 <__aeabi_dcmple>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d070      	beq.n	8006d5a <_strtod_l+0xa52>
 8006c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d042      	beq.n	8006d04 <_strtod_l+0x9fc>
 8006c7e:	2600      	movs	r6, #0
 8006c80:	4f62      	ldr	r7, [pc, #392]	; (8006e0c <_strtod_l+0xb04>)
 8006c82:	4d62      	ldr	r5, [pc, #392]	; (8006e0c <_strtod_l+0xb04>)
 8006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c8a:	0d1b      	lsrs	r3, r3, #20
 8006c8c:	051b      	lsls	r3, r3, #20
 8006c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c92:	4b5f      	ldr	r3, [pc, #380]	; (8006e10 <_strtod_l+0xb08>)
 8006c94:	429a      	cmp	r2, r3
 8006c96:	f040 80c3 	bne.w	8006e20 <_strtod_l+0xb18>
 8006c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f001 ff26 	bl	8008af4 <__ulp>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4630      	mov	r0, r6
 8006cae:	4639      	mov	r1, r7
 8006cb0:	f7f9 fcc6 	bl	8000640 <__aeabi_dmul>
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	f7f9 fb0c 	bl	80002d4 <__adddf3>
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4951      	ldr	r1, [pc, #324]	; (8006e04 <_strtod_l+0xafc>)
 8006cc0:	4a54      	ldr	r2, [pc, #336]	; (8006e14 <_strtod_l+0xb0c>)
 8006cc2:	4019      	ands	r1, r3
 8006cc4:	4291      	cmp	r1, r2
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	d95d      	bls.n	8006d86 <_strtod_l+0xa7e>
 8006cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ccc:	4b4e      	ldr	r3, [pc, #312]	; (8006e08 <_strtod_l+0xb00>)
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d103      	bne.n	8006cda <_strtod_l+0x9d2>
 8006cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f43f ad56 	beq.w	8006786 <_strtod_l+0x47e>
 8006cda:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006cde:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006e08 <_strtod_l+0xb00>
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ce6:	f001 fbd5 	bl	8008494 <_Bfree>
 8006cea:	4650      	mov	r0, sl
 8006cec:	9906      	ldr	r1, [sp, #24]
 8006cee:	f001 fbd1 	bl	8008494 <_Bfree>
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	9904      	ldr	r1, [sp, #16]
 8006cf6:	f001 fbcd 	bl	8008494 <_Bfree>
 8006cfa:	4659      	mov	r1, fp
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	f001 fbc9 	bl	8008494 <_Bfree>
 8006d02:	e627      	b.n	8006954 <_strtod_l+0x64c>
 8006d04:	f1b8 0f00 	cmp.w	r8, #0
 8006d08:	d119      	bne.n	8006d3e <_strtod_l+0xa36>
 8006d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d10:	b9e3      	cbnz	r3, 8006d4c <_strtod_l+0xa44>
 8006d12:	2200      	movs	r2, #0
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	4b3c      	ldr	r3, [pc, #240]	; (8006e0c <_strtod_l+0xb04>)
 8006d1a:	f7f9 ff03 	bl	8000b24 <__aeabi_dcmplt>
 8006d1e:	b9c8      	cbnz	r0, 8006d54 <_strtod_l+0xa4c>
 8006d20:	2200      	movs	r2, #0
 8006d22:	4630      	mov	r0, r6
 8006d24:	4639      	mov	r1, r7
 8006d26:	4b3c      	ldr	r3, [pc, #240]	; (8006e18 <_strtod_l+0xb10>)
 8006d28:	f7f9 fc8a 	bl	8000640 <__aeabi_dmul>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	460d      	mov	r5, r1
 8006d30:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d34:	9416      	str	r4, [sp, #88]	; 0x58
 8006d36:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d38:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006d3c:	e7a2      	b.n	8006c84 <_strtod_l+0x97c>
 8006d3e:	f1b8 0f01 	cmp.w	r8, #1
 8006d42:	d103      	bne.n	8006d4c <_strtod_l+0xa44>
 8006d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f43f ad92 	beq.w	8006870 <_strtod_l+0x568>
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	2400      	movs	r4, #0
 8006d50:	4f32      	ldr	r7, [pc, #200]	; (8006e1c <_strtod_l+0xb14>)
 8006d52:	e796      	b.n	8006c82 <_strtod_l+0x97a>
 8006d54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006d56:	4d30      	ldr	r5, [pc, #192]	; (8006e18 <_strtod_l+0xb10>)
 8006d58:	e7ea      	b.n	8006d30 <_strtod_l+0xa28>
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	; (8006e18 <_strtod_l+0xb10>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4630      	mov	r0, r6
 8006d60:	4639      	mov	r1, r7
 8006d62:	f7f9 fc6d 	bl	8000640 <__aeabi_dmul>
 8006d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	b933      	cbnz	r3, 8006d7c <_strtod_l+0xa74>
 8006d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d72:	9010      	str	r0, [sp, #64]	; 0x40
 8006d74:	9311      	str	r3, [sp, #68]	; 0x44
 8006d76:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d7a:	e783      	b.n	8006c84 <_strtod_l+0x97c>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006d84:	e7f7      	b.n	8006d76 <_strtod_l+0xa6e>
 8006d86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006d8a:	9b05      	ldr	r3, [sp, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1a8      	bne.n	8006ce2 <_strtod_l+0x9da>
 8006d90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d96:	0d1b      	lsrs	r3, r3, #20
 8006d98:	051b      	lsls	r3, r3, #20
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d1a1      	bne.n	8006ce2 <_strtod_l+0x9da>
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7fa f8c9 	bl	8000f38 <__aeabi_d2lz>
 8006da6:	f7f9 fc1d 	bl	80005e4 <__aeabi_l2d>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fa8d 	bl	80002d0 <__aeabi_dsub>
 8006db6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dbc:	ea43 0308 	orr.w	r3, r3, r8
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	d066      	beq.n	8006e96 <_strtod_l+0xb8e>
 8006dc8:	a309      	add	r3, pc, #36	; (adr r3, 8006df0 <_strtod_l+0xae8>)
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f7f9 fea9 	bl	8000b24 <__aeabi_dcmplt>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	f47f ace2 	bne.w	800679c <_strtod_l+0x494>
 8006dd8:	a307      	add	r3, pc, #28	; (adr r3, 8006df8 <_strtod_l+0xaf0>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 febd 	bl	8000b60 <__aeabi_dcmpgt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f af7b 	beq.w	8006ce2 <_strtod_l+0x9da>
 8006dec:	e4d6      	b.n	800679c <_strtod_l+0x494>
 8006dee:	bf00      	nop
 8006df0:	94a03595 	.word	0x94a03595
 8006df4:	3fdfffff 	.word	0x3fdfffff
 8006df8:	35afe535 	.word	0x35afe535
 8006dfc:	3fe00000 	.word	0x3fe00000
 8006e00:	000fffff 	.word	0x000fffff
 8006e04:	7ff00000 	.word	0x7ff00000
 8006e08:	7fefffff 	.word	0x7fefffff
 8006e0c:	3ff00000 	.word	0x3ff00000
 8006e10:	7fe00000 	.word	0x7fe00000
 8006e14:	7c9fffff 	.word	0x7c9fffff
 8006e18:	3fe00000 	.word	0x3fe00000
 8006e1c:	bff00000 	.word	0xbff00000
 8006e20:	9b05      	ldr	r3, [sp, #20]
 8006e22:	b313      	cbz	r3, 8006e6a <_strtod_l+0xb62>
 8006e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e2a:	d81e      	bhi.n	8006e6a <_strtod_l+0xb62>
 8006e2c:	a326      	add	r3, pc, #152	; (adr r3, 8006ec8 <_strtod_l+0xbc0>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fe7f 	bl	8000b38 <__aeabi_dcmple>
 8006e3a:	b190      	cbz	r0, 8006e62 <_strtod_l+0xb5a>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7f9 fed6 	bl	8000bf0 <__aeabi_d2uiz>
 8006e44:	2801      	cmp	r0, #1
 8006e46:	bf38      	it	cc
 8006e48:	2001      	movcc	r0, #1
 8006e4a:	f7f9 fb7f 	bl	800054c <__aeabi_ui2d>
 8006e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e50:	4604      	mov	r4, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	b9d3      	cbnz	r3, 8006e8c <_strtod_l+0xb84>
 8006e56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e5a:	9012      	str	r0, [sp, #72]	; 0x48
 8006e5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e5e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006e62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e64:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006e68:	1a9f      	subs	r7, r3, r2
 8006e6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e6e:	f001 fe41 	bl	8008af4 <__ulp>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 fbe1 	bl	8000640 <__aeabi_dmul>
 8006e7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e82:	f7f9 fa27 	bl	80002d4 <__adddf3>
 8006e86:	4680      	mov	r8, r0
 8006e88:	4689      	mov	r9, r1
 8006e8a:	e77e      	b.n	8006d8a <_strtod_l+0xa82>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006e94:	e7e3      	b.n	8006e5e <_strtod_l+0xb56>
 8006e96:	a30e      	add	r3, pc, #56	; (adr r3, 8006ed0 <_strtod_l+0xbc8>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 fe42 	bl	8000b24 <__aeabi_dcmplt>
 8006ea0:	e7a1      	b.n	8006de6 <_strtod_l+0xade>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ea8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	f7ff ba71 	b.w	8006392 <_strtod_l+0x8a>
 8006eb0:	2a65      	cmp	r2, #101	; 0x65
 8006eb2:	f43f ab63 	beq.w	800657c <_strtod_l+0x274>
 8006eb6:	2a45      	cmp	r2, #69	; 0x45
 8006eb8:	f43f ab60 	beq.w	800657c <_strtod_l+0x274>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f7ff bb95 	b.w	80065ec <_strtod_l+0x2e4>
 8006ec2:	bf00      	nop
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	ffc00000 	.word	0xffc00000
 8006ecc:	41dfffff 	.word	0x41dfffff
 8006ed0:	94a03595 	.word	0x94a03595
 8006ed4:	3fcfffff 	.word	0x3fcfffff

08006ed8 <_strtod_r>:
 8006ed8:	4b01      	ldr	r3, [pc, #4]	; (8006ee0 <_strtod_r+0x8>)
 8006eda:	f7ff ba15 	b.w	8006308 <_strtod_l>
 8006ede:	bf00      	nop
 8006ee0:	20000078 	.word	0x20000078

08006ee4 <_strtol_l.constprop.0>:
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eea:	4680      	mov	r8, r0
 8006eec:	d001      	beq.n	8006ef2 <_strtol_l.constprop.0+0xe>
 8006eee:	2b24      	cmp	r3, #36	; 0x24
 8006ef0:	d906      	bls.n	8006f00 <_strtol_l.constprop.0+0x1c>
 8006ef2:	f7fe fb21 	bl	8005538 <__errno>
 8006ef6:	2316      	movs	r3, #22
 8006ef8:	6003      	str	r3, [r0, #0]
 8006efa:	2000      	movs	r0, #0
 8006efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f00:	460d      	mov	r5, r1
 8006f02:	4f35      	ldr	r7, [pc, #212]	; (8006fd8 <_strtol_l.constprop.0+0xf4>)
 8006f04:	4628      	mov	r0, r5
 8006f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f0a:	5de6      	ldrb	r6, [r4, r7]
 8006f0c:	f016 0608 	ands.w	r6, r6, #8
 8006f10:	d1f8      	bne.n	8006f04 <_strtol_l.constprop.0+0x20>
 8006f12:	2c2d      	cmp	r4, #45	; 0x2d
 8006f14:	d12f      	bne.n	8006f76 <_strtol_l.constprop.0+0x92>
 8006f16:	2601      	movs	r6, #1
 8006f18:	782c      	ldrb	r4, [r5, #0]
 8006f1a:	1c85      	adds	r5, r0, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d057      	beq.n	8006fd0 <_strtol_l.constprop.0+0xec>
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d109      	bne.n	8006f38 <_strtol_l.constprop.0+0x54>
 8006f24:	2c30      	cmp	r4, #48	; 0x30
 8006f26:	d107      	bne.n	8006f38 <_strtol_l.constprop.0+0x54>
 8006f28:	7828      	ldrb	r0, [r5, #0]
 8006f2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006f2e:	2858      	cmp	r0, #88	; 0x58
 8006f30:	d149      	bne.n	8006fc6 <_strtol_l.constprop.0+0xe2>
 8006f32:	2310      	movs	r3, #16
 8006f34:	786c      	ldrb	r4, [r5, #1]
 8006f36:	3502      	adds	r5, #2
 8006f38:	2700      	movs	r7, #0
 8006f3a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006f3e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006f42:	fbbe f9f3 	udiv	r9, lr, r3
 8006f46:	4638      	mov	r0, r7
 8006f48:	fb03 ea19 	mls	sl, r3, r9, lr
 8006f4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006f50:	f1bc 0f09 	cmp.w	ip, #9
 8006f54:	d814      	bhi.n	8006f80 <_strtol_l.constprop.0+0x9c>
 8006f56:	4664      	mov	r4, ip
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	dd22      	ble.n	8006fa2 <_strtol_l.constprop.0+0xbe>
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	db1d      	blt.n	8006f9c <_strtol_l.constprop.0+0xb8>
 8006f60:	4581      	cmp	r9, r0
 8006f62:	d31b      	bcc.n	8006f9c <_strtol_l.constprop.0+0xb8>
 8006f64:	d101      	bne.n	8006f6a <_strtol_l.constprop.0+0x86>
 8006f66:	45a2      	cmp	sl, r4
 8006f68:	db18      	blt.n	8006f9c <_strtol_l.constprop.0+0xb8>
 8006f6a:	2701      	movs	r7, #1
 8006f6c:	fb00 4003 	mla	r0, r0, r3, r4
 8006f70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f74:	e7ea      	b.n	8006f4c <_strtol_l.constprop.0+0x68>
 8006f76:	2c2b      	cmp	r4, #43	; 0x2b
 8006f78:	bf04      	itt	eq
 8006f7a:	782c      	ldrbeq	r4, [r5, #0]
 8006f7c:	1c85      	addeq	r5, r0, #2
 8006f7e:	e7cd      	b.n	8006f1c <_strtol_l.constprop.0+0x38>
 8006f80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006f84:	f1bc 0f19 	cmp.w	ip, #25
 8006f88:	d801      	bhi.n	8006f8e <_strtol_l.constprop.0+0xaa>
 8006f8a:	3c37      	subs	r4, #55	; 0x37
 8006f8c:	e7e4      	b.n	8006f58 <_strtol_l.constprop.0+0x74>
 8006f8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006f92:	f1bc 0f19 	cmp.w	ip, #25
 8006f96:	d804      	bhi.n	8006fa2 <_strtol_l.constprop.0+0xbe>
 8006f98:	3c57      	subs	r4, #87	; 0x57
 8006f9a:	e7dd      	b.n	8006f58 <_strtol_l.constprop.0+0x74>
 8006f9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006fa0:	e7e6      	b.n	8006f70 <_strtol_l.constprop.0+0x8c>
 8006fa2:	2f00      	cmp	r7, #0
 8006fa4:	da07      	bge.n	8006fb6 <_strtol_l.constprop.0+0xd2>
 8006fa6:	2322      	movs	r3, #34	; 0x22
 8006fa8:	4670      	mov	r0, lr
 8006faa:	f8c8 3000 	str.w	r3, [r8]
 8006fae:	2a00      	cmp	r2, #0
 8006fb0:	d0a4      	beq.n	8006efc <_strtol_l.constprop.0+0x18>
 8006fb2:	1e69      	subs	r1, r5, #1
 8006fb4:	e005      	b.n	8006fc2 <_strtol_l.constprop.0+0xde>
 8006fb6:	b106      	cbz	r6, 8006fba <_strtol_l.constprop.0+0xd6>
 8006fb8:	4240      	negs	r0, r0
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	d09e      	beq.n	8006efc <_strtol_l.constprop.0+0x18>
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d1f7      	bne.n	8006fb2 <_strtol_l.constprop.0+0xce>
 8006fc2:	6011      	str	r1, [r2, #0]
 8006fc4:	e79a      	b.n	8006efc <_strtol_l.constprop.0+0x18>
 8006fc6:	2430      	movs	r4, #48	; 0x30
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1b5      	bne.n	8006f38 <_strtol_l.constprop.0+0x54>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	e7b3      	b.n	8006f38 <_strtol_l.constprop.0+0x54>
 8006fd0:	2c30      	cmp	r4, #48	; 0x30
 8006fd2:	d0a9      	beq.n	8006f28 <_strtol_l.constprop.0+0x44>
 8006fd4:	230a      	movs	r3, #10
 8006fd6:	e7af      	b.n	8006f38 <_strtol_l.constprop.0+0x54>
 8006fd8:	08009f19 	.word	0x08009f19

08006fdc <_strtol_r>:
 8006fdc:	f7ff bf82 	b.w	8006ee4 <_strtol_l.constprop.0>

08006fe0 <quorem>:
 8006fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	6903      	ldr	r3, [r0, #16]
 8006fe6:	690c      	ldr	r4, [r1, #16]
 8006fe8:	4607      	mov	r7, r0
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	f2c0 8082 	blt.w	80070f4 <quorem+0x114>
 8006ff0:	3c01      	subs	r4, #1
 8006ff2:	f100 0514 	add.w	r5, r0, #20
 8006ff6:	f101 0814 	add.w	r8, r1, #20
 8006ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007008:	3301      	adds	r3, #1
 800700a:	429a      	cmp	r2, r3
 800700c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007010:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007014:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007018:	d331      	bcc.n	800707e <quorem+0x9e>
 800701a:	f04f 0e00 	mov.w	lr, #0
 800701e:	4640      	mov	r0, r8
 8007020:	46ac      	mov	ip, r5
 8007022:	46f2      	mov	sl, lr
 8007024:	f850 2b04 	ldr.w	r2, [r0], #4
 8007028:	b293      	uxth	r3, r2
 800702a:	fb06 e303 	mla	r3, r6, r3, lr
 800702e:	0c12      	lsrs	r2, r2, #16
 8007030:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007034:	b29b      	uxth	r3, r3
 8007036:	fb06 e202 	mla	r2, r6, r2, lr
 800703a:	ebaa 0303 	sub.w	r3, sl, r3
 800703e:	f8dc a000 	ldr.w	sl, [ip]
 8007042:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007046:	fa1f fa8a 	uxth.w	sl, sl
 800704a:	4453      	add	r3, sl
 800704c:	f8dc a000 	ldr.w	sl, [ip]
 8007050:	b292      	uxth	r2, r2
 8007052:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800705a:	b29b      	uxth	r3, r3
 800705c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007060:	4581      	cmp	r9, r0
 8007062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007066:	f84c 3b04 	str.w	r3, [ip], #4
 800706a:	d2db      	bcs.n	8007024 <quorem+0x44>
 800706c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007070:	b92b      	cbnz	r3, 800707e <quorem+0x9e>
 8007072:	9b01      	ldr	r3, [sp, #4]
 8007074:	3b04      	subs	r3, #4
 8007076:	429d      	cmp	r5, r3
 8007078:	461a      	mov	r2, r3
 800707a:	d32f      	bcc.n	80070dc <quorem+0xfc>
 800707c:	613c      	str	r4, [r7, #16]
 800707e:	4638      	mov	r0, r7
 8007080:	f001 fc90 	bl	80089a4 <__mcmp>
 8007084:	2800      	cmp	r0, #0
 8007086:	db25      	blt.n	80070d4 <quorem+0xf4>
 8007088:	4628      	mov	r0, r5
 800708a:	f04f 0c00 	mov.w	ip, #0
 800708e:	3601      	adds	r6, #1
 8007090:	f858 1b04 	ldr.w	r1, [r8], #4
 8007094:	f8d0 e000 	ldr.w	lr, [r0]
 8007098:	b28b      	uxth	r3, r1
 800709a:	ebac 0303 	sub.w	r3, ip, r3
 800709e:	fa1f f28e 	uxth.w	r2, lr
 80070a2:	4413      	add	r3, r2
 80070a4:	0c0a      	lsrs	r2, r1, #16
 80070a6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070b4:	45c1      	cmp	r9, r8
 80070b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070ba:	f840 3b04 	str.w	r3, [r0], #4
 80070be:	d2e7      	bcs.n	8007090 <quorem+0xb0>
 80070c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070c8:	b922      	cbnz	r2, 80070d4 <quorem+0xf4>
 80070ca:	3b04      	subs	r3, #4
 80070cc:	429d      	cmp	r5, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	d30a      	bcc.n	80070e8 <quorem+0x108>
 80070d2:	613c      	str	r4, [r7, #16]
 80070d4:	4630      	mov	r0, r6
 80070d6:	b003      	add	sp, #12
 80070d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	3b04      	subs	r3, #4
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	d1cb      	bne.n	800707c <quorem+0x9c>
 80070e4:	3c01      	subs	r4, #1
 80070e6:	e7c6      	b.n	8007076 <quorem+0x96>
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	3b04      	subs	r3, #4
 80070ec:	2a00      	cmp	r2, #0
 80070ee:	d1f0      	bne.n	80070d2 <quorem+0xf2>
 80070f0:	3c01      	subs	r4, #1
 80070f2:	e7eb      	b.n	80070cc <quorem+0xec>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e7ee      	b.n	80070d6 <quorem+0xf6>

080070f8 <_dtoa_r>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	4616      	mov	r6, r2
 80070fe:	461f      	mov	r7, r3
 8007100:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007102:	b099      	sub	sp, #100	; 0x64
 8007104:	4605      	mov	r5, r0
 8007106:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800710a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800710e:	b974      	cbnz	r4, 800712e <_dtoa_r+0x36>
 8007110:	2010      	movs	r0, #16
 8007112:	f001 f949 	bl	80083a8 <malloc>
 8007116:	4602      	mov	r2, r0
 8007118:	6268      	str	r0, [r5, #36]	; 0x24
 800711a:	b920      	cbnz	r0, 8007126 <_dtoa_r+0x2e>
 800711c:	21ea      	movs	r1, #234	; 0xea
 800711e:	4ba8      	ldr	r3, [pc, #672]	; (80073c0 <_dtoa_r+0x2c8>)
 8007120:	48a8      	ldr	r0, [pc, #672]	; (80073c4 <_dtoa_r+0x2cc>)
 8007122:	f002 f8b3 	bl	800928c <__assert_func>
 8007126:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800712a:	6004      	str	r4, [r0, #0]
 800712c:	60c4      	str	r4, [r0, #12]
 800712e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007130:	6819      	ldr	r1, [r3, #0]
 8007132:	b151      	cbz	r1, 800714a <_dtoa_r+0x52>
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	2301      	movs	r3, #1
 8007138:	4093      	lsls	r3, r2
 800713a:	604a      	str	r2, [r1, #4]
 800713c:	608b      	str	r3, [r1, #8]
 800713e:	4628      	mov	r0, r5
 8007140:	f001 f9a8 	bl	8008494 <_Bfree>
 8007144:	2200      	movs	r2, #0
 8007146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	1e3b      	subs	r3, r7, #0
 800714c:	bfaf      	iteee	ge
 800714e:	2300      	movge	r3, #0
 8007150:	2201      	movlt	r2, #1
 8007152:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007156:	9305      	strlt	r3, [sp, #20]
 8007158:	bfa8      	it	ge
 800715a:	f8c8 3000 	strge.w	r3, [r8]
 800715e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007162:	4b99      	ldr	r3, [pc, #612]	; (80073c8 <_dtoa_r+0x2d0>)
 8007164:	bfb8      	it	lt
 8007166:	f8c8 2000 	strlt.w	r2, [r8]
 800716a:	ea33 0309 	bics.w	r3, r3, r9
 800716e:	d119      	bne.n	80071a4 <_dtoa_r+0xac>
 8007170:	f242 730f 	movw	r3, #9999	; 0x270f
 8007174:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800717c:	4333      	orrs	r3, r6
 800717e:	f000 857f 	beq.w	8007c80 <_dtoa_r+0xb88>
 8007182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007184:	b953      	cbnz	r3, 800719c <_dtoa_r+0xa4>
 8007186:	4b91      	ldr	r3, [pc, #580]	; (80073cc <_dtoa_r+0x2d4>)
 8007188:	e022      	b.n	80071d0 <_dtoa_r+0xd8>
 800718a:	4b91      	ldr	r3, [pc, #580]	; (80073d0 <_dtoa_r+0x2d8>)
 800718c:	9303      	str	r3, [sp, #12]
 800718e:	3308      	adds	r3, #8
 8007190:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	9803      	ldr	r0, [sp, #12]
 8007196:	b019      	add	sp, #100	; 0x64
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	4b8b      	ldr	r3, [pc, #556]	; (80073cc <_dtoa_r+0x2d4>)
 800719e:	9303      	str	r3, [sp, #12]
 80071a0:	3303      	adds	r3, #3
 80071a2:	e7f5      	b.n	8007190 <_dtoa_r+0x98>
 80071a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80071ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	2300      	movs	r3, #0
 80071b4:	f7f9 fcac 	bl	8000b10 <__aeabi_dcmpeq>
 80071b8:	4680      	mov	r8, r0
 80071ba:	b158      	cbz	r0, 80071d4 <_dtoa_r+0xdc>
 80071bc:	2301      	movs	r3, #1
 80071be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 8558 	beq.w	8007c7a <_dtoa_r+0xb82>
 80071ca:	4882      	ldr	r0, [pc, #520]	; (80073d4 <_dtoa_r+0x2dc>)
 80071cc:	6018      	str	r0, [r3, #0]
 80071ce:	1e43      	subs	r3, r0, #1
 80071d0:	9303      	str	r3, [sp, #12]
 80071d2:	e7df      	b.n	8007194 <_dtoa_r+0x9c>
 80071d4:	ab16      	add	r3, sp, #88	; 0x58
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	ab17      	add	r3, sp, #92	; 0x5c
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4628      	mov	r0, r5
 80071de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071e2:	f001 fd01 	bl	8008be8 <__d2b>
 80071e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071ea:	4683      	mov	fp, r0
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	d07f      	beq.n	80072f0 <_dtoa_r+0x1f8>
 80071f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007202:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007206:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800720a:	2200      	movs	r2, #0
 800720c:	4b72      	ldr	r3, [pc, #456]	; (80073d8 <_dtoa_r+0x2e0>)
 800720e:	f7f9 f85f 	bl	80002d0 <__aeabi_dsub>
 8007212:	a365      	add	r3, pc, #404	; (adr r3, 80073a8 <_dtoa_r+0x2b0>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 fa12 	bl	8000640 <__aeabi_dmul>
 800721c:	a364      	add	r3, pc, #400	; (adr r3, 80073b0 <_dtoa_r+0x2b8>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f7f9 f857 	bl	80002d4 <__adddf3>
 8007226:	4606      	mov	r6, r0
 8007228:	4620      	mov	r0, r4
 800722a:	460f      	mov	r7, r1
 800722c:	f7f9 f99e 	bl	800056c <__aeabi_i2d>
 8007230:	a361      	add	r3, pc, #388	; (adr r3, 80073b8 <_dtoa_r+0x2c0>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 fa03 	bl	8000640 <__aeabi_dmul>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4630      	mov	r0, r6
 8007240:	4639      	mov	r1, r7
 8007242:	f7f9 f847 	bl	80002d4 <__adddf3>
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	f7f9 fca9 	bl	8000ba0 <__aeabi_d2iz>
 800724e:	2200      	movs	r2, #0
 8007250:	4682      	mov	sl, r0
 8007252:	2300      	movs	r3, #0
 8007254:	4630      	mov	r0, r6
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 fc64 	bl	8000b24 <__aeabi_dcmplt>
 800725c:	b148      	cbz	r0, 8007272 <_dtoa_r+0x17a>
 800725e:	4650      	mov	r0, sl
 8007260:	f7f9 f984 	bl	800056c <__aeabi_i2d>
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	f7f9 fc52 	bl	8000b10 <__aeabi_dcmpeq>
 800726c:	b908      	cbnz	r0, 8007272 <_dtoa_r+0x17a>
 800726e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007272:	f1ba 0f16 	cmp.w	sl, #22
 8007276:	d858      	bhi.n	800732a <_dtoa_r+0x232>
 8007278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800727c:	4b57      	ldr	r3, [pc, #348]	; (80073dc <_dtoa_r+0x2e4>)
 800727e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 fc4d 	bl	8000b24 <__aeabi_dcmplt>
 800728a:	2800      	cmp	r0, #0
 800728c:	d04f      	beq.n	800732e <_dtoa_r+0x236>
 800728e:	2300      	movs	r3, #0
 8007290:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007294:	930f      	str	r3, [sp, #60]	; 0x3c
 8007296:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007298:	1b1c      	subs	r4, r3, r4
 800729a:	1e63      	subs	r3, r4, #1
 800729c:	9309      	str	r3, [sp, #36]	; 0x24
 800729e:	bf49      	itett	mi
 80072a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80072a4:	2300      	movpl	r3, #0
 80072a6:	9306      	strmi	r3, [sp, #24]
 80072a8:	2300      	movmi	r3, #0
 80072aa:	bf54      	ite	pl
 80072ac:	9306      	strpl	r3, [sp, #24]
 80072ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80072b0:	f1ba 0f00 	cmp.w	sl, #0
 80072b4:	db3d      	blt.n	8007332 <_dtoa_r+0x23a>
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80072bc:	4453      	add	r3, sl
 80072be:	9309      	str	r3, [sp, #36]	; 0x24
 80072c0:	2300      	movs	r3, #0
 80072c2:	930a      	str	r3, [sp, #40]	; 0x28
 80072c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	f200 808c 	bhi.w	80073e4 <_dtoa_r+0x2ec>
 80072cc:	2b05      	cmp	r3, #5
 80072ce:	bfc4      	itt	gt
 80072d0:	3b04      	subgt	r3, #4
 80072d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80072d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072d6:	bfc8      	it	gt
 80072d8:	2400      	movgt	r4, #0
 80072da:	f1a3 0302 	sub.w	r3, r3, #2
 80072de:	bfd8      	it	le
 80072e0:	2401      	movle	r4, #1
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	f200 808a 	bhi.w	80073fc <_dtoa_r+0x304>
 80072e8:	e8df f003 	tbb	[pc, r3]
 80072ec:	5b4d4f2d 	.word	0x5b4d4f2d
 80072f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80072f4:	441c      	add	r4, r3
 80072f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	bfc3      	ittte	gt
 80072fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007302:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007306:	fa09 f303 	lslgt.w	r3, r9, r3
 800730a:	f1c3 0320 	rsble	r3, r3, #32
 800730e:	bfc6      	itte	gt
 8007310:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007314:	4318      	orrgt	r0, r3
 8007316:	fa06 f003 	lslle.w	r0, r6, r3
 800731a:	f7f9 f917 	bl	800054c <__aeabi_ui2d>
 800731e:	2301      	movs	r3, #1
 8007320:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007324:	3c01      	subs	r4, #1
 8007326:	9313      	str	r3, [sp, #76]	; 0x4c
 8007328:	e76f      	b.n	800720a <_dtoa_r+0x112>
 800732a:	2301      	movs	r3, #1
 800732c:	e7b2      	b.n	8007294 <_dtoa_r+0x19c>
 800732e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007330:	e7b1      	b.n	8007296 <_dtoa_r+0x19e>
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	eba3 030a 	sub.w	r3, r3, sl
 8007338:	9306      	str	r3, [sp, #24]
 800733a:	f1ca 0300 	rsb	r3, sl, #0
 800733e:	930a      	str	r3, [sp, #40]	; 0x28
 8007340:	2300      	movs	r3, #0
 8007342:	930e      	str	r3, [sp, #56]	; 0x38
 8007344:	e7be      	b.n	80072c4 <_dtoa_r+0x1cc>
 8007346:	2300      	movs	r3, #0
 8007348:	930b      	str	r3, [sp, #44]	; 0x2c
 800734a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800734c:	2b00      	cmp	r3, #0
 800734e:	dc58      	bgt.n	8007402 <_dtoa_r+0x30a>
 8007350:	f04f 0901 	mov.w	r9, #1
 8007354:	464b      	mov	r3, r9
 8007356:	f8cd 9020 	str.w	r9, [sp, #32]
 800735a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800735e:	2200      	movs	r2, #0
 8007360:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007362:	6042      	str	r2, [r0, #4]
 8007364:	2204      	movs	r2, #4
 8007366:	f102 0614 	add.w	r6, r2, #20
 800736a:	429e      	cmp	r6, r3
 800736c:	6841      	ldr	r1, [r0, #4]
 800736e:	d94e      	bls.n	800740e <_dtoa_r+0x316>
 8007370:	4628      	mov	r0, r5
 8007372:	f001 f84f 	bl	8008414 <_Balloc>
 8007376:	9003      	str	r0, [sp, #12]
 8007378:	2800      	cmp	r0, #0
 800737a:	d14c      	bne.n	8007416 <_dtoa_r+0x31e>
 800737c:	4602      	mov	r2, r0
 800737e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007382:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <_dtoa_r+0x2e8>)
 8007384:	e6cc      	b.n	8007120 <_dtoa_r+0x28>
 8007386:	2301      	movs	r3, #1
 8007388:	e7de      	b.n	8007348 <_dtoa_r+0x250>
 800738a:	2300      	movs	r3, #0
 800738c:	930b      	str	r3, [sp, #44]	; 0x2c
 800738e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007390:	eb0a 0903 	add.w	r9, sl, r3
 8007394:	f109 0301 	add.w	r3, r9, #1
 8007398:	2b01      	cmp	r3, #1
 800739a:	9308      	str	r3, [sp, #32]
 800739c:	bfb8      	it	lt
 800739e:	2301      	movlt	r3, #1
 80073a0:	e7dd      	b.n	800735e <_dtoa_r+0x266>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7f2      	b.n	800738c <_dtoa_r+0x294>
 80073a6:	bf00      	nop
 80073a8:	636f4361 	.word	0x636f4361
 80073ac:	3fd287a7 	.word	0x3fd287a7
 80073b0:	8b60c8b3 	.word	0x8b60c8b3
 80073b4:	3fc68a28 	.word	0x3fc68a28
 80073b8:	509f79fb 	.word	0x509f79fb
 80073bc:	3fd34413 	.word	0x3fd34413
 80073c0:	0800a026 	.word	0x0800a026
 80073c4:	0800a03d 	.word	0x0800a03d
 80073c8:	7ff00000 	.word	0x7ff00000
 80073cc:	0800a022 	.word	0x0800a022
 80073d0:	0800a019 	.word	0x0800a019
 80073d4:	08009e9d 	.word	0x08009e9d
 80073d8:	3ff80000 	.word	0x3ff80000
 80073dc:	0800a1a8 	.word	0x0800a1a8
 80073e0:	0800a098 	.word	0x0800a098
 80073e4:	2401      	movs	r4, #1
 80073e6:	2300      	movs	r3, #0
 80073e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80073ea:	9322      	str	r3, [sp, #136]	; 0x88
 80073ec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80073f0:	2200      	movs	r2, #0
 80073f2:	2312      	movs	r3, #18
 80073f4:	f8cd 9020 	str.w	r9, [sp, #32]
 80073f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80073fa:	e7b0      	b.n	800735e <_dtoa_r+0x266>
 80073fc:	2301      	movs	r3, #1
 80073fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007400:	e7f4      	b.n	80073ec <_dtoa_r+0x2f4>
 8007402:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007406:	464b      	mov	r3, r9
 8007408:	f8cd 9020 	str.w	r9, [sp, #32]
 800740c:	e7a7      	b.n	800735e <_dtoa_r+0x266>
 800740e:	3101      	adds	r1, #1
 8007410:	6041      	str	r1, [r0, #4]
 8007412:	0052      	lsls	r2, r2, #1
 8007414:	e7a7      	b.n	8007366 <_dtoa_r+0x26e>
 8007416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007418:	9a03      	ldr	r2, [sp, #12]
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	9b08      	ldr	r3, [sp, #32]
 800741e:	2b0e      	cmp	r3, #14
 8007420:	f200 80a8 	bhi.w	8007574 <_dtoa_r+0x47c>
 8007424:	2c00      	cmp	r4, #0
 8007426:	f000 80a5 	beq.w	8007574 <_dtoa_r+0x47c>
 800742a:	f1ba 0f00 	cmp.w	sl, #0
 800742e:	dd34      	ble.n	800749a <_dtoa_r+0x3a2>
 8007430:	4a9a      	ldr	r2, [pc, #616]	; (800769c <_dtoa_r+0x5a4>)
 8007432:	f00a 030f 	and.w	r3, sl, #15
 8007436:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800743a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800743e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007442:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007446:	ea4f 142a 	mov.w	r4, sl, asr #4
 800744a:	d016      	beq.n	800747a <_dtoa_r+0x382>
 800744c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007450:	4b93      	ldr	r3, [pc, #588]	; (80076a0 <_dtoa_r+0x5a8>)
 8007452:	2703      	movs	r7, #3
 8007454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007458:	f7f9 fa1c 	bl	8000894 <__aeabi_ddiv>
 800745c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007460:	f004 040f 	and.w	r4, r4, #15
 8007464:	4e8e      	ldr	r6, [pc, #568]	; (80076a0 <_dtoa_r+0x5a8>)
 8007466:	b954      	cbnz	r4, 800747e <_dtoa_r+0x386>
 8007468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800746c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007470:	f7f9 fa10 	bl	8000894 <__aeabi_ddiv>
 8007474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007478:	e029      	b.n	80074ce <_dtoa_r+0x3d6>
 800747a:	2702      	movs	r7, #2
 800747c:	e7f2      	b.n	8007464 <_dtoa_r+0x36c>
 800747e:	07e1      	lsls	r1, r4, #31
 8007480:	d508      	bpl.n	8007494 <_dtoa_r+0x39c>
 8007482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800748a:	f7f9 f8d9 	bl	8000640 <__aeabi_dmul>
 800748e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007492:	3701      	adds	r7, #1
 8007494:	1064      	asrs	r4, r4, #1
 8007496:	3608      	adds	r6, #8
 8007498:	e7e5      	b.n	8007466 <_dtoa_r+0x36e>
 800749a:	f000 80a5 	beq.w	80075e8 <_dtoa_r+0x4f0>
 800749e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074a2:	f1ca 0400 	rsb	r4, sl, #0
 80074a6:	4b7d      	ldr	r3, [pc, #500]	; (800769c <_dtoa_r+0x5a4>)
 80074a8:	f004 020f 	and.w	r2, r4, #15
 80074ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f9 f8c4 	bl	8000640 <__aeabi_dmul>
 80074b8:	2702      	movs	r7, #2
 80074ba:	2300      	movs	r3, #0
 80074bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c0:	4e77      	ldr	r6, [pc, #476]	; (80076a0 <_dtoa_r+0x5a8>)
 80074c2:	1124      	asrs	r4, r4, #4
 80074c4:	2c00      	cmp	r4, #0
 80074c6:	f040 8084 	bne.w	80075d2 <_dtoa_r+0x4da>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1d2      	bne.n	8007474 <_dtoa_r+0x37c>
 80074ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 808b 	beq.w	80075ec <_dtoa_r+0x4f4>
 80074d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074e2:	2200      	movs	r2, #0
 80074e4:	4b6f      	ldr	r3, [pc, #444]	; (80076a4 <_dtoa_r+0x5ac>)
 80074e6:	f7f9 fb1d 	bl	8000b24 <__aeabi_dcmplt>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d07e      	beq.n	80075ec <_dtoa_r+0x4f4>
 80074ee:	9b08      	ldr	r3, [sp, #32]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d07b      	beq.n	80075ec <_dtoa_r+0x4f4>
 80074f4:	f1b9 0f00 	cmp.w	r9, #0
 80074f8:	dd38      	ble.n	800756c <_dtoa_r+0x474>
 80074fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074fe:	2200      	movs	r2, #0
 8007500:	4b69      	ldr	r3, [pc, #420]	; (80076a8 <_dtoa_r+0x5b0>)
 8007502:	f7f9 f89d 	bl	8000640 <__aeabi_dmul>
 8007506:	464c      	mov	r4, r9
 8007508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800750c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8007510:	3701      	adds	r7, #1
 8007512:	4638      	mov	r0, r7
 8007514:	f7f9 f82a 	bl	800056c <__aeabi_i2d>
 8007518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800751c:	f7f9 f890 	bl	8000640 <__aeabi_dmul>
 8007520:	2200      	movs	r2, #0
 8007522:	4b62      	ldr	r3, [pc, #392]	; (80076ac <_dtoa_r+0x5b4>)
 8007524:	f7f8 fed6 	bl	80002d4 <__adddf3>
 8007528:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800752c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007530:	9611      	str	r6, [sp, #68]	; 0x44
 8007532:	2c00      	cmp	r4, #0
 8007534:	d15d      	bne.n	80075f2 <_dtoa_r+0x4fa>
 8007536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800753a:	2200      	movs	r2, #0
 800753c:	4b5c      	ldr	r3, [pc, #368]	; (80076b0 <_dtoa_r+0x5b8>)
 800753e:	f7f8 fec7 	bl	80002d0 <__aeabi_dsub>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800754a:	4633      	mov	r3, r6
 800754c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800754e:	f7f9 fb07 	bl	8000b60 <__aeabi_dcmpgt>
 8007552:	2800      	cmp	r0, #0
 8007554:	f040 829c 	bne.w	8007a90 <_dtoa_r+0x998>
 8007558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800755c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800755e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007562:	f7f9 fadf 	bl	8000b24 <__aeabi_dcmplt>
 8007566:	2800      	cmp	r0, #0
 8007568:	f040 8290 	bne.w	8007a8c <_dtoa_r+0x994>
 800756c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007570:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007576:	2b00      	cmp	r3, #0
 8007578:	f2c0 8152 	blt.w	8007820 <_dtoa_r+0x728>
 800757c:	f1ba 0f0e 	cmp.w	sl, #14
 8007580:	f300 814e 	bgt.w	8007820 <_dtoa_r+0x728>
 8007584:	4b45      	ldr	r3, [pc, #276]	; (800769c <_dtoa_r+0x5a4>)
 8007586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800758a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800758e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007594:	2b00      	cmp	r3, #0
 8007596:	f280 80db 	bge.w	8007750 <_dtoa_r+0x658>
 800759a:	9b08      	ldr	r3, [sp, #32]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f300 80d7 	bgt.w	8007750 <_dtoa_r+0x658>
 80075a2:	f040 8272 	bne.w	8007a8a <_dtoa_r+0x992>
 80075a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075aa:	2200      	movs	r2, #0
 80075ac:	4b40      	ldr	r3, [pc, #256]	; (80076b0 <_dtoa_r+0x5b8>)
 80075ae:	f7f9 f847 	bl	8000640 <__aeabi_dmul>
 80075b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075b6:	f7f9 fac9 	bl	8000b4c <__aeabi_dcmpge>
 80075ba:	9c08      	ldr	r4, [sp, #32]
 80075bc:	4626      	mov	r6, r4
 80075be:	2800      	cmp	r0, #0
 80075c0:	f040 8248 	bne.w	8007a54 <_dtoa_r+0x95c>
 80075c4:	2331      	movs	r3, #49	; 0x31
 80075c6:	9f03      	ldr	r7, [sp, #12]
 80075c8:	f10a 0a01 	add.w	sl, sl, #1
 80075cc:	f807 3b01 	strb.w	r3, [r7], #1
 80075d0:	e244      	b.n	8007a5c <_dtoa_r+0x964>
 80075d2:	07e2      	lsls	r2, r4, #31
 80075d4:	d505      	bpl.n	80075e2 <_dtoa_r+0x4ea>
 80075d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075da:	f7f9 f831 	bl	8000640 <__aeabi_dmul>
 80075de:	2301      	movs	r3, #1
 80075e0:	3701      	adds	r7, #1
 80075e2:	1064      	asrs	r4, r4, #1
 80075e4:	3608      	adds	r6, #8
 80075e6:	e76d      	b.n	80074c4 <_dtoa_r+0x3cc>
 80075e8:	2702      	movs	r7, #2
 80075ea:	e770      	b.n	80074ce <_dtoa_r+0x3d6>
 80075ec:	46d0      	mov	r8, sl
 80075ee:	9c08      	ldr	r4, [sp, #32]
 80075f0:	e78f      	b.n	8007512 <_dtoa_r+0x41a>
 80075f2:	9903      	ldr	r1, [sp, #12]
 80075f4:	4b29      	ldr	r3, [pc, #164]	; (800769c <_dtoa_r+0x5a4>)
 80075f6:	4421      	add	r1, r4
 80075f8:	9112      	str	r1, [sp, #72]	; 0x48
 80075fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007600:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007604:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007608:	2900      	cmp	r1, #0
 800760a:	d055      	beq.n	80076b8 <_dtoa_r+0x5c0>
 800760c:	2000      	movs	r0, #0
 800760e:	4929      	ldr	r1, [pc, #164]	; (80076b4 <_dtoa_r+0x5bc>)
 8007610:	f7f9 f940 	bl	8000894 <__aeabi_ddiv>
 8007614:	463b      	mov	r3, r7
 8007616:	4632      	mov	r2, r6
 8007618:	f7f8 fe5a 	bl	80002d0 <__aeabi_dsub>
 800761c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007620:	9f03      	ldr	r7, [sp, #12]
 8007622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007626:	f7f9 fabb 	bl	8000ba0 <__aeabi_d2iz>
 800762a:	4604      	mov	r4, r0
 800762c:	f7f8 ff9e 	bl	800056c <__aeabi_i2d>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007638:	f7f8 fe4a 	bl	80002d0 <__aeabi_dsub>
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	3430      	adds	r4, #48	; 0x30
 8007642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800764a:	f807 4b01 	strb.w	r4, [r7], #1
 800764e:	f7f9 fa69 	bl	8000b24 <__aeabi_dcmplt>
 8007652:	2800      	cmp	r0, #0
 8007654:	d174      	bne.n	8007740 <_dtoa_r+0x648>
 8007656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800765a:	2000      	movs	r0, #0
 800765c:	4911      	ldr	r1, [pc, #68]	; (80076a4 <_dtoa_r+0x5ac>)
 800765e:	f7f8 fe37 	bl	80002d0 <__aeabi_dsub>
 8007662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007666:	f7f9 fa5d 	bl	8000b24 <__aeabi_dcmplt>
 800766a:	2800      	cmp	r0, #0
 800766c:	f040 80b7 	bne.w	80077de <_dtoa_r+0x6e6>
 8007670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007672:	429f      	cmp	r7, r3
 8007674:	f43f af7a 	beq.w	800756c <_dtoa_r+0x474>
 8007678:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800767c:	2200      	movs	r2, #0
 800767e:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <_dtoa_r+0x5b0>)
 8007680:	f7f8 ffde 	bl	8000640 <__aeabi_dmul>
 8007684:	2200      	movs	r2, #0
 8007686:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800768a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800768e:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <_dtoa_r+0x5b0>)
 8007690:	f7f8 ffd6 	bl	8000640 <__aeabi_dmul>
 8007694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007698:	e7c3      	b.n	8007622 <_dtoa_r+0x52a>
 800769a:	bf00      	nop
 800769c:	0800a1a8 	.word	0x0800a1a8
 80076a0:	0800a180 	.word	0x0800a180
 80076a4:	3ff00000 	.word	0x3ff00000
 80076a8:	40240000 	.word	0x40240000
 80076ac:	401c0000 	.word	0x401c0000
 80076b0:	40140000 	.word	0x40140000
 80076b4:	3fe00000 	.word	0x3fe00000
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f8 ffc0 	bl	8000640 <__aeabi_dmul>
 80076c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076c6:	9c03      	ldr	r4, [sp, #12]
 80076c8:	9314      	str	r3, [sp, #80]	; 0x50
 80076ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ce:	f7f9 fa67 	bl	8000ba0 <__aeabi_d2iz>
 80076d2:	9015      	str	r0, [sp, #84]	; 0x54
 80076d4:	f7f8 ff4a 	bl	800056c <__aeabi_i2d>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e0:	f7f8 fdf6 	bl	80002d0 <__aeabi_dsub>
 80076e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076e6:	4606      	mov	r6, r0
 80076e8:	3330      	adds	r3, #48	; 0x30
 80076ea:	f804 3b01 	strb.w	r3, [r4], #1
 80076ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076f0:	460f      	mov	r7, r1
 80076f2:	429c      	cmp	r4, r3
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	d124      	bne.n	8007744 <_dtoa_r+0x64c>
 80076fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076fe:	4bb0      	ldr	r3, [pc, #704]	; (80079c0 <_dtoa_r+0x8c8>)
 8007700:	f7f8 fde8 	bl	80002d4 <__adddf3>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	f7f9 fa28 	bl	8000b60 <__aeabi_dcmpgt>
 8007710:	2800      	cmp	r0, #0
 8007712:	d163      	bne.n	80077dc <_dtoa_r+0x6e4>
 8007714:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007718:	2000      	movs	r0, #0
 800771a:	49a9      	ldr	r1, [pc, #676]	; (80079c0 <_dtoa_r+0x8c8>)
 800771c:	f7f8 fdd8 	bl	80002d0 <__aeabi_dsub>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4630      	mov	r0, r6
 8007726:	4639      	mov	r1, r7
 8007728:	f7f9 f9fc 	bl	8000b24 <__aeabi_dcmplt>
 800772c:	2800      	cmp	r0, #0
 800772e:	f43f af1d 	beq.w	800756c <_dtoa_r+0x474>
 8007732:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007734:	1e7b      	subs	r3, r7, #1
 8007736:	9314      	str	r3, [sp, #80]	; 0x50
 8007738:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800773c:	2b30      	cmp	r3, #48	; 0x30
 800773e:	d0f8      	beq.n	8007732 <_dtoa_r+0x63a>
 8007740:	46c2      	mov	sl, r8
 8007742:	e03b      	b.n	80077bc <_dtoa_r+0x6c4>
 8007744:	4b9f      	ldr	r3, [pc, #636]	; (80079c4 <_dtoa_r+0x8cc>)
 8007746:	f7f8 ff7b 	bl	8000640 <__aeabi_dmul>
 800774a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800774e:	e7bc      	b.n	80076ca <_dtoa_r+0x5d2>
 8007750:	9f03      	ldr	r7, [sp, #12]
 8007752:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800775a:	4640      	mov	r0, r8
 800775c:	4649      	mov	r1, r9
 800775e:	f7f9 f899 	bl	8000894 <__aeabi_ddiv>
 8007762:	f7f9 fa1d 	bl	8000ba0 <__aeabi_d2iz>
 8007766:	4604      	mov	r4, r0
 8007768:	f7f8 ff00 	bl	800056c <__aeabi_i2d>
 800776c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007770:	f7f8 ff66 	bl	8000640 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f8 fda8 	bl	80002d0 <__aeabi_dsub>
 8007780:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007784:	f807 6b01 	strb.w	r6, [r7], #1
 8007788:	9e03      	ldr	r6, [sp, #12]
 800778a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800778e:	1bbe      	subs	r6, r7, r6
 8007790:	45b4      	cmp	ip, r6
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	d136      	bne.n	8007806 <_dtoa_r+0x70e>
 8007798:	f7f8 fd9c 	bl	80002d4 <__adddf3>
 800779c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077a0:	4680      	mov	r8, r0
 80077a2:	4689      	mov	r9, r1
 80077a4:	f7f9 f9dc 	bl	8000b60 <__aeabi_dcmpgt>
 80077a8:	bb58      	cbnz	r0, 8007802 <_dtoa_r+0x70a>
 80077aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077ae:	4640      	mov	r0, r8
 80077b0:	4649      	mov	r1, r9
 80077b2:	f7f9 f9ad 	bl	8000b10 <__aeabi_dcmpeq>
 80077b6:	b108      	cbz	r0, 80077bc <_dtoa_r+0x6c4>
 80077b8:	07e1      	lsls	r1, r4, #31
 80077ba:	d422      	bmi.n	8007802 <_dtoa_r+0x70a>
 80077bc:	4628      	mov	r0, r5
 80077be:	4659      	mov	r1, fp
 80077c0:	f000 fe68 	bl	8008494 <_Bfree>
 80077c4:	2300      	movs	r3, #0
 80077c6:	703b      	strb	r3, [r7, #0]
 80077c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077ca:	f10a 0001 	add.w	r0, sl, #1
 80077ce:	6018      	str	r0, [r3, #0]
 80077d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f43f acde 	beq.w	8007194 <_dtoa_r+0x9c>
 80077d8:	601f      	str	r7, [r3, #0]
 80077da:	e4db      	b.n	8007194 <_dtoa_r+0x9c>
 80077dc:	4627      	mov	r7, r4
 80077de:	463b      	mov	r3, r7
 80077e0:	461f      	mov	r7, r3
 80077e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e6:	2a39      	cmp	r2, #57	; 0x39
 80077e8:	d107      	bne.n	80077fa <_dtoa_r+0x702>
 80077ea:	9a03      	ldr	r2, [sp, #12]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d1f7      	bne.n	80077e0 <_dtoa_r+0x6e8>
 80077f0:	2230      	movs	r2, #48	; 0x30
 80077f2:	9903      	ldr	r1, [sp, #12]
 80077f4:	f108 0801 	add.w	r8, r8, #1
 80077f8:	700a      	strb	r2, [r1, #0]
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	3201      	adds	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e79e      	b.n	8007740 <_dtoa_r+0x648>
 8007802:	46d0      	mov	r8, sl
 8007804:	e7eb      	b.n	80077de <_dtoa_r+0x6e6>
 8007806:	2200      	movs	r2, #0
 8007808:	4b6e      	ldr	r3, [pc, #440]	; (80079c4 <_dtoa_r+0x8cc>)
 800780a:	f7f8 ff19 	bl	8000640 <__aeabi_dmul>
 800780e:	2200      	movs	r2, #0
 8007810:	2300      	movs	r3, #0
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	f7f9 f97b 	bl	8000b10 <__aeabi_dcmpeq>
 800781a:	2800      	cmp	r0, #0
 800781c:	d09b      	beq.n	8007756 <_dtoa_r+0x65e>
 800781e:	e7cd      	b.n	80077bc <_dtoa_r+0x6c4>
 8007820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007822:	2a00      	cmp	r2, #0
 8007824:	f000 80d0 	beq.w	80079c8 <_dtoa_r+0x8d0>
 8007828:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800782a:	2a01      	cmp	r2, #1
 800782c:	f300 80ae 	bgt.w	800798c <_dtoa_r+0x894>
 8007830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007832:	2a00      	cmp	r2, #0
 8007834:	f000 80a6 	beq.w	8007984 <_dtoa_r+0x88c>
 8007838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800783c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800783e:	9f06      	ldr	r7, [sp, #24]
 8007840:	9a06      	ldr	r2, [sp, #24]
 8007842:	2101      	movs	r1, #1
 8007844:	441a      	add	r2, r3
 8007846:	9206      	str	r2, [sp, #24]
 8007848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800784a:	4628      	mov	r0, r5
 800784c:	441a      	add	r2, r3
 800784e:	9209      	str	r2, [sp, #36]	; 0x24
 8007850:	f000 ff20 	bl	8008694 <__i2b>
 8007854:	4606      	mov	r6, r0
 8007856:	2f00      	cmp	r7, #0
 8007858:	dd0c      	ble.n	8007874 <_dtoa_r+0x77c>
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	2b00      	cmp	r3, #0
 800785e:	dd09      	ble.n	8007874 <_dtoa_r+0x77c>
 8007860:	42bb      	cmp	r3, r7
 8007862:	bfa8      	it	ge
 8007864:	463b      	movge	r3, r7
 8007866:	9a06      	ldr	r2, [sp, #24]
 8007868:	1aff      	subs	r7, r7, r3
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	9206      	str	r2, [sp, #24]
 800786e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	9309      	str	r3, [sp, #36]	; 0x24
 8007874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007876:	b1f3      	cbz	r3, 80078b6 <_dtoa_r+0x7be>
 8007878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 80a8 	beq.w	80079d0 <_dtoa_r+0x8d8>
 8007880:	2c00      	cmp	r4, #0
 8007882:	dd10      	ble.n	80078a6 <_dtoa_r+0x7ae>
 8007884:	4631      	mov	r1, r6
 8007886:	4622      	mov	r2, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 ffc1 	bl	8008810 <__pow5mult>
 800788e:	465a      	mov	r2, fp
 8007890:	4601      	mov	r1, r0
 8007892:	4606      	mov	r6, r0
 8007894:	4628      	mov	r0, r5
 8007896:	f000 ff13 	bl	80086c0 <__multiply>
 800789a:	4680      	mov	r8, r0
 800789c:	4659      	mov	r1, fp
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 fdf8 	bl	8008494 <_Bfree>
 80078a4:	46c3      	mov	fp, r8
 80078a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a8:	1b1a      	subs	r2, r3, r4
 80078aa:	d004      	beq.n	80078b6 <_dtoa_r+0x7be>
 80078ac:	4659      	mov	r1, fp
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 ffae 	bl	8008810 <__pow5mult>
 80078b4:	4683      	mov	fp, r0
 80078b6:	2101      	movs	r1, #1
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 feeb 	bl	8008694 <__i2b>
 80078be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c0:	4604      	mov	r4, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f340 8086 	ble.w	80079d4 <_dtoa_r+0x8dc>
 80078c8:	461a      	mov	r2, r3
 80078ca:	4601      	mov	r1, r0
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 ff9f 	bl	8008810 <__pow5mult>
 80078d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078d4:	4604      	mov	r4, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	dd7f      	ble.n	80079da <_dtoa_r+0x8e2>
 80078da:	f04f 0800 	mov.w	r8, #0
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078e4:	6918      	ldr	r0, [r3, #16]
 80078e6:	f000 fe87 	bl	80085f8 <__hi0bits>
 80078ea:	f1c0 0020 	rsb	r0, r0, #32
 80078ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f0:	4418      	add	r0, r3
 80078f2:	f010 001f 	ands.w	r0, r0, #31
 80078f6:	f000 8092 	beq.w	8007a1e <_dtoa_r+0x926>
 80078fa:	f1c0 0320 	rsb	r3, r0, #32
 80078fe:	2b04      	cmp	r3, #4
 8007900:	f340 808a 	ble.w	8007a18 <_dtoa_r+0x920>
 8007904:	f1c0 001c 	rsb	r0, r0, #28
 8007908:	9b06      	ldr	r3, [sp, #24]
 800790a:	4407      	add	r7, r0
 800790c:	4403      	add	r3, r0
 800790e:	9306      	str	r3, [sp, #24]
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	4403      	add	r3, r0
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	9b06      	ldr	r3, [sp, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	dd05      	ble.n	8007928 <_dtoa_r+0x830>
 800791c:	4659      	mov	r1, fp
 800791e:	461a      	mov	r2, r3
 8007920:	4628      	mov	r0, r5
 8007922:	f000 ffcf 	bl	80088c4 <__lshift>
 8007926:	4683      	mov	fp, r0
 8007928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792a:	2b00      	cmp	r3, #0
 800792c:	dd05      	ble.n	800793a <_dtoa_r+0x842>
 800792e:	4621      	mov	r1, r4
 8007930:	461a      	mov	r2, r3
 8007932:	4628      	mov	r0, r5
 8007934:	f000 ffc6 	bl	80088c4 <__lshift>
 8007938:	4604      	mov	r4, r0
 800793a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d070      	beq.n	8007a22 <_dtoa_r+0x92a>
 8007940:	4621      	mov	r1, r4
 8007942:	4658      	mov	r0, fp
 8007944:	f001 f82e 	bl	80089a4 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	da6a      	bge.n	8007a22 <_dtoa_r+0x92a>
 800794c:	2300      	movs	r3, #0
 800794e:	4659      	mov	r1, fp
 8007950:	220a      	movs	r2, #10
 8007952:	4628      	mov	r0, r5
 8007954:	f000 fdc0 	bl	80084d8 <__multadd>
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	4683      	mov	fp, r0
 800795c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8194 	beq.w	8007c8e <_dtoa_r+0xb96>
 8007966:	4631      	mov	r1, r6
 8007968:	2300      	movs	r3, #0
 800796a:	220a      	movs	r2, #10
 800796c:	4628      	mov	r0, r5
 800796e:	f000 fdb3 	bl	80084d8 <__multadd>
 8007972:	f1b9 0f00 	cmp.w	r9, #0
 8007976:	4606      	mov	r6, r0
 8007978:	f300 8093 	bgt.w	8007aa2 <_dtoa_r+0x9aa>
 800797c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800797e:	2b02      	cmp	r3, #2
 8007980:	dc57      	bgt.n	8007a32 <_dtoa_r+0x93a>
 8007982:	e08e      	b.n	8007aa2 <_dtoa_r+0x9aa>
 8007984:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800798a:	e757      	b.n	800783c <_dtoa_r+0x744>
 800798c:	9b08      	ldr	r3, [sp, #32]
 800798e:	1e5c      	subs	r4, r3, #1
 8007990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007992:	42a3      	cmp	r3, r4
 8007994:	bfb7      	itett	lt
 8007996:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007998:	1b1c      	subge	r4, r3, r4
 800799a:	1ae2      	sublt	r2, r4, r3
 800799c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800799e:	bfbe      	ittt	lt
 80079a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80079a2:	189b      	addlt	r3, r3, r2
 80079a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80079a6:	9b08      	ldr	r3, [sp, #32]
 80079a8:	bfb8      	it	lt
 80079aa:	2400      	movlt	r4, #0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bfbb      	ittet	lt
 80079b0:	9b06      	ldrlt	r3, [sp, #24]
 80079b2:	9a08      	ldrlt	r2, [sp, #32]
 80079b4:	9f06      	ldrge	r7, [sp, #24]
 80079b6:	1a9f      	sublt	r7, r3, r2
 80079b8:	bfac      	ite	ge
 80079ba:	9b08      	ldrge	r3, [sp, #32]
 80079bc:	2300      	movlt	r3, #0
 80079be:	e73f      	b.n	8007840 <_dtoa_r+0x748>
 80079c0:	3fe00000 	.word	0x3fe00000
 80079c4:	40240000 	.word	0x40240000
 80079c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079ca:	9f06      	ldr	r7, [sp, #24]
 80079cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80079ce:	e742      	b.n	8007856 <_dtoa_r+0x75e>
 80079d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d2:	e76b      	b.n	80078ac <_dtoa_r+0x7b4>
 80079d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	dc19      	bgt.n	8007a0e <_dtoa_r+0x916>
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	b9bb      	cbnz	r3, 8007a0e <_dtoa_r+0x916>
 80079de:	9b05      	ldr	r3, [sp, #20]
 80079e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079e4:	b99b      	cbnz	r3, 8007a0e <_dtoa_r+0x916>
 80079e6:	9b05      	ldr	r3, [sp, #20]
 80079e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	051b      	lsls	r3, r3, #20
 80079f0:	b183      	cbz	r3, 8007a14 <_dtoa_r+0x91c>
 80079f2:	f04f 0801 	mov.w	r8, #1
 80079f6:	9b06      	ldr	r3, [sp, #24]
 80079f8:	3301      	adds	r3, #1
 80079fa:	9306      	str	r3, [sp, #24]
 80079fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fe:	3301      	adds	r3, #1
 8007a00:	9309      	str	r3, [sp, #36]	; 0x24
 8007a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f47f af6a 	bne.w	80078de <_dtoa_r+0x7e6>
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	e76f      	b.n	80078ee <_dtoa_r+0x7f6>
 8007a0e:	f04f 0800 	mov.w	r8, #0
 8007a12:	e7f6      	b.n	8007a02 <_dtoa_r+0x90a>
 8007a14:	4698      	mov	r8, r3
 8007a16:	e7f4      	b.n	8007a02 <_dtoa_r+0x90a>
 8007a18:	f43f af7d 	beq.w	8007916 <_dtoa_r+0x81e>
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	301c      	adds	r0, #28
 8007a20:	e772      	b.n	8007908 <_dtoa_r+0x810>
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dc36      	bgt.n	8007a96 <_dtoa_r+0x99e>
 8007a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	dd33      	ble.n	8007a96 <_dtoa_r+0x99e>
 8007a2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a32:	f1b9 0f00 	cmp.w	r9, #0
 8007a36:	d10d      	bne.n	8007a54 <_dtoa_r+0x95c>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 fd4a 	bl	80084d8 <__multadd>
 8007a44:	4601      	mov	r1, r0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4658      	mov	r0, fp
 8007a4a:	f000 ffab 	bl	80089a4 <__mcmp>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f73f adb8 	bgt.w	80075c4 <_dtoa_r+0x4cc>
 8007a54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a56:	9f03      	ldr	r7, [sp, #12]
 8007a58:	ea6f 0a03 	mvn.w	sl, r3
 8007a5c:	f04f 0800 	mov.w	r8, #0
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 fd16 	bl	8008494 <_Bfree>
 8007a68:	2e00      	cmp	r6, #0
 8007a6a:	f43f aea7 	beq.w	80077bc <_dtoa_r+0x6c4>
 8007a6e:	f1b8 0f00 	cmp.w	r8, #0
 8007a72:	d005      	beq.n	8007a80 <_dtoa_r+0x988>
 8007a74:	45b0      	cmp	r8, r6
 8007a76:	d003      	beq.n	8007a80 <_dtoa_r+0x988>
 8007a78:	4641      	mov	r1, r8
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 fd0a 	bl	8008494 <_Bfree>
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 fd06 	bl	8008494 <_Bfree>
 8007a88:	e698      	b.n	80077bc <_dtoa_r+0x6c4>
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	4626      	mov	r6, r4
 8007a8e:	e7e1      	b.n	8007a54 <_dtoa_r+0x95c>
 8007a90:	46c2      	mov	sl, r8
 8007a92:	4626      	mov	r6, r4
 8007a94:	e596      	b.n	80075c4 <_dtoa_r+0x4cc>
 8007a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 80fd 	beq.w	8007c9c <_dtoa_r+0xba4>
 8007aa2:	2f00      	cmp	r7, #0
 8007aa4:	dd05      	ble.n	8007ab2 <_dtoa_r+0x9ba>
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	463a      	mov	r2, r7
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 ff0a 	bl	80088c4 <__lshift>
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	f1b8 0f00 	cmp.w	r8, #0
 8007ab6:	d05c      	beq.n	8007b72 <_dtoa_r+0xa7a>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	6871      	ldr	r1, [r6, #4]
 8007abc:	f000 fcaa 	bl	8008414 <_Balloc>
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	b928      	cbnz	r0, 8007ad0 <_dtoa_r+0x9d8>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007aca:	4b7f      	ldr	r3, [pc, #508]	; (8007cc8 <_dtoa_r+0xbd0>)
 8007acc:	f7ff bb28 	b.w	8007120 <_dtoa_r+0x28>
 8007ad0:	6932      	ldr	r2, [r6, #16]
 8007ad2:	f106 010c 	add.w	r1, r6, #12
 8007ad6:	3202      	adds	r2, #2
 8007ad8:	0092      	lsls	r2, r2, #2
 8007ada:	300c      	adds	r0, #12
 8007adc:	f000 fc8c 	bl	80083f8 <memcpy>
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 feed 	bl	80088c4 <__lshift>
 8007aea:	46b0      	mov	r8, r6
 8007aec:	4606      	mov	r6, r0
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	3301      	adds	r3, #1
 8007af2:	9308      	str	r3, [sp, #32]
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	444b      	add	r3, r9
 8007af8:	930a      	str	r3, [sp, #40]	; 0x28
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	4621      	mov	r1, r4
 8007b06:	3b01      	subs	r3, #1
 8007b08:	4658      	mov	r0, fp
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	f7ff fa68 	bl	8006fe0 <quorem>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4641      	mov	r1, r8
 8007b14:	3330      	adds	r3, #48	; 0x30
 8007b16:	9006      	str	r0, [sp, #24]
 8007b18:	4658      	mov	r0, fp
 8007b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b1c:	f000 ff42 	bl	80089a4 <__mcmp>
 8007b20:	4632      	mov	r2, r6
 8007b22:	4681      	mov	r9, r0
 8007b24:	4621      	mov	r1, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 ff58 	bl	80089dc <__mdiff>
 8007b2c:	68c2      	ldr	r2, [r0, #12]
 8007b2e:	4607      	mov	r7, r0
 8007b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b32:	bb02      	cbnz	r2, 8007b76 <_dtoa_r+0xa7e>
 8007b34:	4601      	mov	r1, r0
 8007b36:	4658      	mov	r0, fp
 8007b38:	f000 ff34 	bl	80089a4 <__mcmp>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b40:	4639      	mov	r1, r7
 8007b42:	4628      	mov	r0, r5
 8007b44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007b48:	f000 fca4 	bl	8008494 <_Bfree>
 8007b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b50:	9f08      	ldr	r7, [sp, #32]
 8007b52:	ea43 0102 	orr.w	r1, r3, r2
 8007b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5c:	d10d      	bne.n	8007b7a <_dtoa_r+0xa82>
 8007b5e:	2b39      	cmp	r3, #57	; 0x39
 8007b60:	d029      	beq.n	8007bb6 <_dtoa_r+0xabe>
 8007b62:	f1b9 0f00 	cmp.w	r9, #0
 8007b66:	dd01      	ble.n	8007b6c <_dtoa_r+0xa74>
 8007b68:	9b06      	ldr	r3, [sp, #24]
 8007b6a:	3331      	adds	r3, #49	; 0x31
 8007b6c:	9a04      	ldr	r2, [sp, #16]
 8007b6e:	7013      	strb	r3, [r2, #0]
 8007b70:	e776      	b.n	8007a60 <_dtoa_r+0x968>
 8007b72:	4630      	mov	r0, r6
 8007b74:	e7b9      	b.n	8007aea <_dtoa_r+0x9f2>
 8007b76:	2201      	movs	r2, #1
 8007b78:	e7e2      	b.n	8007b40 <_dtoa_r+0xa48>
 8007b7a:	f1b9 0f00 	cmp.w	r9, #0
 8007b7e:	db06      	blt.n	8007b8e <_dtoa_r+0xa96>
 8007b80:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b82:	ea41 0909 	orr.w	r9, r1, r9
 8007b86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b88:	ea59 0101 	orrs.w	r1, r9, r1
 8007b8c:	d120      	bne.n	8007bd0 <_dtoa_r+0xad8>
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	ddec      	ble.n	8007b6c <_dtoa_r+0xa74>
 8007b92:	4659      	mov	r1, fp
 8007b94:	2201      	movs	r2, #1
 8007b96:	4628      	mov	r0, r5
 8007b98:	9308      	str	r3, [sp, #32]
 8007b9a:	f000 fe93 	bl	80088c4 <__lshift>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4683      	mov	fp, r0
 8007ba2:	f000 feff 	bl	80089a4 <__mcmp>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	9b08      	ldr	r3, [sp, #32]
 8007baa:	dc02      	bgt.n	8007bb2 <_dtoa_r+0xaba>
 8007bac:	d1de      	bne.n	8007b6c <_dtoa_r+0xa74>
 8007bae:	07da      	lsls	r2, r3, #31
 8007bb0:	d5dc      	bpl.n	8007b6c <_dtoa_r+0xa74>
 8007bb2:	2b39      	cmp	r3, #57	; 0x39
 8007bb4:	d1d8      	bne.n	8007b68 <_dtoa_r+0xa70>
 8007bb6:	2339      	movs	r3, #57	; 0x39
 8007bb8:	9a04      	ldr	r2, [sp, #16]
 8007bba:	7013      	strb	r3, [r2, #0]
 8007bbc:	463b      	mov	r3, r7
 8007bbe:	461f      	mov	r7, r3
 8007bc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	2a39      	cmp	r2, #57	; 0x39
 8007bc8:	d050      	beq.n	8007c6c <_dtoa_r+0xb74>
 8007bca:	3201      	adds	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e747      	b.n	8007a60 <_dtoa_r+0x968>
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	dd03      	ble.n	8007bdc <_dtoa_r+0xae4>
 8007bd4:	2b39      	cmp	r3, #57	; 0x39
 8007bd6:	d0ee      	beq.n	8007bb6 <_dtoa_r+0xabe>
 8007bd8:	3301      	adds	r3, #1
 8007bda:	e7c7      	b.n	8007b6c <_dtoa_r+0xa74>
 8007bdc:	9a08      	ldr	r2, [sp, #32]
 8007bde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007be0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007be4:	428a      	cmp	r2, r1
 8007be6:	d02a      	beq.n	8007c3e <_dtoa_r+0xb46>
 8007be8:	4659      	mov	r1, fp
 8007bea:	2300      	movs	r3, #0
 8007bec:	220a      	movs	r2, #10
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fc72 	bl	80084d8 <__multadd>
 8007bf4:	45b0      	cmp	r8, r6
 8007bf6:	4683      	mov	fp, r0
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	f04f 020a 	mov.w	r2, #10
 8007c00:	4641      	mov	r1, r8
 8007c02:	4628      	mov	r0, r5
 8007c04:	d107      	bne.n	8007c16 <_dtoa_r+0xb1e>
 8007c06:	f000 fc67 	bl	80084d8 <__multadd>
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	9b08      	ldr	r3, [sp, #32]
 8007c10:	3301      	adds	r3, #1
 8007c12:	9308      	str	r3, [sp, #32]
 8007c14:	e775      	b.n	8007b02 <_dtoa_r+0xa0a>
 8007c16:	f000 fc5f 	bl	80084d8 <__multadd>
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	2300      	movs	r3, #0
 8007c20:	220a      	movs	r2, #10
 8007c22:	4628      	mov	r0, r5
 8007c24:	f000 fc58 	bl	80084d8 <__multadd>
 8007c28:	4606      	mov	r6, r0
 8007c2a:	e7f0      	b.n	8007c0e <_dtoa_r+0xb16>
 8007c2c:	f1b9 0f00 	cmp.w	r9, #0
 8007c30:	bfcc      	ite	gt
 8007c32:	464f      	movgt	r7, r9
 8007c34:	2701      	movle	r7, #1
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	9a03      	ldr	r2, [sp, #12]
 8007c3c:	4417      	add	r7, r2
 8007c3e:	4659      	mov	r1, fp
 8007c40:	2201      	movs	r2, #1
 8007c42:	4628      	mov	r0, r5
 8007c44:	9308      	str	r3, [sp, #32]
 8007c46:	f000 fe3d 	bl	80088c4 <__lshift>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4683      	mov	fp, r0
 8007c4e:	f000 fea9 	bl	80089a4 <__mcmp>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	dcb2      	bgt.n	8007bbc <_dtoa_r+0xac4>
 8007c56:	d102      	bne.n	8007c5e <_dtoa_r+0xb66>
 8007c58:	9b08      	ldr	r3, [sp, #32]
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	d4ae      	bmi.n	8007bbc <_dtoa_r+0xac4>
 8007c5e:	463b      	mov	r3, r7
 8007c60:	461f      	mov	r7, r3
 8007c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c66:	2a30      	cmp	r2, #48	; 0x30
 8007c68:	d0fa      	beq.n	8007c60 <_dtoa_r+0xb68>
 8007c6a:	e6f9      	b.n	8007a60 <_dtoa_r+0x968>
 8007c6c:	9a03      	ldr	r2, [sp, #12]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d1a5      	bne.n	8007bbe <_dtoa_r+0xac6>
 8007c72:	2331      	movs	r3, #49	; 0x31
 8007c74:	f10a 0a01 	add.w	sl, sl, #1
 8007c78:	e779      	b.n	8007b6e <_dtoa_r+0xa76>
 8007c7a:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <_dtoa_r+0xbd4>)
 8007c7c:	f7ff baa8 	b.w	80071d0 <_dtoa_r+0xd8>
 8007c80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f47f aa81 	bne.w	800718a <_dtoa_r+0x92>
 8007c88:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <_dtoa_r+0xbd8>)
 8007c8a:	f7ff baa1 	b.w	80071d0 <_dtoa_r+0xd8>
 8007c8e:	f1b9 0f00 	cmp.w	r9, #0
 8007c92:	dc03      	bgt.n	8007c9c <_dtoa_r+0xba4>
 8007c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	f73f aecb 	bgt.w	8007a32 <_dtoa_r+0x93a>
 8007c9c:	9f03      	ldr	r7, [sp, #12]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4658      	mov	r0, fp
 8007ca2:	f7ff f99d 	bl	8006fe0 <quorem>
 8007ca6:	9a03      	ldr	r2, [sp, #12]
 8007ca8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cac:	f807 3b01 	strb.w	r3, [r7], #1
 8007cb0:	1aba      	subs	r2, r7, r2
 8007cb2:	4591      	cmp	r9, r2
 8007cb4:	ddba      	ble.n	8007c2c <_dtoa_r+0xb34>
 8007cb6:	4659      	mov	r1, fp
 8007cb8:	2300      	movs	r3, #0
 8007cba:	220a      	movs	r2, #10
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f000 fc0b 	bl	80084d8 <__multadd>
 8007cc2:	4683      	mov	fp, r0
 8007cc4:	e7eb      	b.n	8007c9e <_dtoa_r+0xba6>
 8007cc6:	bf00      	nop
 8007cc8:	0800a098 	.word	0x0800a098
 8007ccc:	08009e9c 	.word	0x08009e9c
 8007cd0:	0800a019 	.word	0x0800a019

08007cd4 <rshift>:
 8007cd4:	6903      	ldr	r3, [r0, #16]
 8007cd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cda:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007cde:	f100 0414 	add.w	r4, r0, #20
 8007ce2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ce6:	dd46      	ble.n	8007d76 <rshift+0xa2>
 8007ce8:	f011 011f 	ands.w	r1, r1, #31
 8007cec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cf4:	d10c      	bne.n	8007d10 <rshift+0x3c>
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f100 0710 	add.w	r7, r0, #16
 8007cfc:	42b1      	cmp	r1, r6
 8007cfe:	d335      	bcc.n	8007d6c <rshift+0x98>
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	1eea      	subs	r2, r5, #3
 8007d06:	4296      	cmp	r6, r2
 8007d08:	bf38      	it	cc
 8007d0a:	2300      	movcc	r3, #0
 8007d0c:	4423      	add	r3, r4
 8007d0e:	e015      	b.n	8007d3c <rshift+0x68>
 8007d10:	46a1      	mov	r9, r4
 8007d12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d16:	f1c1 0820 	rsb	r8, r1, #32
 8007d1a:	40cf      	lsrs	r7, r1
 8007d1c:	f105 0e04 	add.w	lr, r5, #4
 8007d20:	4576      	cmp	r6, lr
 8007d22:	46f4      	mov	ip, lr
 8007d24:	d816      	bhi.n	8007d54 <rshift+0x80>
 8007d26:	1a9a      	subs	r2, r3, r2
 8007d28:	0092      	lsls	r2, r2, #2
 8007d2a:	3a04      	subs	r2, #4
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	42ae      	cmp	r6, r5
 8007d30:	bf38      	it	cc
 8007d32:	2200      	movcc	r2, #0
 8007d34:	18a3      	adds	r3, r4, r2
 8007d36:	50a7      	str	r7, [r4, r2]
 8007d38:	b107      	cbz	r7, 8007d3c <rshift+0x68>
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	eba3 0204 	sub.w	r2, r3, r4
 8007d42:	bf08      	it	eq
 8007d44:	2300      	moveq	r3, #0
 8007d46:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d4a:	6102      	str	r2, [r0, #16]
 8007d4c:	bf08      	it	eq
 8007d4e:	6143      	streq	r3, [r0, #20]
 8007d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d54:	f8dc c000 	ldr.w	ip, [ip]
 8007d58:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d5c:	ea4c 0707 	orr.w	r7, ip, r7
 8007d60:	f849 7b04 	str.w	r7, [r9], #4
 8007d64:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d68:	40cf      	lsrs	r7, r1
 8007d6a:	e7d9      	b.n	8007d20 <rshift+0x4c>
 8007d6c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d70:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d74:	e7c2      	b.n	8007cfc <rshift+0x28>
 8007d76:	4623      	mov	r3, r4
 8007d78:	e7e0      	b.n	8007d3c <rshift+0x68>

08007d7a <__hexdig_fun>:
 8007d7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d802      	bhi.n	8007d88 <__hexdig_fun+0xe>
 8007d82:	3820      	subs	r0, #32
 8007d84:	b2c0      	uxtb	r0, r0
 8007d86:	4770      	bx	lr
 8007d88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	d801      	bhi.n	8007d94 <__hexdig_fun+0x1a>
 8007d90:	3847      	subs	r0, #71	; 0x47
 8007d92:	e7f7      	b.n	8007d84 <__hexdig_fun+0xa>
 8007d94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d98:	2b05      	cmp	r3, #5
 8007d9a:	d801      	bhi.n	8007da0 <__hexdig_fun+0x26>
 8007d9c:	3827      	subs	r0, #39	; 0x27
 8007d9e:	e7f1      	b.n	8007d84 <__hexdig_fun+0xa>
 8007da0:	2000      	movs	r0, #0
 8007da2:	4770      	bx	lr

08007da4 <__gethex>:
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	b08b      	sub	sp, #44	; 0x2c
 8007daa:	9305      	str	r3, [sp, #20]
 8007dac:	4bb2      	ldr	r3, [pc, #712]	; (8008078 <__gethex+0x2d4>)
 8007dae:	9002      	str	r0, [sp, #8]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	468b      	mov	fp, r1
 8007db4:	4618      	mov	r0, r3
 8007db6:	4690      	mov	r8, r2
 8007db8:	9303      	str	r3, [sp, #12]
 8007dba:	f7f8 f9c9 	bl	8000150 <strlen>
 8007dbe:	4682      	mov	sl, r0
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	f8db 2000 	ldr.w	r2, [fp]
 8007dc6:	4403      	add	r3, r0
 8007dc8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007dcc:	9306      	str	r3, [sp, #24]
 8007dce:	1c93      	adds	r3, r2, #2
 8007dd0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007dd4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007dd8:	32fe      	adds	r2, #254	; 0xfe
 8007dda:	18d1      	adds	r1, r2, r3
 8007ddc:	461f      	mov	r7, r3
 8007dde:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007de2:	9101      	str	r1, [sp, #4]
 8007de4:	2830      	cmp	r0, #48	; 0x30
 8007de6:	d0f8      	beq.n	8007dda <__gethex+0x36>
 8007de8:	f7ff ffc7 	bl	8007d7a <__hexdig_fun>
 8007dec:	4604      	mov	r4, r0
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d13a      	bne.n	8007e68 <__gethex+0xc4>
 8007df2:	4652      	mov	r2, sl
 8007df4:	4638      	mov	r0, r7
 8007df6:	9903      	ldr	r1, [sp, #12]
 8007df8:	f001 fa26 	bl	8009248 <strncmp>
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d166      	bne.n	8007ed0 <__gethex+0x12c>
 8007e02:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e06:	eb07 060a 	add.w	r6, r7, sl
 8007e0a:	f7ff ffb6 	bl	8007d7a <__hexdig_fun>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d060      	beq.n	8007ed4 <__gethex+0x130>
 8007e12:	4633      	mov	r3, r6
 8007e14:	7818      	ldrb	r0, [r3, #0]
 8007e16:	461f      	mov	r7, r3
 8007e18:	2830      	cmp	r0, #48	; 0x30
 8007e1a:	f103 0301 	add.w	r3, r3, #1
 8007e1e:	d0f9      	beq.n	8007e14 <__gethex+0x70>
 8007e20:	f7ff ffab 	bl	8007d7a <__hexdig_fun>
 8007e24:	2301      	movs	r3, #1
 8007e26:	fab0 f480 	clz	r4, r0
 8007e2a:	4635      	mov	r5, r6
 8007e2c:	0964      	lsrs	r4, r4, #5
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	463a      	mov	r2, r7
 8007e32:	4616      	mov	r6, r2
 8007e34:	7830      	ldrb	r0, [r6, #0]
 8007e36:	3201      	adds	r2, #1
 8007e38:	f7ff ff9f 	bl	8007d7a <__hexdig_fun>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d1f8      	bne.n	8007e32 <__gethex+0x8e>
 8007e40:	4652      	mov	r2, sl
 8007e42:	4630      	mov	r0, r6
 8007e44:	9903      	ldr	r1, [sp, #12]
 8007e46:	f001 f9ff 	bl	8009248 <strncmp>
 8007e4a:	b980      	cbnz	r0, 8007e6e <__gethex+0xca>
 8007e4c:	b94d      	cbnz	r5, 8007e62 <__gethex+0xbe>
 8007e4e:	eb06 050a 	add.w	r5, r6, sl
 8007e52:	462a      	mov	r2, r5
 8007e54:	4616      	mov	r6, r2
 8007e56:	7830      	ldrb	r0, [r6, #0]
 8007e58:	3201      	adds	r2, #1
 8007e5a:	f7ff ff8e 	bl	8007d7a <__hexdig_fun>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d1f8      	bne.n	8007e54 <__gethex+0xb0>
 8007e62:	1bad      	subs	r5, r5, r6
 8007e64:	00ad      	lsls	r5, r5, #2
 8007e66:	e004      	b.n	8007e72 <__gethex+0xce>
 8007e68:	2400      	movs	r4, #0
 8007e6a:	4625      	mov	r5, r4
 8007e6c:	e7e0      	b.n	8007e30 <__gethex+0x8c>
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	d1f7      	bne.n	8007e62 <__gethex+0xbe>
 8007e72:	7833      	ldrb	r3, [r6, #0]
 8007e74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e78:	2b50      	cmp	r3, #80	; 0x50
 8007e7a:	d139      	bne.n	8007ef0 <__gethex+0x14c>
 8007e7c:	7873      	ldrb	r3, [r6, #1]
 8007e7e:	2b2b      	cmp	r3, #43	; 0x2b
 8007e80:	d02a      	beq.n	8007ed8 <__gethex+0x134>
 8007e82:	2b2d      	cmp	r3, #45	; 0x2d
 8007e84:	d02c      	beq.n	8007ee0 <__gethex+0x13c>
 8007e86:	f04f 0900 	mov.w	r9, #0
 8007e8a:	1c71      	adds	r1, r6, #1
 8007e8c:	7808      	ldrb	r0, [r1, #0]
 8007e8e:	f7ff ff74 	bl	8007d7a <__hexdig_fun>
 8007e92:	1e43      	subs	r3, r0, #1
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b18      	cmp	r3, #24
 8007e98:	d82a      	bhi.n	8007ef0 <__gethex+0x14c>
 8007e9a:	f1a0 0210 	sub.w	r2, r0, #16
 8007e9e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ea2:	f7ff ff6a 	bl	8007d7a <__hexdig_fun>
 8007ea6:	1e43      	subs	r3, r0, #1
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b18      	cmp	r3, #24
 8007eac:	d91b      	bls.n	8007ee6 <__gethex+0x142>
 8007eae:	f1b9 0f00 	cmp.w	r9, #0
 8007eb2:	d000      	beq.n	8007eb6 <__gethex+0x112>
 8007eb4:	4252      	negs	r2, r2
 8007eb6:	4415      	add	r5, r2
 8007eb8:	f8cb 1000 	str.w	r1, [fp]
 8007ebc:	b1d4      	cbz	r4, 8007ef4 <__gethex+0x150>
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf14      	ite	ne
 8007ec4:	2700      	movne	r7, #0
 8007ec6:	2706      	moveq	r7, #6
 8007ec8:	4638      	mov	r0, r7
 8007eca:	b00b      	add	sp, #44	; 0x2c
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	463e      	mov	r6, r7
 8007ed2:	4625      	mov	r5, r4
 8007ed4:	2401      	movs	r4, #1
 8007ed6:	e7cc      	b.n	8007e72 <__gethex+0xce>
 8007ed8:	f04f 0900 	mov.w	r9, #0
 8007edc:	1cb1      	adds	r1, r6, #2
 8007ede:	e7d5      	b.n	8007e8c <__gethex+0xe8>
 8007ee0:	f04f 0901 	mov.w	r9, #1
 8007ee4:	e7fa      	b.n	8007edc <__gethex+0x138>
 8007ee6:	230a      	movs	r3, #10
 8007ee8:	fb03 0202 	mla	r2, r3, r2, r0
 8007eec:	3a10      	subs	r2, #16
 8007eee:	e7d6      	b.n	8007e9e <__gethex+0xfa>
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	e7e1      	b.n	8007eb8 <__gethex+0x114>
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	1bf3      	subs	r3, r6, r7
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	2b07      	cmp	r3, #7
 8007efc:	dc0a      	bgt.n	8007f14 <__gethex+0x170>
 8007efe:	9802      	ldr	r0, [sp, #8]
 8007f00:	f000 fa88 	bl	8008414 <_Balloc>
 8007f04:	4604      	mov	r4, r0
 8007f06:	b940      	cbnz	r0, 8007f1a <__gethex+0x176>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	21de      	movs	r1, #222	; 0xde
 8007f0c:	4b5b      	ldr	r3, [pc, #364]	; (800807c <__gethex+0x2d8>)
 8007f0e:	485c      	ldr	r0, [pc, #368]	; (8008080 <__gethex+0x2dc>)
 8007f10:	f001 f9bc 	bl	800928c <__assert_func>
 8007f14:	3101      	adds	r1, #1
 8007f16:	105b      	asrs	r3, r3, #1
 8007f18:	e7ef      	b.n	8007efa <__gethex+0x156>
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	f100 0914 	add.w	r9, r0, #20
 8007f22:	f1ca 0301 	rsb	r3, sl, #1
 8007f26:	f8cd 9010 	str.w	r9, [sp, #16]
 8007f2a:	f8cd b004 	str.w	fp, [sp, #4]
 8007f2e:	9308      	str	r3, [sp, #32]
 8007f30:	42b7      	cmp	r7, r6
 8007f32:	d33f      	bcc.n	8007fb4 <__gethex+0x210>
 8007f34:	9f04      	ldr	r7, [sp, #16]
 8007f36:	9b01      	ldr	r3, [sp, #4]
 8007f38:	f847 3b04 	str.w	r3, [r7], #4
 8007f3c:	eba7 0709 	sub.w	r7, r7, r9
 8007f40:	10bf      	asrs	r7, r7, #2
 8007f42:	6127      	str	r7, [r4, #16]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fb57 	bl	80085f8 <__hi0bits>
 8007f4a:	017f      	lsls	r7, r7, #5
 8007f4c:	f8d8 6000 	ldr.w	r6, [r8]
 8007f50:	1a3f      	subs	r7, r7, r0
 8007f52:	42b7      	cmp	r7, r6
 8007f54:	dd62      	ble.n	800801c <__gethex+0x278>
 8007f56:	1bbf      	subs	r7, r7, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 fef1 	bl	8008d42 <__any_on>
 8007f60:	4682      	mov	sl, r0
 8007f62:	b1a8      	cbz	r0, 8007f90 <__gethex+0x1ec>
 8007f64:	f04f 0a01 	mov.w	sl, #1
 8007f68:	1e7b      	subs	r3, r7, #1
 8007f6a:	1159      	asrs	r1, r3, #5
 8007f6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f70:	f003 021f 	and.w	r2, r3, #31
 8007f74:	fa0a f202 	lsl.w	r2, sl, r2
 8007f78:	420a      	tst	r2, r1
 8007f7a:	d009      	beq.n	8007f90 <__gethex+0x1ec>
 8007f7c:	4553      	cmp	r3, sl
 8007f7e:	dd05      	ble.n	8007f8c <__gethex+0x1e8>
 8007f80:	4620      	mov	r0, r4
 8007f82:	1eb9      	subs	r1, r7, #2
 8007f84:	f000 fedd 	bl	8008d42 <__any_on>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d144      	bne.n	8008016 <__gethex+0x272>
 8007f8c:	f04f 0a02 	mov.w	sl, #2
 8007f90:	4639      	mov	r1, r7
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7ff fe9e 	bl	8007cd4 <rshift>
 8007f98:	443d      	add	r5, r7
 8007f9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f9e:	42ab      	cmp	r3, r5
 8007fa0:	da4a      	bge.n	8008038 <__gethex+0x294>
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	9802      	ldr	r0, [sp, #8]
 8007fa6:	f000 fa75 	bl	8008494 <_Bfree>
 8007faa:	2300      	movs	r3, #0
 8007fac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fae:	27a3      	movs	r7, #163	; 0xa3
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	e789      	b.n	8007ec8 <__gethex+0x124>
 8007fb4:	1e73      	subs	r3, r6, #1
 8007fb6:	9a06      	ldr	r2, [sp, #24]
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d019      	beq.n	8007ff6 <__gethex+0x252>
 8007fc2:	f1bb 0f20 	cmp.w	fp, #32
 8007fc6:	d107      	bne.n	8007fd8 <__gethex+0x234>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	9a01      	ldr	r2, [sp, #4]
 8007fcc:	f843 2b04 	str.w	r2, [r3], #4
 8007fd0:	9304      	str	r3, [sp, #16]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	469b      	mov	fp, r3
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007fdc:	f7ff fecd 	bl	8007d7a <__hexdig_fun>
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	f000 000f 	and.w	r0, r0, #15
 8007fe6:	fa00 f00b 	lsl.w	r0, r0, fp
 8007fea:	4303      	orrs	r3, r0
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	f10b 0b04 	add.w	fp, fp, #4
 8007ff2:	9b07      	ldr	r3, [sp, #28]
 8007ff4:	e00d      	b.n	8008012 <__gethex+0x26e>
 8007ff6:	9a08      	ldr	r2, [sp, #32]
 8007ff8:	1e73      	subs	r3, r6, #1
 8007ffa:	4413      	add	r3, r2
 8007ffc:	42bb      	cmp	r3, r7
 8007ffe:	d3e0      	bcc.n	8007fc2 <__gethex+0x21e>
 8008000:	4618      	mov	r0, r3
 8008002:	4652      	mov	r2, sl
 8008004:	9903      	ldr	r1, [sp, #12]
 8008006:	9309      	str	r3, [sp, #36]	; 0x24
 8008008:	f001 f91e 	bl	8009248 <strncmp>
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800e:	2800      	cmp	r0, #0
 8008010:	d1d7      	bne.n	8007fc2 <__gethex+0x21e>
 8008012:	461e      	mov	r6, r3
 8008014:	e78c      	b.n	8007f30 <__gethex+0x18c>
 8008016:	f04f 0a03 	mov.w	sl, #3
 800801a:	e7b9      	b.n	8007f90 <__gethex+0x1ec>
 800801c:	da09      	bge.n	8008032 <__gethex+0x28e>
 800801e:	1bf7      	subs	r7, r6, r7
 8008020:	4621      	mov	r1, r4
 8008022:	463a      	mov	r2, r7
 8008024:	9802      	ldr	r0, [sp, #8]
 8008026:	f000 fc4d 	bl	80088c4 <__lshift>
 800802a:	4604      	mov	r4, r0
 800802c:	1bed      	subs	r5, r5, r7
 800802e:	f100 0914 	add.w	r9, r0, #20
 8008032:	f04f 0a00 	mov.w	sl, #0
 8008036:	e7b0      	b.n	8007f9a <__gethex+0x1f6>
 8008038:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800803c:	42a8      	cmp	r0, r5
 800803e:	dd72      	ble.n	8008126 <__gethex+0x382>
 8008040:	1b45      	subs	r5, r0, r5
 8008042:	42ae      	cmp	r6, r5
 8008044:	dc35      	bgt.n	80080b2 <__gethex+0x30e>
 8008046:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d029      	beq.n	80080a2 <__gethex+0x2fe>
 800804e:	2b03      	cmp	r3, #3
 8008050:	d02b      	beq.n	80080aa <__gethex+0x306>
 8008052:	2b01      	cmp	r3, #1
 8008054:	d11c      	bne.n	8008090 <__gethex+0x2ec>
 8008056:	42ae      	cmp	r6, r5
 8008058:	d11a      	bne.n	8008090 <__gethex+0x2ec>
 800805a:	2e01      	cmp	r6, #1
 800805c:	d112      	bne.n	8008084 <__gethex+0x2e0>
 800805e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008062:	9a05      	ldr	r2, [sp, #20]
 8008064:	2762      	movs	r7, #98	; 0x62
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	2301      	movs	r3, #1
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	f8c9 3000 	str.w	r3, [r9]
 8008070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008072:	601c      	str	r4, [r3, #0]
 8008074:	e728      	b.n	8007ec8 <__gethex+0x124>
 8008076:	bf00      	nop
 8008078:	0800a110 	.word	0x0800a110
 800807c:	0800a098 	.word	0x0800a098
 8008080:	0800a0a9 	.word	0x0800a0a9
 8008084:	4620      	mov	r0, r4
 8008086:	1e71      	subs	r1, r6, #1
 8008088:	f000 fe5b 	bl	8008d42 <__any_on>
 800808c:	2800      	cmp	r0, #0
 800808e:	d1e6      	bne.n	800805e <__gethex+0x2ba>
 8008090:	4621      	mov	r1, r4
 8008092:	9802      	ldr	r0, [sp, #8]
 8008094:	f000 f9fe 	bl	8008494 <_Bfree>
 8008098:	2300      	movs	r3, #0
 800809a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800809c:	2750      	movs	r7, #80	; 0x50
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	e712      	b.n	8007ec8 <__gethex+0x124>
 80080a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1f3      	bne.n	8008090 <__gethex+0x2ec>
 80080a8:	e7d9      	b.n	800805e <__gethex+0x2ba>
 80080aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1d6      	bne.n	800805e <__gethex+0x2ba>
 80080b0:	e7ee      	b.n	8008090 <__gethex+0x2ec>
 80080b2:	1e6f      	subs	r7, r5, #1
 80080b4:	f1ba 0f00 	cmp.w	sl, #0
 80080b8:	d132      	bne.n	8008120 <__gethex+0x37c>
 80080ba:	b127      	cbz	r7, 80080c6 <__gethex+0x322>
 80080bc:	4639      	mov	r1, r7
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 fe3f 	bl	8008d42 <__any_on>
 80080c4:	4682      	mov	sl, r0
 80080c6:	2101      	movs	r1, #1
 80080c8:	117b      	asrs	r3, r7, #5
 80080ca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80080ce:	f007 071f 	and.w	r7, r7, #31
 80080d2:	fa01 f707 	lsl.w	r7, r1, r7
 80080d6:	421f      	tst	r7, r3
 80080d8:	f04f 0702 	mov.w	r7, #2
 80080dc:	4629      	mov	r1, r5
 80080de:	4620      	mov	r0, r4
 80080e0:	bf18      	it	ne
 80080e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80080e6:	1b76      	subs	r6, r6, r5
 80080e8:	f7ff fdf4 	bl	8007cd4 <rshift>
 80080ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080f0:	f1ba 0f00 	cmp.w	sl, #0
 80080f4:	d048      	beq.n	8008188 <__gethex+0x3e4>
 80080f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d015      	beq.n	800812a <__gethex+0x386>
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d017      	beq.n	8008132 <__gethex+0x38e>
 8008102:	2b01      	cmp	r3, #1
 8008104:	d109      	bne.n	800811a <__gethex+0x376>
 8008106:	f01a 0f02 	tst.w	sl, #2
 800810a:	d006      	beq.n	800811a <__gethex+0x376>
 800810c:	f8d9 0000 	ldr.w	r0, [r9]
 8008110:	ea4a 0a00 	orr.w	sl, sl, r0
 8008114:	f01a 0f01 	tst.w	sl, #1
 8008118:	d10e      	bne.n	8008138 <__gethex+0x394>
 800811a:	f047 0710 	orr.w	r7, r7, #16
 800811e:	e033      	b.n	8008188 <__gethex+0x3e4>
 8008120:	f04f 0a01 	mov.w	sl, #1
 8008124:	e7cf      	b.n	80080c6 <__gethex+0x322>
 8008126:	2701      	movs	r7, #1
 8008128:	e7e2      	b.n	80080f0 <__gethex+0x34c>
 800812a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800812c:	f1c3 0301 	rsb	r3, r3, #1
 8008130:	9315      	str	r3, [sp, #84]	; 0x54
 8008132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0f0      	beq.n	800811a <__gethex+0x376>
 8008138:	f04f 0c00 	mov.w	ip, #0
 800813c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008140:	f104 0314 	add.w	r3, r4, #20
 8008144:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008148:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800814c:	4618      	mov	r0, r3
 800814e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008152:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008156:	d01c      	beq.n	8008192 <__gethex+0x3ee>
 8008158:	3201      	adds	r2, #1
 800815a:	6002      	str	r2, [r0, #0]
 800815c:	2f02      	cmp	r7, #2
 800815e:	f104 0314 	add.w	r3, r4, #20
 8008162:	d13d      	bne.n	80081e0 <__gethex+0x43c>
 8008164:	f8d8 2000 	ldr.w	r2, [r8]
 8008168:	3a01      	subs	r2, #1
 800816a:	42b2      	cmp	r2, r6
 800816c:	d10a      	bne.n	8008184 <__gethex+0x3e0>
 800816e:	2201      	movs	r2, #1
 8008170:	1171      	asrs	r1, r6, #5
 8008172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008176:	f006 061f 	and.w	r6, r6, #31
 800817a:	fa02 f606 	lsl.w	r6, r2, r6
 800817e:	421e      	tst	r6, r3
 8008180:	bf18      	it	ne
 8008182:	4617      	movne	r7, r2
 8008184:	f047 0720 	orr.w	r7, r7, #32
 8008188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800818a:	601c      	str	r4, [r3, #0]
 800818c:	9b05      	ldr	r3, [sp, #20]
 800818e:	601d      	str	r5, [r3, #0]
 8008190:	e69a      	b.n	8007ec8 <__gethex+0x124>
 8008192:	4299      	cmp	r1, r3
 8008194:	f843 cc04 	str.w	ip, [r3, #-4]
 8008198:	d8d8      	bhi.n	800814c <__gethex+0x3a8>
 800819a:	68a3      	ldr	r3, [r4, #8]
 800819c:	459b      	cmp	fp, r3
 800819e:	db17      	blt.n	80081d0 <__gethex+0x42c>
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	9802      	ldr	r0, [sp, #8]
 80081a4:	3101      	adds	r1, #1
 80081a6:	f000 f935 	bl	8008414 <_Balloc>
 80081aa:	4681      	mov	r9, r0
 80081ac:	b918      	cbnz	r0, 80081b6 <__gethex+0x412>
 80081ae:	4602      	mov	r2, r0
 80081b0:	2184      	movs	r1, #132	; 0x84
 80081b2:	4b19      	ldr	r3, [pc, #100]	; (8008218 <__gethex+0x474>)
 80081b4:	e6ab      	b.n	8007f0e <__gethex+0x16a>
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	f104 010c 	add.w	r1, r4, #12
 80081bc:	3202      	adds	r2, #2
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	300c      	adds	r0, #12
 80081c2:	f000 f919 	bl	80083f8 <memcpy>
 80081c6:	4621      	mov	r1, r4
 80081c8:	9802      	ldr	r0, [sp, #8]
 80081ca:	f000 f963 	bl	8008494 <_Bfree>
 80081ce:	464c      	mov	r4, r9
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	6122      	str	r2, [r4, #16]
 80081d6:	2201      	movs	r2, #1
 80081d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081dc:	615a      	str	r2, [r3, #20]
 80081de:	e7bd      	b.n	800815c <__gethex+0x3b8>
 80081e0:	6922      	ldr	r2, [r4, #16]
 80081e2:	455a      	cmp	r2, fp
 80081e4:	dd0b      	ble.n	80081fe <__gethex+0x45a>
 80081e6:	2101      	movs	r1, #1
 80081e8:	4620      	mov	r0, r4
 80081ea:	f7ff fd73 	bl	8007cd4 <rshift>
 80081ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081f2:	3501      	adds	r5, #1
 80081f4:	42ab      	cmp	r3, r5
 80081f6:	f6ff aed4 	blt.w	8007fa2 <__gethex+0x1fe>
 80081fa:	2701      	movs	r7, #1
 80081fc:	e7c2      	b.n	8008184 <__gethex+0x3e0>
 80081fe:	f016 061f 	ands.w	r6, r6, #31
 8008202:	d0fa      	beq.n	80081fa <__gethex+0x456>
 8008204:	4453      	add	r3, sl
 8008206:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800820a:	f000 f9f5 	bl	80085f8 <__hi0bits>
 800820e:	f1c6 0620 	rsb	r6, r6, #32
 8008212:	42b0      	cmp	r0, r6
 8008214:	dbe7      	blt.n	80081e6 <__gethex+0x442>
 8008216:	e7f0      	b.n	80081fa <__gethex+0x456>
 8008218:	0800a098 	.word	0x0800a098

0800821c <L_shift>:
 800821c:	f1c2 0208 	rsb	r2, r2, #8
 8008220:	0092      	lsls	r2, r2, #2
 8008222:	b570      	push	{r4, r5, r6, lr}
 8008224:	f1c2 0620 	rsb	r6, r2, #32
 8008228:	6843      	ldr	r3, [r0, #4]
 800822a:	6804      	ldr	r4, [r0, #0]
 800822c:	fa03 f506 	lsl.w	r5, r3, r6
 8008230:	432c      	orrs	r4, r5
 8008232:	40d3      	lsrs	r3, r2
 8008234:	6004      	str	r4, [r0, #0]
 8008236:	f840 3f04 	str.w	r3, [r0, #4]!
 800823a:	4288      	cmp	r0, r1
 800823c:	d3f4      	bcc.n	8008228 <L_shift+0xc>
 800823e:	bd70      	pop	{r4, r5, r6, pc}

08008240 <__match>:
 8008240:	b530      	push	{r4, r5, lr}
 8008242:	6803      	ldr	r3, [r0, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824a:	b914      	cbnz	r4, 8008252 <__match+0x12>
 800824c:	6003      	str	r3, [r0, #0]
 800824e:	2001      	movs	r0, #1
 8008250:	bd30      	pop	{r4, r5, pc}
 8008252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008256:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800825a:	2d19      	cmp	r5, #25
 800825c:	bf98      	it	ls
 800825e:	3220      	addls	r2, #32
 8008260:	42a2      	cmp	r2, r4
 8008262:	d0f0      	beq.n	8008246 <__match+0x6>
 8008264:	2000      	movs	r0, #0
 8008266:	e7f3      	b.n	8008250 <__match+0x10>

08008268 <__hexnan>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	2500      	movs	r5, #0
 800826e:	680b      	ldr	r3, [r1, #0]
 8008270:	4682      	mov	sl, r0
 8008272:	115e      	asrs	r6, r3, #5
 8008274:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008278:	f013 031f 	ands.w	r3, r3, #31
 800827c:	bf18      	it	ne
 800827e:	3604      	addne	r6, #4
 8008280:	1f37      	subs	r7, r6, #4
 8008282:	46b9      	mov	r9, r7
 8008284:	463c      	mov	r4, r7
 8008286:	46ab      	mov	fp, r5
 8008288:	b087      	sub	sp, #28
 800828a:	4690      	mov	r8, r2
 800828c:	6802      	ldr	r2, [r0, #0]
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	f846 5c04 	str.w	r5, [r6, #-4]
 8008294:	9502      	str	r5, [sp, #8]
 8008296:	7851      	ldrb	r1, [r2, #1]
 8008298:	1c53      	adds	r3, r2, #1
 800829a:	9303      	str	r3, [sp, #12]
 800829c:	b341      	cbz	r1, 80082f0 <__hexnan+0x88>
 800829e:	4608      	mov	r0, r1
 80082a0:	9205      	str	r2, [sp, #20]
 80082a2:	9104      	str	r1, [sp, #16]
 80082a4:	f7ff fd69 	bl	8007d7a <__hexdig_fun>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d14f      	bne.n	800834c <__hexnan+0xe4>
 80082ac:	9904      	ldr	r1, [sp, #16]
 80082ae:	9a05      	ldr	r2, [sp, #20]
 80082b0:	2920      	cmp	r1, #32
 80082b2:	d818      	bhi.n	80082e6 <__hexnan+0x7e>
 80082b4:	9b02      	ldr	r3, [sp, #8]
 80082b6:	459b      	cmp	fp, r3
 80082b8:	dd13      	ble.n	80082e2 <__hexnan+0x7a>
 80082ba:	454c      	cmp	r4, r9
 80082bc:	d206      	bcs.n	80082cc <__hexnan+0x64>
 80082be:	2d07      	cmp	r5, #7
 80082c0:	dc04      	bgt.n	80082cc <__hexnan+0x64>
 80082c2:	462a      	mov	r2, r5
 80082c4:	4649      	mov	r1, r9
 80082c6:	4620      	mov	r0, r4
 80082c8:	f7ff ffa8 	bl	800821c <L_shift>
 80082cc:	4544      	cmp	r4, r8
 80082ce:	d950      	bls.n	8008372 <__hexnan+0x10a>
 80082d0:	2300      	movs	r3, #0
 80082d2:	f1a4 0904 	sub.w	r9, r4, #4
 80082d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80082da:	461d      	mov	r5, r3
 80082dc:	464c      	mov	r4, r9
 80082de:	f8cd b008 	str.w	fp, [sp, #8]
 80082e2:	9a03      	ldr	r2, [sp, #12]
 80082e4:	e7d7      	b.n	8008296 <__hexnan+0x2e>
 80082e6:	2929      	cmp	r1, #41	; 0x29
 80082e8:	d156      	bne.n	8008398 <__hexnan+0x130>
 80082ea:	3202      	adds	r2, #2
 80082ec:	f8ca 2000 	str.w	r2, [sl]
 80082f0:	f1bb 0f00 	cmp.w	fp, #0
 80082f4:	d050      	beq.n	8008398 <__hexnan+0x130>
 80082f6:	454c      	cmp	r4, r9
 80082f8:	d206      	bcs.n	8008308 <__hexnan+0xa0>
 80082fa:	2d07      	cmp	r5, #7
 80082fc:	dc04      	bgt.n	8008308 <__hexnan+0xa0>
 80082fe:	462a      	mov	r2, r5
 8008300:	4649      	mov	r1, r9
 8008302:	4620      	mov	r0, r4
 8008304:	f7ff ff8a 	bl	800821c <L_shift>
 8008308:	4544      	cmp	r4, r8
 800830a:	d934      	bls.n	8008376 <__hexnan+0x10e>
 800830c:	4623      	mov	r3, r4
 800830e:	f1a8 0204 	sub.w	r2, r8, #4
 8008312:	f853 1b04 	ldr.w	r1, [r3], #4
 8008316:	429f      	cmp	r7, r3
 8008318:	f842 1f04 	str.w	r1, [r2, #4]!
 800831c:	d2f9      	bcs.n	8008312 <__hexnan+0xaa>
 800831e:	1b3b      	subs	r3, r7, r4
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	3304      	adds	r3, #4
 8008326:	3401      	adds	r4, #1
 8008328:	3e03      	subs	r6, #3
 800832a:	42b4      	cmp	r4, r6
 800832c:	bf88      	it	hi
 800832e:	2304      	movhi	r3, #4
 8008330:	2200      	movs	r2, #0
 8008332:	4443      	add	r3, r8
 8008334:	f843 2b04 	str.w	r2, [r3], #4
 8008338:	429f      	cmp	r7, r3
 800833a:	d2fb      	bcs.n	8008334 <__hexnan+0xcc>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	b91b      	cbnz	r3, 8008348 <__hexnan+0xe0>
 8008340:	4547      	cmp	r7, r8
 8008342:	d127      	bne.n	8008394 <__hexnan+0x12c>
 8008344:	2301      	movs	r3, #1
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	2005      	movs	r0, #5
 800834a:	e026      	b.n	800839a <__hexnan+0x132>
 800834c:	3501      	adds	r5, #1
 800834e:	2d08      	cmp	r5, #8
 8008350:	f10b 0b01 	add.w	fp, fp, #1
 8008354:	dd06      	ble.n	8008364 <__hexnan+0xfc>
 8008356:	4544      	cmp	r4, r8
 8008358:	d9c3      	bls.n	80082e2 <__hexnan+0x7a>
 800835a:	2300      	movs	r3, #0
 800835c:	2501      	movs	r5, #1
 800835e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008362:	3c04      	subs	r4, #4
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	f000 000f 	and.w	r0, r0, #15
 800836a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800836e:	6022      	str	r2, [r4, #0]
 8008370:	e7b7      	b.n	80082e2 <__hexnan+0x7a>
 8008372:	2508      	movs	r5, #8
 8008374:	e7b5      	b.n	80082e2 <__hexnan+0x7a>
 8008376:	9b01      	ldr	r3, [sp, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0df      	beq.n	800833c <__hexnan+0xd4>
 800837c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008380:	f1c3 0320 	rsb	r3, r3, #32
 8008384:	fa22 f303 	lsr.w	r3, r2, r3
 8008388:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800838c:	401a      	ands	r2, r3
 800838e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008392:	e7d3      	b.n	800833c <__hexnan+0xd4>
 8008394:	3f04      	subs	r7, #4
 8008396:	e7d1      	b.n	800833c <__hexnan+0xd4>
 8008398:	2004      	movs	r0, #4
 800839a:	b007      	add	sp, #28
 800839c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083a0 <_localeconv_r>:
 80083a0:	4800      	ldr	r0, [pc, #0]	; (80083a4 <_localeconv_r+0x4>)
 80083a2:	4770      	bx	lr
 80083a4:	20000168 	.word	0x20000168

080083a8 <malloc>:
 80083a8:	4b02      	ldr	r3, [pc, #8]	; (80083b4 <malloc+0xc>)
 80083aa:	4601      	mov	r1, r0
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f000 bd65 	b.w	8008e7c <_malloc_r>
 80083b2:	bf00      	nop
 80083b4:	20000010 	.word	0x20000010

080083b8 <__ascii_mbtowc>:
 80083b8:	b082      	sub	sp, #8
 80083ba:	b901      	cbnz	r1, 80083be <__ascii_mbtowc+0x6>
 80083bc:	a901      	add	r1, sp, #4
 80083be:	b142      	cbz	r2, 80083d2 <__ascii_mbtowc+0x1a>
 80083c0:	b14b      	cbz	r3, 80083d6 <__ascii_mbtowc+0x1e>
 80083c2:	7813      	ldrb	r3, [r2, #0]
 80083c4:	600b      	str	r3, [r1, #0]
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	1e10      	subs	r0, r2, #0
 80083ca:	bf18      	it	ne
 80083cc:	2001      	movne	r0, #1
 80083ce:	b002      	add	sp, #8
 80083d0:	4770      	bx	lr
 80083d2:	4610      	mov	r0, r2
 80083d4:	e7fb      	b.n	80083ce <__ascii_mbtowc+0x16>
 80083d6:	f06f 0001 	mvn.w	r0, #1
 80083da:	e7f8      	b.n	80083ce <__ascii_mbtowc+0x16>

080083dc <memchr>:
 80083dc:	4603      	mov	r3, r0
 80083de:	b510      	push	{r4, lr}
 80083e0:	b2c9      	uxtb	r1, r1
 80083e2:	4402      	add	r2, r0
 80083e4:	4293      	cmp	r3, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	d101      	bne.n	80083ee <memchr+0x12>
 80083ea:	2000      	movs	r0, #0
 80083ec:	e003      	b.n	80083f6 <memchr+0x1a>
 80083ee:	7804      	ldrb	r4, [r0, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	428c      	cmp	r4, r1
 80083f4:	d1f6      	bne.n	80083e4 <memchr+0x8>
 80083f6:	bd10      	pop	{r4, pc}

080083f8 <memcpy>:
 80083f8:	440a      	add	r2, r1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008400:	d100      	bne.n	8008404 <memcpy+0xc>
 8008402:	4770      	bx	lr
 8008404:	b510      	push	{r4, lr}
 8008406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840a:	4291      	cmp	r1, r2
 800840c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008410:	d1f9      	bne.n	8008406 <memcpy+0xe>
 8008412:	bd10      	pop	{r4, pc}

08008414 <_Balloc>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008418:	4604      	mov	r4, r0
 800841a:	460d      	mov	r5, r1
 800841c:	b976      	cbnz	r6, 800843c <_Balloc+0x28>
 800841e:	2010      	movs	r0, #16
 8008420:	f7ff ffc2 	bl	80083a8 <malloc>
 8008424:	4602      	mov	r2, r0
 8008426:	6260      	str	r0, [r4, #36]	; 0x24
 8008428:	b920      	cbnz	r0, 8008434 <_Balloc+0x20>
 800842a:	2166      	movs	r1, #102	; 0x66
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <_Balloc+0x78>)
 800842e:	4818      	ldr	r0, [pc, #96]	; (8008490 <_Balloc+0x7c>)
 8008430:	f000 ff2c 	bl	800928c <__assert_func>
 8008434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008438:	6006      	str	r6, [r0, #0]
 800843a:	60c6      	str	r6, [r0, #12]
 800843c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800843e:	68f3      	ldr	r3, [r6, #12]
 8008440:	b183      	cbz	r3, 8008464 <_Balloc+0x50>
 8008442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800844a:	b9b8      	cbnz	r0, 800847c <_Balloc+0x68>
 800844c:	2101      	movs	r1, #1
 800844e:	fa01 f605 	lsl.w	r6, r1, r5
 8008452:	1d72      	adds	r2, r6, #5
 8008454:	4620      	mov	r0, r4
 8008456:	0092      	lsls	r2, r2, #2
 8008458:	f000 fc94 	bl	8008d84 <_calloc_r>
 800845c:	b160      	cbz	r0, 8008478 <_Balloc+0x64>
 800845e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008462:	e00e      	b.n	8008482 <_Balloc+0x6e>
 8008464:	2221      	movs	r2, #33	; 0x21
 8008466:	2104      	movs	r1, #4
 8008468:	4620      	mov	r0, r4
 800846a:	f000 fc8b 	bl	8008d84 <_calloc_r>
 800846e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008470:	60f0      	str	r0, [r6, #12]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e4      	bne.n	8008442 <_Balloc+0x2e>
 8008478:	2000      	movs	r0, #0
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	6802      	ldr	r2, [r0, #0]
 800847e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008482:	2300      	movs	r3, #0
 8008484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008488:	e7f7      	b.n	800847a <_Balloc+0x66>
 800848a:	bf00      	nop
 800848c:	0800a026 	.word	0x0800a026
 8008490:	0800a124 	.word	0x0800a124

08008494 <_Bfree>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008498:	4605      	mov	r5, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b976      	cbnz	r6, 80084bc <_Bfree+0x28>
 800849e:	2010      	movs	r0, #16
 80084a0:	f7ff ff82 	bl	80083a8 <malloc>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6268      	str	r0, [r5, #36]	; 0x24
 80084a8:	b920      	cbnz	r0, 80084b4 <_Bfree+0x20>
 80084aa:	218a      	movs	r1, #138	; 0x8a
 80084ac:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <_Bfree+0x3c>)
 80084ae:	4809      	ldr	r0, [pc, #36]	; (80084d4 <_Bfree+0x40>)
 80084b0:	f000 feec 	bl	800928c <__assert_func>
 80084b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084b8:	6006      	str	r6, [r0, #0]
 80084ba:	60c6      	str	r6, [r0, #12]
 80084bc:	b13c      	cbz	r4, 80084ce <_Bfree+0x3a>
 80084be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084c0:	6862      	ldr	r2, [r4, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084c8:	6021      	str	r1, [r4, #0]
 80084ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	0800a026 	.word	0x0800a026
 80084d4:	0800a124 	.word	0x0800a124

080084d8 <__multadd>:
 80084d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084dc:	4607      	mov	r7, r0
 80084de:	460c      	mov	r4, r1
 80084e0:	461e      	mov	r6, r3
 80084e2:	2000      	movs	r0, #0
 80084e4:	690d      	ldr	r5, [r1, #16]
 80084e6:	f101 0c14 	add.w	ip, r1, #20
 80084ea:	f8dc 3000 	ldr.w	r3, [ip]
 80084ee:	3001      	adds	r0, #1
 80084f0:	b299      	uxth	r1, r3
 80084f2:	fb02 6101 	mla	r1, r2, r1, r6
 80084f6:	0c1e      	lsrs	r6, r3, #16
 80084f8:	0c0b      	lsrs	r3, r1, #16
 80084fa:	fb02 3306 	mla	r3, r2, r6, r3
 80084fe:	b289      	uxth	r1, r1
 8008500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008504:	4285      	cmp	r5, r0
 8008506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800850a:	f84c 1b04 	str.w	r1, [ip], #4
 800850e:	dcec      	bgt.n	80084ea <__multadd+0x12>
 8008510:	b30e      	cbz	r6, 8008556 <__multadd+0x7e>
 8008512:	68a3      	ldr	r3, [r4, #8]
 8008514:	42ab      	cmp	r3, r5
 8008516:	dc19      	bgt.n	800854c <__multadd+0x74>
 8008518:	6861      	ldr	r1, [r4, #4]
 800851a:	4638      	mov	r0, r7
 800851c:	3101      	adds	r1, #1
 800851e:	f7ff ff79 	bl	8008414 <_Balloc>
 8008522:	4680      	mov	r8, r0
 8008524:	b928      	cbnz	r0, 8008532 <__multadd+0x5a>
 8008526:	4602      	mov	r2, r0
 8008528:	21b5      	movs	r1, #181	; 0xb5
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <__multadd+0x84>)
 800852c:	480c      	ldr	r0, [pc, #48]	; (8008560 <__multadd+0x88>)
 800852e:	f000 fead 	bl	800928c <__assert_func>
 8008532:	6922      	ldr	r2, [r4, #16]
 8008534:	f104 010c 	add.w	r1, r4, #12
 8008538:	3202      	adds	r2, #2
 800853a:	0092      	lsls	r2, r2, #2
 800853c:	300c      	adds	r0, #12
 800853e:	f7ff ff5b 	bl	80083f8 <memcpy>
 8008542:	4621      	mov	r1, r4
 8008544:	4638      	mov	r0, r7
 8008546:	f7ff ffa5 	bl	8008494 <_Bfree>
 800854a:	4644      	mov	r4, r8
 800854c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008550:	3501      	adds	r5, #1
 8008552:	615e      	str	r6, [r3, #20]
 8008554:	6125      	str	r5, [r4, #16]
 8008556:	4620      	mov	r0, r4
 8008558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800855c:	0800a098 	.word	0x0800a098
 8008560:	0800a124 	.word	0x0800a124

08008564 <__s2b>:
 8008564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008568:	4615      	mov	r5, r2
 800856a:	2209      	movs	r2, #9
 800856c:	461f      	mov	r7, r3
 800856e:	3308      	adds	r3, #8
 8008570:	460c      	mov	r4, r1
 8008572:	fb93 f3f2 	sdiv	r3, r3, r2
 8008576:	4606      	mov	r6, r0
 8008578:	2201      	movs	r2, #1
 800857a:	2100      	movs	r1, #0
 800857c:	429a      	cmp	r2, r3
 800857e:	db09      	blt.n	8008594 <__s2b+0x30>
 8008580:	4630      	mov	r0, r6
 8008582:	f7ff ff47 	bl	8008414 <_Balloc>
 8008586:	b940      	cbnz	r0, 800859a <__s2b+0x36>
 8008588:	4602      	mov	r2, r0
 800858a:	21ce      	movs	r1, #206	; 0xce
 800858c:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <__s2b+0x8c>)
 800858e:	4819      	ldr	r0, [pc, #100]	; (80085f4 <__s2b+0x90>)
 8008590:	f000 fe7c 	bl	800928c <__assert_func>
 8008594:	0052      	lsls	r2, r2, #1
 8008596:	3101      	adds	r1, #1
 8008598:	e7f0      	b.n	800857c <__s2b+0x18>
 800859a:	9b08      	ldr	r3, [sp, #32]
 800859c:	2d09      	cmp	r5, #9
 800859e:	6143      	str	r3, [r0, #20]
 80085a0:	f04f 0301 	mov.w	r3, #1
 80085a4:	6103      	str	r3, [r0, #16]
 80085a6:	dd16      	ble.n	80085d6 <__s2b+0x72>
 80085a8:	f104 0909 	add.w	r9, r4, #9
 80085ac:	46c8      	mov	r8, r9
 80085ae:	442c      	add	r4, r5
 80085b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085b4:	4601      	mov	r1, r0
 80085b6:	220a      	movs	r2, #10
 80085b8:	4630      	mov	r0, r6
 80085ba:	3b30      	subs	r3, #48	; 0x30
 80085bc:	f7ff ff8c 	bl	80084d8 <__multadd>
 80085c0:	45a0      	cmp	r8, r4
 80085c2:	d1f5      	bne.n	80085b0 <__s2b+0x4c>
 80085c4:	f1a5 0408 	sub.w	r4, r5, #8
 80085c8:	444c      	add	r4, r9
 80085ca:	1b2d      	subs	r5, r5, r4
 80085cc:	1963      	adds	r3, r4, r5
 80085ce:	42bb      	cmp	r3, r7
 80085d0:	db04      	blt.n	80085dc <__s2b+0x78>
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	2509      	movs	r5, #9
 80085d8:	340a      	adds	r4, #10
 80085da:	e7f6      	b.n	80085ca <__s2b+0x66>
 80085dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085e0:	4601      	mov	r1, r0
 80085e2:	220a      	movs	r2, #10
 80085e4:	4630      	mov	r0, r6
 80085e6:	3b30      	subs	r3, #48	; 0x30
 80085e8:	f7ff ff76 	bl	80084d8 <__multadd>
 80085ec:	e7ee      	b.n	80085cc <__s2b+0x68>
 80085ee:	bf00      	nop
 80085f0:	0800a098 	.word	0x0800a098
 80085f4:	0800a124 	.word	0x0800a124

080085f8 <__hi0bits>:
 80085f8:	0c02      	lsrs	r2, r0, #16
 80085fa:	0412      	lsls	r2, r2, #16
 80085fc:	4603      	mov	r3, r0
 80085fe:	b9ca      	cbnz	r2, 8008634 <__hi0bits+0x3c>
 8008600:	0403      	lsls	r3, r0, #16
 8008602:	2010      	movs	r0, #16
 8008604:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008608:	bf04      	itt	eq
 800860a:	021b      	lsleq	r3, r3, #8
 800860c:	3008      	addeq	r0, #8
 800860e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008612:	bf04      	itt	eq
 8008614:	011b      	lsleq	r3, r3, #4
 8008616:	3004      	addeq	r0, #4
 8008618:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800861c:	bf04      	itt	eq
 800861e:	009b      	lsleq	r3, r3, #2
 8008620:	3002      	addeq	r0, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	db05      	blt.n	8008632 <__hi0bits+0x3a>
 8008626:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800862a:	f100 0001 	add.w	r0, r0, #1
 800862e:	bf08      	it	eq
 8008630:	2020      	moveq	r0, #32
 8008632:	4770      	bx	lr
 8008634:	2000      	movs	r0, #0
 8008636:	e7e5      	b.n	8008604 <__hi0bits+0xc>

08008638 <__lo0bits>:
 8008638:	6803      	ldr	r3, [r0, #0]
 800863a:	4602      	mov	r2, r0
 800863c:	f013 0007 	ands.w	r0, r3, #7
 8008640:	d00b      	beq.n	800865a <__lo0bits+0x22>
 8008642:	07d9      	lsls	r1, r3, #31
 8008644:	d421      	bmi.n	800868a <__lo0bits+0x52>
 8008646:	0798      	lsls	r0, r3, #30
 8008648:	bf49      	itett	mi
 800864a:	085b      	lsrmi	r3, r3, #1
 800864c:	089b      	lsrpl	r3, r3, #2
 800864e:	2001      	movmi	r0, #1
 8008650:	6013      	strmi	r3, [r2, #0]
 8008652:	bf5c      	itt	pl
 8008654:	2002      	movpl	r0, #2
 8008656:	6013      	strpl	r3, [r2, #0]
 8008658:	4770      	bx	lr
 800865a:	b299      	uxth	r1, r3
 800865c:	b909      	cbnz	r1, 8008662 <__lo0bits+0x2a>
 800865e:	2010      	movs	r0, #16
 8008660:	0c1b      	lsrs	r3, r3, #16
 8008662:	b2d9      	uxtb	r1, r3
 8008664:	b909      	cbnz	r1, 800866a <__lo0bits+0x32>
 8008666:	3008      	adds	r0, #8
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	0719      	lsls	r1, r3, #28
 800866c:	bf04      	itt	eq
 800866e:	091b      	lsreq	r3, r3, #4
 8008670:	3004      	addeq	r0, #4
 8008672:	0799      	lsls	r1, r3, #30
 8008674:	bf04      	itt	eq
 8008676:	089b      	lsreq	r3, r3, #2
 8008678:	3002      	addeq	r0, #2
 800867a:	07d9      	lsls	r1, r3, #31
 800867c:	d403      	bmi.n	8008686 <__lo0bits+0x4e>
 800867e:	085b      	lsrs	r3, r3, #1
 8008680:	f100 0001 	add.w	r0, r0, #1
 8008684:	d003      	beq.n	800868e <__lo0bits+0x56>
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4770      	bx	lr
 800868a:	2000      	movs	r0, #0
 800868c:	4770      	bx	lr
 800868e:	2020      	movs	r0, #32
 8008690:	4770      	bx	lr
	...

08008694 <__i2b>:
 8008694:	b510      	push	{r4, lr}
 8008696:	460c      	mov	r4, r1
 8008698:	2101      	movs	r1, #1
 800869a:	f7ff febb 	bl	8008414 <_Balloc>
 800869e:	4602      	mov	r2, r0
 80086a0:	b928      	cbnz	r0, 80086ae <__i2b+0x1a>
 80086a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086a6:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <__i2b+0x24>)
 80086a8:	4804      	ldr	r0, [pc, #16]	; (80086bc <__i2b+0x28>)
 80086aa:	f000 fdef 	bl	800928c <__assert_func>
 80086ae:	2301      	movs	r3, #1
 80086b0:	6144      	str	r4, [r0, #20]
 80086b2:	6103      	str	r3, [r0, #16]
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	bf00      	nop
 80086b8:	0800a098 	.word	0x0800a098
 80086bc:	0800a124 	.word	0x0800a124

080086c0 <__multiply>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	4691      	mov	r9, r2
 80086c6:	690a      	ldr	r2, [r1, #16]
 80086c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086cc:	460c      	mov	r4, r1
 80086ce:	429a      	cmp	r2, r3
 80086d0:	bfbe      	ittt	lt
 80086d2:	460b      	movlt	r3, r1
 80086d4:	464c      	movlt	r4, r9
 80086d6:	4699      	movlt	r9, r3
 80086d8:	6927      	ldr	r7, [r4, #16]
 80086da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	6861      	ldr	r1, [r4, #4]
 80086e2:	eb07 060a 	add.w	r6, r7, sl
 80086e6:	42b3      	cmp	r3, r6
 80086e8:	b085      	sub	sp, #20
 80086ea:	bfb8      	it	lt
 80086ec:	3101      	addlt	r1, #1
 80086ee:	f7ff fe91 	bl	8008414 <_Balloc>
 80086f2:	b930      	cbnz	r0, 8008702 <__multiply+0x42>
 80086f4:	4602      	mov	r2, r0
 80086f6:	f240 115d 	movw	r1, #349	; 0x15d
 80086fa:	4b43      	ldr	r3, [pc, #268]	; (8008808 <__multiply+0x148>)
 80086fc:	4843      	ldr	r0, [pc, #268]	; (800880c <__multiply+0x14c>)
 80086fe:	f000 fdc5 	bl	800928c <__assert_func>
 8008702:	f100 0514 	add.w	r5, r0, #20
 8008706:	462b      	mov	r3, r5
 8008708:	2200      	movs	r2, #0
 800870a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800870e:	4543      	cmp	r3, r8
 8008710:	d321      	bcc.n	8008756 <__multiply+0x96>
 8008712:	f104 0314 	add.w	r3, r4, #20
 8008716:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800871a:	f109 0314 	add.w	r3, r9, #20
 800871e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008722:	9202      	str	r2, [sp, #8]
 8008724:	1b3a      	subs	r2, r7, r4
 8008726:	3a15      	subs	r2, #21
 8008728:	f022 0203 	bic.w	r2, r2, #3
 800872c:	3204      	adds	r2, #4
 800872e:	f104 0115 	add.w	r1, r4, #21
 8008732:	428f      	cmp	r7, r1
 8008734:	bf38      	it	cc
 8008736:	2204      	movcc	r2, #4
 8008738:	9201      	str	r2, [sp, #4]
 800873a:	9a02      	ldr	r2, [sp, #8]
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	429a      	cmp	r2, r3
 8008740:	d80c      	bhi.n	800875c <__multiply+0x9c>
 8008742:	2e00      	cmp	r6, #0
 8008744:	dd03      	ble.n	800874e <__multiply+0x8e>
 8008746:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800874a:	2b00      	cmp	r3, #0
 800874c:	d059      	beq.n	8008802 <__multiply+0x142>
 800874e:	6106      	str	r6, [r0, #16]
 8008750:	b005      	add	sp, #20
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	f843 2b04 	str.w	r2, [r3], #4
 800875a:	e7d8      	b.n	800870e <__multiply+0x4e>
 800875c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008760:	f1ba 0f00 	cmp.w	sl, #0
 8008764:	d023      	beq.n	80087ae <__multiply+0xee>
 8008766:	46a9      	mov	r9, r5
 8008768:	f04f 0c00 	mov.w	ip, #0
 800876c:	f104 0e14 	add.w	lr, r4, #20
 8008770:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008774:	f8d9 1000 	ldr.w	r1, [r9]
 8008778:	fa1f fb82 	uxth.w	fp, r2
 800877c:	b289      	uxth	r1, r1
 800877e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008782:	4461      	add	r1, ip
 8008784:	f8d9 c000 	ldr.w	ip, [r9]
 8008788:	0c12      	lsrs	r2, r2, #16
 800878a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800878e:	fb0a c202 	mla	r2, sl, r2, ip
 8008792:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008796:	b289      	uxth	r1, r1
 8008798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800879c:	4577      	cmp	r7, lr
 800879e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087a2:	f849 1b04 	str.w	r1, [r9], #4
 80087a6:	d8e3      	bhi.n	8008770 <__multiply+0xb0>
 80087a8:	9a01      	ldr	r2, [sp, #4]
 80087aa:	f845 c002 	str.w	ip, [r5, r2]
 80087ae:	9a03      	ldr	r2, [sp, #12]
 80087b0:	3304      	adds	r3, #4
 80087b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087b6:	f1b9 0f00 	cmp.w	r9, #0
 80087ba:	d020      	beq.n	80087fe <__multiply+0x13e>
 80087bc:	46ae      	mov	lr, r5
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	6829      	ldr	r1, [r5, #0]
 80087c4:	f104 0c14 	add.w	ip, r4, #20
 80087c8:	f8bc b000 	ldrh.w	fp, [ip]
 80087cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087d0:	b289      	uxth	r1, r1
 80087d2:	fb09 220b 	mla	r2, r9, fp, r2
 80087d6:	4492      	add	sl, r2
 80087d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087dc:	f84e 1b04 	str.w	r1, [lr], #4
 80087e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087e4:	f8be 1000 	ldrh.w	r1, [lr]
 80087e8:	0c12      	lsrs	r2, r2, #16
 80087ea:	fb09 1102 	mla	r1, r9, r2, r1
 80087ee:	4567      	cmp	r7, ip
 80087f0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087f8:	d8e6      	bhi.n	80087c8 <__multiply+0x108>
 80087fa:	9a01      	ldr	r2, [sp, #4]
 80087fc:	50a9      	str	r1, [r5, r2]
 80087fe:	3504      	adds	r5, #4
 8008800:	e79b      	b.n	800873a <__multiply+0x7a>
 8008802:	3e01      	subs	r6, #1
 8008804:	e79d      	b.n	8008742 <__multiply+0x82>
 8008806:	bf00      	nop
 8008808:	0800a098 	.word	0x0800a098
 800880c:	0800a124 	.word	0x0800a124

08008810 <__pow5mult>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4615      	mov	r5, r2
 8008816:	f012 0203 	ands.w	r2, r2, #3
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	d007      	beq.n	8008830 <__pow5mult+0x20>
 8008820:	4c25      	ldr	r4, [pc, #148]	; (80088b8 <__pow5mult+0xa8>)
 8008822:	3a01      	subs	r2, #1
 8008824:	2300      	movs	r3, #0
 8008826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800882a:	f7ff fe55 	bl	80084d8 <__multadd>
 800882e:	4607      	mov	r7, r0
 8008830:	10ad      	asrs	r5, r5, #2
 8008832:	d03d      	beq.n	80088b0 <__pow5mult+0xa0>
 8008834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008836:	b97c      	cbnz	r4, 8008858 <__pow5mult+0x48>
 8008838:	2010      	movs	r0, #16
 800883a:	f7ff fdb5 	bl	80083a8 <malloc>
 800883e:	4602      	mov	r2, r0
 8008840:	6270      	str	r0, [r6, #36]	; 0x24
 8008842:	b928      	cbnz	r0, 8008850 <__pow5mult+0x40>
 8008844:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008848:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <__pow5mult+0xac>)
 800884a:	481d      	ldr	r0, [pc, #116]	; (80088c0 <__pow5mult+0xb0>)
 800884c:	f000 fd1e 	bl	800928c <__assert_func>
 8008850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008854:	6004      	str	r4, [r0, #0]
 8008856:	60c4      	str	r4, [r0, #12]
 8008858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800885c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008860:	b94c      	cbnz	r4, 8008876 <__pow5mult+0x66>
 8008862:	f240 2171 	movw	r1, #625	; 0x271
 8008866:	4630      	mov	r0, r6
 8008868:	f7ff ff14 	bl	8008694 <__i2b>
 800886c:	2300      	movs	r3, #0
 800886e:	4604      	mov	r4, r0
 8008870:	f8c8 0008 	str.w	r0, [r8, #8]
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	f04f 0900 	mov.w	r9, #0
 800887a:	07eb      	lsls	r3, r5, #31
 800887c:	d50a      	bpl.n	8008894 <__pow5mult+0x84>
 800887e:	4639      	mov	r1, r7
 8008880:	4622      	mov	r2, r4
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ff1c 	bl	80086c0 <__multiply>
 8008888:	4680      	mov	r8, r0
 800888a:	4639      	mov	r1, r7
 800888c:	4630      	mov	r0, r6
 800888e:	f7ff fe01 	bl	8008494 <_Bfree>
 8008892:	4647      	mov	r7, r8
 8008894:	106d      	asrs	r5, r5, #1
 8008896:	d00b      	beq.n	80088b0 <__pow5mult+0xa0>
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	b938      	cbnz	r0, 80088ac <__pow5mult+0x9c>
 800889c:	4622      	mov	r2, r4
 800889e:	4621      	mov	r1, r4
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7ff ff0d 	bl	80086c0 <__multiply>
 80088a6:	6020      	str	r0, [r4, #0]
 80088a8:	f8c0 9000 	str.w	r9, [r0]
 80088ac:	4604      	mov	r4, r0
 80088ae:	e7e4      	b.n	800887a <__pow5mult+0x6a>
 80088b0:	4638      	mov	r0, r7
 80088b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088b6:	bf00      	nop
 80088b8:	0800a270 	.word	0x0800a270
 80088bc:	0800a026 	.word	0x0800a026
 80088c0:	0800a124 	.word	0x0800a124

080088c4 <__lshift>:
 80088c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c8:	460c      	mov	r4, r1
 80088ca:	4607      	mov	r7, r0
 80088cc:	4691      	mov	r9, r2
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	6849      	ldr	r1, [r1, #4]
 80088d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088d6:	68a3      	ldr	r3, [r4, #8]
 80088d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088dc:	f108 0601 	add.w	r6, r8, #1
 80088e0:	42b3      	cmp	r3, r6
 80088e2:	db0b      	blt.n	80088fc <__lshift+0x38>
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff fd95 	bl	8008414 <_Balloc>
 80088ea:	4605      	mov	r5, r0
 80088ec:	b948      	cbnz	r0, 8008902 <__lshift+0x3e>
 80088ee:	4602      	mov	r2, r0
 80088f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088f4:	4b29      	ldr	r3, [pc, #164]	; (800899c <__lshift+0xd8>)
 80088f6:	482a      	ldr	r0, [pc, #168]	; (80089a0 <__lshift+0xdc>)
 80088f8:	f000 fcc8 	bl	800928c <__assert_func>
 80088fc:	3101      	adds	r1, #1
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	e7ee      	b.n	80088e0 <__lshift+0x1c>
 8008902:	2300      	movs	r3, #0
 8008904:	f100 0114 	add.w	r1, r0, #20
 8008908:	f100 0210 	add.w	r2, r0, #16
 800890c:	4618      	mov	r0, r3
 800890e:	4553      	cmp	r3, sl
 8008910:	db37      	blt.n	8008982 <__lshift+0xbe>
 8008912:	6920      	ldr	r0, [r4, #16]
 8008914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008918:	f104 0314 	add.w	r3, r4, #20
 800891c:	f019 091f 	ands.w	r9, r9, #31
 8008920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008924:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008928:	d02f      	beq.n	800898a <__lshift+0xc6>
 800892a:	468a      	mov	sl, r1
 800892c:	f04f 0c00 	mov.w	ip, #0
 8008930:	f1c9 0e20 	rsb	lr, r9, #32
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	fa02 f209 	lsl.w	r2, r2, r9
 800893a:	ea42 020c 	orr.w	r2, r2, ip
 800893e:	f84a 2b04 	str.w	r2, [sl], #4
 8008942:	f853 2b04 	ldr.w	r2, [r3], #4
 8008946:	4298      	cmp	r0, r3
 8008948:	fa22 fc0e 	lsr.w	ip, r2, lr
 800894c:	d8f2      	bhi.n	8008934 <__lshift+0x70>
 800894e:	1b03      	subs	r3, r0, r4
 8008950:	3b15      	subs	r3, #21
 8008952:	f023 0303 	bic.w	r3, r3, #3
 8008956:	3304      	adds	r3, #4
 8008958:	f104 0215 	add.w	r2, r4, #21
 800895c:	4290      	cmp	r0, r2
 800895e:	bf38      	it	cc
 8008960:	2304      	movcc	r3, #4
 8008962:	f841 c003 	str.w	ip, [r1, r3]
 8008966:	f1bc 0f00 	cmp.w	ip, #0
 800896a:	d001      	beq.n	8008970 <__lshift+0xac>
 800896c:	f108 0602 	add.w	r6, r8, #2
 8008970:	3e01      	subs	r6, #1
 8008972:	4638      	mov	r0, r7
 8008974:	4621      	mov	r1, r4
 8008976:	612e      	str	r6, [r5, #16]
 8008978:	f7ff fd8c 	bl	8008494 <_Bfree>
 800897c:	4628      	mov	r0, r5
 800897e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008982:	f842 0f04 	str.w	r0, [r2, #4]!
 8008986:	3301      	adds	r3, #1
 8008988:	e7c1      	b.n	800890e <__lshift+0x4a>
 800898a:	3904      	subs	r1, #4
 800898c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008990:	4298      	cmp	r0, r3
 8008992:	f841 2f04 	str.w	r2, [r1, #4]!
 8008996:	d8f9      	bhi.n	800898c <__lshift+0xc8>
 8008998:	e7ea      	b.n	8008970 <__lshift+0xac>
 800899a:	bf00      	nop
 800899c:	0800a098 	.word	0x0800a098
 80089a0:	0800a124 	.word	0x0800a124

080089a4 <__mcmp>:
 80089a4:	4603      	mov	r3, r0
 80089a6:	690a      	ldr	r2, [r1, #16]
 80089a8:	6900      	ldr	r0, [r0, #16]
 80089aa:	b530      	push	{r4, r5, lr}
 80089ac:	1a80      	subs	r0, r0, r2
 80089ae:	d10d      	bne.n	80089cc <__mcmp+0x28>
 80089b0:	3314      	adds	r3, #20
 80089b2:	3114      	adds	r1, #20
 80089b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089c4:	4295      	cmp	r5, r2
 80089c6:	d002      	beq.n	80089ce <__mcmp+0x2a>
 80089c8:	d304      	bcc.n	80089d4 <__mcmp+0x30>
 80089ca:	2001      	movs	r0, #1
 80089cc:	bd30      	pop	{r4, r5, pc}
 80089ce:	42a3      	cmp	r3, r4
 80089d0:	d3f4      	bcc.n	80089bc <__mcmp+0x18>
 80089d2:	e7fb      	b.n	80089cc <__mcmp+0x28>
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089d8:	e7f8      	b.n	80089cc <__mcmp+0x28>
	...

080089dc <__mdiff>:
 80089dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460d      	mov	r5, r1
 80089e2:	4607      	mov	r7, r0
 80089e4:	4611      	mov	r1, r2
 80089e6:	4628      	mov	r0, r5
 80089e8:	4614      	mov	r4, r2
 80089ea:	f7ff ffdb 	bl	80089a4 <__mcmp>
 80089ee:	1e06      	subs	r6, r0, #0
 80089f0:	d111      	bne.n	8008a16 <__mdiff+0x3a>
 80089f2:	4631      	mov	r1, r6
 80089f4:	4638      	mov	r0, r7
 80089f6:	f7ff fd0d 	bl	8008414 <_Balloc>
 80089fa:	4602      	mov	r2, r0
 80089fc:	b928      	cbnz	r0, 8008a0a <__mdiff+0x2e>
 80089fe:	f240 2132 	movw	r1, #562	; 0x232
 8008a02:	4b3a      	ldr	r3, [pc, #232]	; (8008aec <__mdiff+0x110>)
 8008a04:	483a      	ldr	r0, [pc, #232]	; (8008af0 <__mdiff+0x114>)
 8008a06:	f000 fc41 	bl	800928c <__assert_func>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a10:	4610      	mov	r0, r2
 8008a12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a16:	bfa4      	itt	ge
 8008a18:	4623      	movge	r3, r4
 8008a1a:	462c      	movge	r4, r5
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	6861      	ldr	r1, [r4, #4]
 8008a20:	bfa6      	itte	ge
 8008a22:	461d      	movge	r5, r3
 8008a24:	2600      	movge	r6, #0
 8008a26:	2601      	movlt	r6, #1
 8008a28:	f7ff fcf4 	bl	8008414 <_Balloc>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	b918      	cbnz	r0, 8008a38 <__mdiff+0x5c>
 8008a30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a34:	4b2d      	ldr	r3, [pc, #180]	; (8008aec <__mdiff+0x110>)
 8008a36:	e7e5      	b.n	8008a04 <__mdiff+0x28>
 8008a38:	f102 0814 	add.w	r8, r2, #20
 8008a3c:	46c2      	mov	sl, r8
 8008a3e:	f04f 0c00 	mov.w	ip, #0
 8008a42:	6927      	ldr	r7, [r4, #16]
 8008a44:	60c6      	str	r6, [r0, #12]
 8008a46:	692e      	ldr	r6, [r5, #16]
 8008a48:	f104 0014 	add.w	r0, r4, #20
 8008a4c:	f105 0914 	add.w	r9, r5, #20
 8008a50:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008a54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a58:	3410      	adds	r4, #16
 8008a5a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008a5e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a62:	fa1f f18b 	uxth.w	r1, fp
 8008a66:	448c      	add	ip, r1
 8008a68:	b299      	uxth	r1, r3
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	ebac 0101 	sub.w	r1, ip, r1
 8008a70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a74:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a78:	b289      	uxth	r1, r1
 8008a7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008a7e:	454e      	cmp	r6, r9
 8008a80:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a84:	f84a 3b04 	str.w	r3, [sl], #4
 8008a88:	d8e7      	bhi.n	8008a5a <__mdiff+0x7e>
 8008a8a:	1b73      	subs	r3, r6, r5
 8008a8c:	3b15      	subs	r3, #21
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	3515      	adds	r5, #21
 8008a94:	3304      	adds	r3, #4
 8008a96:	42ae      	cmp	r6, r5
 8008a98:	bf38      	it	cc
 8008a9a:	2304      	movcc	r3, #4
 8008a9c:	4418      	add	r0, r3
 8008a9e:	4443      	add	r3, r8
 8008aa0:	461e      	mov	r6, r3
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	4575      	cmp	r5, lr
 8008aa6:	d30e      	bcc.n	8008ac6 <__mdiff+0xea>
 8008aa8:	f10e 0103 	add.w	r1, lr, #3
 8008aac:	1a09      	subs	r1, r1, r0
 8008aae:	f021 0103 	bic.w	r1, r1, #3
 8008ab2:	3803      	subs	r0, #3
 8008ab4:	4586      	cmp	lr, r0
 8008ab6:	bf38      	it	cc
 8008ab8:	2100      	movcc	r1, #0
 8008aba:	4419      	add	r1, r3
 8008abc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ac0:	b18b      	cbz	r3, 8008ae6 <__mdiff+0x10a>
 8008ac2:	6117      	str	r7, [r2, #16]
 8008ac4:	e7a4      	b.n	8008a10 <__mdiff+0x34>
 8008ac6:	f855 8b04 	ldr.w	r8, [r5], #4
 8008aca:	fa1f f188 	uxth.w	r1, r8
 8008ace:	4461      	add	r1, ip
 8008ad0:	140c      	asrs	r4, r1, #16
 8008ad2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ad6:	b289      	uxth	r1, r1
 8008ad8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008adc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008ae0:	f846 1b04 	str.w	r1, [r6], #4
 8008ae4:	e7de      	b.n	8008aa4 <__mdiff+0xc8>
 8008ae6:	3f01      	subs	r7, #1
 8008ae8:	e7e8      	b.n	8008abc <__mdiff+0xe0>
 8008aea:	bf00      	nop
 8008aec:	0800a098 	.word	0x0800a098
 8008af0:	0800a124 	.word	0x0800a124

08008af4 <__ulp>:
 8008af4:	4b11      	ldr	r3, [pc, #68]	; (8008b3c <__ulp+0x48>)
 8008af6:	400b      	ands	r3, r1
 8008af8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dd02      	ble.n	8008b06 <__ulp+0x12>
 8008b00:	2000      	movs	r0, #0
 8008b02:	4619      	mov	r1, r3
 8008b04:	4770      	bx	lr
 8008b06:	425b      	negs	r3, r3
 8008b08:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008b0c:	f04f 0000 	mov.w	r0, #0
 8008b10:	f04f 0100 	mov.w	r1, #0
 8008b14:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b18:	da04      	bge.n	8008b24 <__ulp+0x30>
 8008b1a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b1e:	fa43 f102 	asr.w	r1, r3, r2
 8008b22:	4770      	bx	lr
 8008b24:	f1a2 0314 	sub.w	r3, r2, #20
 8008b28:	2b1e      	cmp	r3, #30
 8008b2a:	bfd6      	itet	le
 8008b2c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008b30:	2301      	movgt	r3, #1
 8008b32:	fa22 f303 	lsrle.w	r3, r2, r3
 8008b36:	4618      	mov	r0, r3
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	7ff00000 	.word	0x7ff00000

08008b40 <__b2d>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	6907      	ldr	r7, [r0, #16]
 8008b46:	f100 0914 	add.w	r9, r0, #20
 8008b4a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008b4e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008b52:	f1a7 0804 	sub.w	r8, r7, #4
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff fd4e 	bl	80085f8 <__hi0bits>
 8008b5c:	f1c0 0320 	rsb	r3, r0, #32
 8008b60:	280a      	cmp	r0, #10
 8008b62:	600b      	str	r3, [r1, #0]
 8008b64:	491f      	ldr	r1, [pc, #124]	; (8008be4 <__b2d+0xa4>)
 8008b66:	dc17      	bgt.n	8008b98 <__b2d+0x58>
 8008b68:	45c1      	cmp	r9, r8
 8008b6a:	bf28      	it	cs
 8008b6c:	2200      	movcs	r2, #0
 8008b6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b72:	fa26 f30c 	lsr.w	r3, r6, ip
 8008b76:	bf38      	it	cc
 8008b78:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008b7c:	ea43 0501 	orr.w	r5, r3, r1
 8008b80:	f100 0315 	add.w	r3, r0, #21
 8008b84:	fa06 f303 	lsl.w	r3, r6, r3
 8008b88:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b8c:	ea43 0402 	orr.w	r4, r3, r2
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b98:	45c1      	cmp	r9, r8
 8008b9a:	bf2e      	itee	cs
 8008b9c:	2200      	movcs	r2, #0
 8008b9e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ba2:	f1a7 0808 	subcc.w	r8, r7, #8
 8008ba6:	f1b0 030b 	subs.w	r3, r0, #11
 8008baa:	d016      	beq.n	8008bda <__b2d+0x9a>
 8008bac:	f1c3 0720 	rsb	r7, r3, #32
 8008bb0:	fa22 f107 	lsr.w	r1, r2, r7
 8008bb4:	45c8      	cmp	r8, r9
 8008bb6:	fa06 f603 	lsl.w	r6, r6, r3
 8008bba:	ea46 0601 	orr.w	r6, r6, r1
 8008bbe:	bf94      	ite	ls
 8008bc0:	2100      	movls	r1, #0
 8008bc2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008bc6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008bca:	fa02 f003 	lsl.w	r0, r2, r3
 8008bce:	40f9      	lsrs	r1, r7
 8008bd0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008bd4:	ea40 0401 	orr.w	r4, r0, r1
 8008bd8:	e7da      	b.n	8008b90 <__b2d+0x50>
 8008bda:	4614      	mov	r4, r2
 8008bdc:	ea46 0501 	orr.w	r5, r6, r1
 8008be0:	e7d6      	b.n	8008b90 <__b2d+0x50>
 8008be2:	bf00      	nop
 8008be4:	3ff00000 	.word	0x3ff00000

08008be8 <__d2b>:
 8008be8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008bec:	2101      	movs	r1, #1
 8008bee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008bf2:	4690      	mov	r8, r2
 8008bf4:	461d      	mov	r5, r3
 8008bf6:	f7ff fc0d 	bl	8008414 <_Balloc>
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	b930      	cbnz	r0, 8008c0c <__d2b+0x24>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	f240 310a 	movw	r1, #778	; 0x30a
 8008c04:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <__d2b+0xb0>)
 8008c06:	4825      	ldr	r0, [pc, #148]	; (8008c9c <__d2b+0xb4>)
 8008c08:	f000 fb40 	bl	800928c <__assert_func>
 8008c0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008c10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008c14:	bb2d      	cbnz	r5, 8008c62 <__d2b+0x7a>
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	f1b8 0300 	subs.w	r3, r8, #0
 8008c1c:	d026      	beq.n	8008c6c <__d2b+0x84>
 8008c1e:	4668      	mov	r0, sp
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	f7ff fd09 	bl	8008638 <__lo0bits>
 8008c26:	9900      	ldr	r1, [sp, #0]
 8008c28:	b1f0      	cbz	r0, 8008c68 <__d2b+0x80>
 8008c2a:	9a01      	ldr	r2, [sp, #4]
 8008c2c:	f1c0 0320 	rsb	r3, r0, #32
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	430b      	orrs	r3, r1
 8008c36:	40c2      	lsrs	r2, r0
 8008c38:	6163      	str	r3, [r4, #20]
 8008c3a:	9201      	str	r2, [sp, #4]
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bf14      	ite	ne
 8008c42:	2102      	movne	r1, #2
 8008c44:	2101      	moveq	r1, #1
 8008c46:	61a3      	str	r3, [r4, #24]
 8008c48:	6121      	str	r1, [r4, #16]
 8008c4a:	b1c5      	cbz	r5, 8008c7e <__d2b+0x96>
 8008c4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c50:	4405      	add	r5, r0
 8008c52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c56:	603d      	str	r5, [r7, #0]
 8008c58:	6030      	str	r0, [r6, #0]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	b002      	add	sp, #8
 8008c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c66:	e7d6      	b.n	8008c16 <__d2b+0x2e>
 8008c68:	6161      	str	r1, [r4, #20]
 8008c6a:	e7e7      	b.n	8008c3c <__d2b+0x54>
 8008c6c:	a801      	add	r0, sp, #4
 8008c6e:	f7ff fce3 	bl	8008638 <__lo0bits>
 8008c72:	2101      	movs	r1, #1
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	6121      	str	r1, [r4, #16]
 8008c78:	6163      	str	r3, [r4, #20]
 8008c7a:	3020      	adds	r0, #32
 8008c7c:	e7e5      	b.n	8008c4a <__d2b+0x62>
 8008c7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008c82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c86:	6038      	str	r0, [r7, #0]
 8008c88:	6918      	ldr	r0, [r3, #16]
 8008c8a:	f7ff fcb5 	bl	80085f8 <__hi0bits>
 8008c8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008c92:	6031      	str	r1, [r6, #0]
 8008c94:	e7e1      	b.n	8008c5a <__d2b+0x72>
 8008c96:	bf00      	nop
 8008c98:	0800a098 	.word	0x0800a098
 8008c9c:	0800a124 	.word	0x0800a124

08008ca0 <__ratio>:
 8008ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	4688      	mov	r8, r1
 8008ca6:	4669      	mov	r1, sp
 8008ca8:	4681      	mov	r9, r0
 8008caa:	f7ff ff49 	bl	8008b40 <__b2d>
 8008cae:	460f      	mov	r7, r1
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	a901      	add	r1, sp, #4
 8008cb8:	f7ff ff42 	bl	8008b40 <__b2d>
 8008cbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cc0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008cc4:	468b      	mov	fp, r1
 8008cc6:	eba3 0c02 	sub.w	ip, r3, r2
 8008cca:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008cce:	1a9b      	subs	r3, r3, r2
 8008cd0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bfd5      	itete	le
 8008cd8:	460a      	movle	r2, r1
 8008cda:	462a      	movgt	r2, r5
 8008cdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ce0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ce4:	bfd8      	it	le
 8008ce6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008cea:	465b      	mov	r3, fp
 8008cec:	4602      	mov	r2, r0
 8008cee:	4639      	mov	r1, r7
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7f7 fdcf 	bl	8000894 <__aeabi_ddiv>
 8008cf6:	b003      	add	sp, #12
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cfc <__copybits>:
 8008cfc:	3901      	subs	r1, #1
 8008cfe:	b570      	push	{r4, r5, r6, lr}
 8008d00:	1149      	asrs	r1, r1, #5
 8008d02:	6914      	ldr	r4, [r2, #16]
 8008d04:	3101      	adds	r1, #1
 8008d06:	f102 0314 	add.w	r3, r2, #20
 8008d0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d12:	1f05      	subs	r5, r0, #4
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d30c      	bcc.n	8008d32 <__copybits+0x36>
 8008d18:	1aa3      	subs	r3, r4, r2
 8008d1a:	3b11      	subs	r3, #17
 8008d1c:	f023 0303 	bic.w	r3, r3, #3
 8008d20:	3211      	adds	r2, #17
 8008d22:	42a2      	cmp	r2, r4
 8008d24:	bf88      	it	hi
 8008d26:	2300      	movhi	r3, #0
 8008d28:	4418      	add	r0, r3
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	4288      	cmp	r0, r1
 8008d2e:	d305      	bcc.n	8008d3c <__copybits+0x40>
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d36:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d3a:	e7eb      	b.n	8008d14 <__copybits+0x18>
 8008d3c:	f840 3b04 	str.w	r3, [r0], #4
 8008d40:	e7f4      	b.n	8008d2c <__copybits+0x30>

08008d42 <__any_on>:
 8008d42:	f100 0214 	add.w	r2, r0, #20
 8008d46:	6900      	ldr	r0, [r0, #16]
 8008d48:	114b      	asrs	r3, r1, #5
 8008d4a:	4298      	cmp	r0, r3
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	db11      	blt.n	8008d74 <__any_on+0x32>
 8008d50:	dd0a      	ble.n	8008d68 <__any_on+0x26>
 8008d52:	f011 011f 	ands.w	r1, r1, #31
 8008d56:	d007      	beq.n	8008d68 <__any_on+0x26>
 8008d58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d5c:	fa24 f001 	lsr.w	r0, r4, r1
 8008d60:	fa00 f101 	lsl.w	r1, r0, r1
 8008d64:	428c      	cmp	r4, r1
 8008d66:	d10b      	bne.n	8008d80 <__any_on+0x3e>
 8008d68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d803      	bhi.n	8008d78 <__any_on+0x36>
 8008d70:	2000      	movs	r0, #0
 8008d72:	bd10      	pop	{r4, pc}
 8008d74:	4603      	mov	r3, r0
 8008d76:	e7f7      	b.n	8008d68 <__any_on+0x26>
 8008d78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d0f5      	beq.n	8008d6c <__any_on+0x2a>
 8008d80:	2001      	movs	r0, #1
 8008d82:	e7f6      	b.n	8008d72 <__any_on+0x30>

08008d84 <_calloc_r>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	fba1 5402 	umull	r5, r4, r1, r2
 8008d8a:	b934      	cbnz	r4, 8008d9a <_calloc_r+0x16>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f000 f875 	bl	8008e7c <_malloc_r>
 8008d92:	4606      	mov	r6, r0
 8008d94:	b928      	cbnz	r0, 8008da2 <_calloc_r+0x1e>
 8008d96:	4630      	mov	r0, r6
 8008d98:	bd70      	pop	{r4, r5, r6, pc}
 8008d9a:	220c      	movs	r2, #12
 8008d9c:	2600      	movs	r6, #0
 8008d9e:	6002      	str	r2, [r0, #0]
 8008da0:	e7f9      	b.n	8008d96 <_calloc_r+0x12>
 8008da2:	462a      	mov	r2, r5
 8008da4:	4621      	mov	r1, r4
 8008da6:	f7fc fbf1 	bl	800558c <memset>
 8008daa:	e7f4      	b.n	8008d96 <_calloc_r+0x12>

08008dac <_free_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4605      	mov	r5, r0
 8008db0:	2900      	cmp	r1, #0
 8008db2:	d040      	beq.n	8008e36 <_free_r+0x8a>
 8008db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db8:	1f0c      	subs	r4, r1, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfb8      	it	lt
 8008dbe:	18e4      	addlt	r4, r4, r3
 8008dc0:	f000 faae 	bl	8009320 <__malloc_lock>
 8008dc4:	4a1c      	ldr	r2, [pc, #112]	; (8008e38 <_free_r+0x8c>)
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	b933      	cbnz	r3, 8008dd8 <_free_r+0x2c>
 8008dca:	6063      	str	r3, [r4, #4]
 8008dcc:	6014      	str	r4, [r2, #0]
 8008dce:	4628      	mov	r0, r5
 8008dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dd4:	f000 baaa 	b.w	800932c <__malloc_unlock>
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d908      	bls.n	8008dee <_free_r+0x42>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	1821      	adds	r1, r4, r0
 8008de0:	428b      	cmp	r3, r1
 8008de2:	bf01      	itttt	eq
 8008de4:	6819      	ldreq	r1, [r3, #0]
 8008de6:	685b      	ldreq	r3, [r3, #4]
 8008de8:	1809      	addeq	r1, r1, r0
 8008dea:	6021      	streq	r1, [r4, #0]
 8008dec:	e7ed      	b.n	8008dca <_free_r+0x1e>
 8008dee:	461a      	mov	r2, r3
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	b10b      	cbz	r3, 8008df8 <_free_r+0x4c>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d9fa      	bls.n	8008dee <_free_r+0x42>
 8008df8:	6811      	ldr	r1, [r2, #0]
 8008dfa:	1850      	adds	r0, r2, r1
 8008dfc:	42a0      	cmp	r0, r4
 8008dfe:	d10b      	bne.n	8008e18 <_free_r+0x6c>
 8008e00:	6820      	ldr	r0, [r4, #0]
 8008e02:	4401      	add	r1, r0
 8008e04:	1850      	adds	r0, r2, r1
 8008e06:	4283      	cmp	r3, r0
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	d1e0      	bne.n	8008dce <_free_r+0x22>
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	4401      	add	r1, r0
 8008e12:	6011      	str	r1, [r2, #0]
 8008e14:	6053      	str	r3, [r2, #4]
 8008e16:	e7da      	b.n	8008dce <_free_r+0x22>
 8008e18:	d902      	bls.n	8008e20 <_free_r+0x74>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	602b      	str	r3, [r5, #0]
 8008e1e:	e7d6      	b.n	8008dce <_free_r+0x22>
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	1821      	adds	r1, r4, r0
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf01      	itttt	eq
 8008e28:	6819      	ldreq	r1, [r3, #0]
 8008e2a:	685b      	ldreq	r3, [r3, #4]
 8008e2c:	1809      	addeq	r1, r1, r0
 8008e2e:	6021      	streq	r1, [r4, #0]
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	6054      	str	r4, [r2, #4]
 8008e34:	e7cb      	b.n	8008dce <_free_r+0x22>
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20000750 	.word	0x20000750

08008e3c <sbrk_aligned>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4e0e      	ldr	r6, [pc, #56]	; (8008e78 <sbrk_aligned+0x3c>)
 8008e40:	460c      	mov	r4, r1
 8008e42:	6831      	ldr	r1, [r6, #0]
 8008e44:	4605      	mov	r5, r0
 8008e46:	b911      	cbnz	r1, 8008e4e <sbrk_aligned+0x12>
 8008e48:	f000 f9ee 	bl	8009228 <_sbrk_r>
 8008e4c:	6030      	str	r0, [r6, #0]
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f000 f9e9 	bl	8009228 <_sbrk_r>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d00a      	beq.n	8008e70 <sbrk_aligned+0x34>
 8008e5a:	1cc4      	adds	r4, r0, #3
 8008e5c:	f024 0403 	bic.w	r4, r4, #3
 8008e60:	42a0      	cmp	r0, r4
 8008e62:	d007      	beq.n	8008e74 <sbrk_aligned+0x38>
 8008e64:	1a21      	subs	r1, r4, r0
 8008e66:	4628      	mov	r0, r5
 8008e68:	f000 f9de 	bl	8009228 <_sbrk_r>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d101      	bne.n	8008e74 <sbrk_aligned+0x38>
 8008e70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e74:	4620      	mov	r0, r4
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	20000754 	.word	0x20000754

08008e7c <_malloc_r>:
 8008e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	1ccd      	adds	r5, r1, #3
 8008e82:	f025 0503 	bic.w	r5, r5, #3
 8008e86:	3508      	adds	r5, #8
 8008e88:	2d0c      	cmp	r5, #12
 8008e8a:	bf38      	it	cc
 8008e8c:	250c      	movcc	r5, #12
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	4607      	mov	r7, r0
 8008e92:	db01      	blt.n	8008e98 <_malloc_r+0x1c>
 8008e94:	42a9      	cmp	r1, r5
 8008e96:	d905      	bls.n	8008ea4 <_malloc_r+0x28>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	4e2e      	ldr	r6, [pc, #184]	; (8008f60 <_malloc_r+0xe4>)
 8008ea6:	f000 fa3b 	bl	8009320 <__malloc_lock>
 8008eaa:	6833      	ldr	r3, [r6, #0]
 8008eac:	461c      	mov	r4, r3
 8008eae:	bb34      	cbnz	r4, 8008efe <_malloc_r+0x82>
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f7ff ffc2 	bl	8008e3c <sbrk_aligned>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	4604      	mov	r4, r0
 8008ebc:	d14d      	bne.n	8008f5a <_malloc_r+0xde>
 8008ebe:	6834      	ldr	r4, [r6, #0]
 8008ec0:	4626      	mov	r6, r4
 8008ec2:	2e00      	cmp	r6, #0
 8008ec4:	d140      	bne.n	8008f48 <_malloc_r+0xcc>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4638      	mov	r0, r7
 8008ecc:	eb04 0803 	add.w	r8, r4, r3
 8008ed0:	f000 f9aa 	bl	8009228 <_sbrk_r>
 8008ed4:	4580      	cmp	r8, r0
 8008ed6:	d13a      	bne.n	8008f4e <_malloc_r+0xd2>
 8008ed8:	6821      	ldr	r1, [r4, #0]
 8008eda:	3503      	adds	r5, #3
 8008edc:	1a6d      	subs	r5, r5, r1
 8008ede:	f025 0503 	bic.w	r5, r5, #3
 8008ee2:	3508      	adds	r5, #8
 8008ee4:	2d0c      	cmp	r5, #12
 8008ee6:	bf38      	it	cc
 8008ee8:	250c      	movcc	r5, #12
 8008eea:	4638      	mov	r0, r7
 8008eec:	4629      	mov	r1, r5
 8008eee:	f7ff ffa5 	bl	8008e3c <sbrk_aligned>
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	d02b      	beq.n	8008f4e <_malloc_r+0xd2>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	442b      	add	r3, r5
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	e00e      	b.n	8008f1c <_malloc_r+0xa0>
 8008efe:	6822      	ldr	r2, [r4, #0]
 8008f00:	1b52      	subs	r2, r2, r5
 8008f02:	d41e      	bmi.n	8008f42 <_malloc_r+0xc6>
 8008f04:	2a0b      	cmp	r2, #11
 8008f06:	d916      	bls.n	8008f36 <_malloc_r+0xba>
 8008f08:	1961      	adds	r1, r4, r5
 8008f0a:	42a3      	cmp	r3, r4
 8008f0c:	6025      	str	r5, [r4, #0]
 8008f0e:	bf18      	it	ne
 8008f10:	6059      	strne	r1, [r3, #4]
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	bf08      	it	eq
 8008f16:	6031      	streq	r1, [r6, #0]
 8008f18:	5162      	str	r2, [r4, r5]
 8008f1a:	604b      	str	r3, [r1, #4]
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f104 060b 	add.w	r6, r4, #11
 8008f22:	f000 fa03 	bl	800932c <__malloc_unlock>
 8008f26:	f026 0607 	bic.w	r6, r6, #7
 8008f2a:	1d23      	adds	r3, r4, #4
 8008f2c:	1af2      	subs	r2, r6, r3
 8008f2e:	d0b6      	beq.n	8008e9e <_malloc_r+0x22>
 8008f30:	1b9b      	subs	r3, r3, r6
 8008f32:	50a3      	str	r3, [r4, r2]
 8008f34:	e7b3      	b.n	8008e9e <_malloc_r+0x22>
 8008f36:	6862      	ldr	r2, [r4, #4]
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	bf0c      	ite	eq
 8008f3c:	6032      	streq	r2, [r6, #0]
 8008f3e:	605a      	strne	r2, [r3, #4]
 8008f40:	e7ec      	b.n	8008f1c <_malloc_r+0xa0>
 8008f42:	4623      	mov	r3, r4
 8008f44:	6864      	ldr	r4, [r4, #4]
 8008f46:	e7b2      	b.n	8008eae <_malloc_r+0x32>
 8008f48:	4634      	mov	r4, r6
 8008f4a:	6876      	ldr	r6, [r6, #4]
 8008f4c:	e7b9      	b.n	8008ec2 <_malloc_r+0x46>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	4638      	mov	r0, r7
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	f000 f9ea 	bl	800932c <__malloc_unlock>
 8008f58:	e7a1      	b.n	8008e9e <_malloc_r+0x22>
 8008f5a:	6025      	str	r5, [r4, #0]
 8008f5c:	e7de      	b.n	8008f1c <_malloc_r+0xa0>
 8008f5e:	bf00      	nop
 8008f60:	20000750 	.word	0x20000750

08008f64 <__ssputs_r>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	688e      	ldr	r6, [r1, #8]
 8008f6a:	4682      	mov	sl, r0
 8008f6c:	429e      	cmp	r6, r3
 8008f6e:	460c      	mov	r4, r1
 8008f70:	4690      	mov	r8, r2
 8008f72:	461f      	mov	r7, r3
 8008f74:	d838      	bhi.n	8008fe8 <__ssputs_r+0x84>
 8008f76:	898a      	ldrh	r2, [r1, #12]
 8008f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f7c:	d032      	beq.n	8008fe4 <__ssputs_r+0x80>
 8008f7e:	6825      	ldr	r5, [r4, #0]
 8008f80:	6909      	ldr	r1, [r1, #16]
 8008f82:	3301      	adds	r3, #1
 8008f84:	eba5 0901 	sub.w	r9, r5, r1
 8008f88:	6965      	ldr	r5, [r4, #20]
 8008f8a:	444b      	add	r3, r9
 8008f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f94:	106d      	asrs	r5, r5, #1
 8008f96:	429d      	cmp	r5, r3
 8008f98:	bf38      	it	cc
 8008f9a:	461d      	movcc	r5, r3
 8008f9c:	0553      	lsls	r3, r2, #21
 8008f9e:	d531      	bpl.n	8009004 <__ssputs_r+0xa0>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7ff ff6b 	bl	8008e7c <_malloc_r>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	b950      	cbnz	r0, 8008fc0 <__ssputs_r+0x5c>
 8008faa:	230c      	movs	r3, #12
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb0:	f8ca 3000 	str.w	r3, [sl]
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc0:	464a      	mov	r2, r9
 8008fc2:	6921      	ldr	r1, [r4, #16]
 8008fc4:	f7ff fa18 	bl	80083f8 <memcpy>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	6126      	str	r6, [r4, #16]
 8008fd6:	444e      	add	r6, r9
 8008fd8:	6026      	str	r6, [r4, #0]
 8008fda:	463e      	mov	r6, r7
 8008fdc:	6165      	str	r5, [r4, #20]
 8008fde:	eba5 0509 	sub.w	r5, r5, r9
 8008fe2:	60a5      	str	r5, [r4, #8]
 8008fe4:	42be      	cmp	r6, r7
 8008fe6:	d900      	bls.n	8008fea <__ssputs_r+0x86>
 8008fe8:	463e      	mov	r6, r7
 8008fea:	4632      	mov	r2, r6
 8008fec:	4641      	mov	r1, r8
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	f000 f97c 	bl	80092ec <memmove>
 8008ff4:	68a3      	ldr	r3, [r4, #8]
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	1b9b      	subs	r3, r3, r6
 8008ffa:	60a3      	str	r3, [r4, #8]
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	4433      	add	r3, r6
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	e7db      	b.n	8008fbc <__ssputs_r+0x58>
 8009004:	462a      	mov	r2, r5
 8009006:	f000 f997 	bl	8009338 <_realloc_r>
 800900a:	4606      	mov	r6, r0
 800900c:	2800      	cmp	r0, #0
 800900e:	d1e1      	bne.n	8008fd4 <__ssputs_r+0x70>
 8009010:	4650      	mov	r0, sl
 8009012:	6921      	ldr	r1, [r4, #16]
 8009014:	f7ff feca 	bl	8008dac <_free_r>
 8009018:	e7c7      	b.n	8008faa <__ssputs_r+0x46>
	...

0800901c <_svfiprintf_r>:
 800901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	4698      	mov	r8, r3
 8009022:	898b      	ldrh	r3, [r1, #12]
 8009024:	4607      	mov	r7, r0
 8009026:	061b      	lsls	r3, r3, #24
 8009028:	460d      	mov	r5, r1
 800902a:	4614      	mov	r4, r2
 800902c:	b09d      	sub	sp, #116	; 0x74
 800902e:	d50e      	bpl.n	800904e <_svfiprintf_r+0x32>
 8009030:	690b      	ldr	r3, [r1, #16]
 8009032:	b963      	cbnz	r3, 800904e <_svfiprintf_r+0x32>
 8009034:	2140      	movs	r1, #64	; 0x40
 8009036:	f7ff ff21 	bl	8008e7c <_malloc_r>
 800903a:	6028      	str	r0, [r5, #0]
 800903c:	6128      	str	r0, [r5, #16]
 800903e:	b920      	cbnz	r0, 800904a <_svfiprintf_r+0x2e>
 8009040:	230c      	movs	r3, #12
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009048:	e0d1      	b.n	80091ee <_svfiprintf_r+0x1d2>
 800904a:	2340      	movs	r3, #64	; 0x40
 800904c:	616b      	str	r3, [r5, #20]
 800904e:	2300      	movs	r3, #0
 8009050:	9309      	str	r3, [sp, #36]	; 0x24
 8009052:	2320      	movs	r3, #32
 8009054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009058:	2330      	movs	r3, #48	; 0x30
 800905a:	f04f 0901 	mov.w	r9, #1
 800905e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009208 <_svfiprintf_r+0x1ec>
 8009066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800906a:	4623      	mov	r3, r4
 800906c:	469a      	mov	sl, r3
 800906e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009072:	b10a      	cbz	r2, 8009078 <_svfiprintf_r+0x5c>
 8009074:	2a25      	cmp	r2, #37	; 0x25
 8009076:	d1f9      	bne.n	800906c <_svfiprintf_r+0x50>
 8009078:	ebba 0b04 	subs.w	fp, sl, r4
 800907c:	d00b      	beq.n	8009096 <_svfiprintf_r+0x7a>
 800907e:	465b      	mov	r3, fp
 8009080:	4622      	mov	r2, r4
 8009082:	4629      	mov	r1, r5
 8009084:	4638      	mov	r0, r7
 8009086:	f7ff ff6d 	bl	8008f64 <__ssputs_r>
 800908a:	3001      	adds	r0, #1
 800908c:	f000 80aa 	beq.w	80091e4 <_svfiprintf_r+0x1c8>
 8009090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009092:	445a      	add	r2, fp
 8009094:	9209      	str	r2, [sp, #36]	; 0x24
 8009096:	f89a 3000 	ldrb.w	r3, [sl]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80a2 	beq.w	80091e4 <_svfiprintf_r+0x1c8>
 80090a0:	2300      	movs	r3, #0
 80090a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090aa:	f10a 0a01 	add.w	sl, sl, #1
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	9307      	str	r3, [sp, #28]
 80090b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090b6:	931a      	str	r3, [sp, #104]	; 0x68
 80090b8:	4654      	mov	r4, sl
 80090ba:	2205      	movs	r2, #5
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	4851      	ldr	r0, [pc, #324]	; (8009208 <_svfiprintf_r+0x1ec>)
 80090c2:	f7ff f98b 	bl	80083dc <memchr>
 80090c6:	9a04      	ldr	r2, [sp, #16]
 80090c8:	b9d8      	cbnz	r0, 8009102 <_svfiprintf_r+0xe6>
 80090ca:	06d0      	lsls	r0, r2, #27
 80090cc:	bf44      	itt	mi
 80090ce:	2320      	movmi	r3, #32
 80090d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d4:	0711      	lsls	r1, r2, #28
 80090d6:	bf44      	itt	mi
 80090d8:	232b      	movmi	r3, #43	; 0x2b
 80090da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090de:	f89a 3000 	ldrb.w	r3, [sl]
 80090e2:	2b2a      	cmp	r3, #42	; 0x2a
 80090e4:	d015      	beq.n	8009112 <_svfiprintf_r+0xf6>
 80090e6:	4654      	mov	r4, sl
 80090e8:	2000      	movs	r0, #0
 80090ea:	f04f 0c0a 	mov.w	ip, #10
 80090ee:	9a07      	ldr	r2, [sp, #28]
 80090f0:	4621      	mov	r1, r4
 80090f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f6:	3b30      	subs	r3, #48	; 0x30
 80090f8:	2b09      	cmp	r3, #9
 80090fa:	d94e      	bls.n	800919a <_svfiprintf_r+0x17e>
 80090fc:	b1b0      	cbz	r0, 800912c <_svfiprintf_r+0x110>
 80090fe:	9207      	str	r2, [sp, #28]
 8009100:	e014      	b.n	800912c <_svfiprintf_r+0x110>
 8009102:	eba0 0308 	sub.w	r3, r0, r8
 8009106:	fa09 f303 	lsl.w	r3, r9, r3
 800910a:	4313      	orrs	r3, r2
 800910c:	46a2      	mov	sl, r4
 800910e:	9304      	str	r3, [sp, #16]
 8009110:	e7d2      	b.n	80090b8 <_svfiprintf_r+0x9c>
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	1d19      	adds	r1, r3, #4
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	9103      	str	r1, [sp, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	bfbb      	ittet	lt
 800911e:	425b      	neglt	r3, r3
 8009120:	f042 0202 	orrlt.w	r2, r2, #2
 8009124:	9307      	strge	r3, [sp, #28]
 8009126:	9307      	strlt	r3, [sp, #28]
 8009128:	bfb8      	it	lt
 800912a:	9204      	strlt	r2, [sp, #16]
 800912c:	7823      	ldrb	r3, [r4, #0]
 800912e:	2b2e      	cmp	r3, #46	; 0x2e
 8009130:	d10c      	bne.n	800914c <_svfiprintf_r+0x130>
 8009132:	7863      	ldrb	r3, [r4, #1]
 8009134:	2b2a      	cmp	r3, #42	; 0x2a
 8009136:	d135      	bne.n	80091a4 <_svfiprintf_r+0x188>
 8009138:	9b03      	ldr	r3, [sp, #12]
 800913a:	3402      	adds	r4, #2
 800913c:	1d1a      	adds	r2, r3, #4
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	9203      	str	r2, [sp, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	bfb8      	it	lt
 8009146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800920c <_svfiprintf_r+0x1f0>
 8009150:	2203      	movs	r2, #3
 8009152:	4650      	mov	r0, sl
 8009154:	7821      	ldrb	r1, [r4, #0]
 8009156:	f7ff f941 	bl	80083dc <memchr>
 800915a:	b140      	cbz	r0, 800916e <_svfiprintf_r+0x152>
 800915c:	2340      	movs	r3, #64	; 0x40
 800915e:	eba0 000a 	sub.w	r0, r0, sl
 8009162:	fa03 f000 	lsl.w	r0, r3, r0
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	3401      	adds	r4, #1
 800916a:	4303      	orrs	r3, r0
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009172:	2206      	movs	r2, #6
 8009174:	4826      	ldr	r0, [pc, #152]	; (8009210 <_svfiprintf_r+0x1f4>)
 8009176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800917a:	f7ff f92f 	bl	80083dc <memchr>
 800917e:	2800      	cmp	r0, #0
 8009180:	d038      	beq.n	80091f4 <_svfiprintf_r+0x1d8>
 8009182:	4b24      	ldr	r3, [pc, #144]	; (8009214 <_svfiprintf_r+0x1f8>)
 8009184:	bb1b      	cbnz	r3, 80091ce <_svfiprintf_r+0x1b2>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	3307      	adds	r3, #7
 800918a:	f023 0307 	bic.w	r3, r3, #7
 800918e:	3308      	adds	r3, #8
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009194:	4433      	add	r3, r6
 8009196:	9309      	str	r3, [sp, #36]	; 0x24
 8009198:	e767      	b.n	800906a <_svfiprintf_r+0x4e>
 800919a:	460c      	mov	r4, r1
 800919c:	2001      	movs	r0, #1
 800919e:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a2:	e7a5      	b.n	80090f0 <_svfiprintf_r+0xd4>
 80091a4:	2300      	movs	r3, #0
 80091a6:	f04f 0c0a 	mov.w	ip, #10
 80091aa:	4619      	mov	r1, r3
 80091ac:	3401      	adds	r4, #1
 80091ae:	9305      	str	r3, [sp, #20]
 80091b0:	4620      	mov	r0, r4
 80091b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b6:	3a30      	subs	r2, #48	; 0x30
 80091b8:	2a09      	cmp	r2, #9
 80091ba:	d903      	bls.n	80091c4 <_svfiprintf_r+0x1a8>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0c5      	beq.n	800914c <_svfiprintf_r+0x130>
 80091c0:	9105      	str	r1, [sp, #20]
 80091c2:	e7c3      	b.n	800914c <_svfiprintf_r+0x130>
 80091c4:	4604      	mov	r4, r0
 80091c6:	2301      	movs	r3, #1
 80091c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091cc:	e7f0      	b.n	80091b0 <_svfiprintf_r+0x194>
 80091ce:	ab03      	add	r3, sp, #12
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	462a      	mov	r2, r5
 80091d4:	4638      	mov	r0, r7
 80091d6:	4b10      	ldr	r3, [pc, #64]	; (8009218 <_svfiprintf_r+0x1fc>)
 80091d8:	a904      	add	r1, sp, #16
 80091da:	f7fc fa7d 	bl	80056d8 <_printf_float>
 80091de:	1c42      	adds	r2, r0, #1
 80091e0:	4606      	mov	r6, r0
 80091e2:	d1d6      	bne.n	8009192 <_svfiprintf_r+0x176>
 80091e4:	89ab      	ldrh	r3, [r5, #12]
 80091e6:	065b      	lsls	r3, r3, #25
 80091e8:	f53f af2c 	bmi.w	8009044 <_svfiprintf_r+0x28>
 80091ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ee:	b01d      	add	sp, #116	; 0x74
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	ab03      	add	r3, sp, #12
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	462a      	mov	r2, r5
 80091fa:	4638      	mov	r0, r7
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <_svfiprintf_r+0x1fc>)
 80091fe:	a904      	add	r1, sp, #16
 8009200:	f7fc fd06 	bl	8005c10 <_printf_i>
 8009204:	e7eb      	b.n	80091de <_svfiprintf_r+0x1c2>
 8009206:	bf00      	nop
 8009208:	0800a27c 	.word	0x0800a27c
 800920c:	0800a282 	.word	0x0800a282
 8009210:	0800a286 	.word	0x0800a286
 8009214:	080056d9 	.word	0x080056d9
 8009218:	08008f65 	.word	0x08008f65

0800921c <nan>:
 800921c:	2000      	movs	r0, #0
 800921e:	4901      	ldr	r1, [pc, #4]	; (8009224 <nan+0x8>)
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	7ff80000 	.word	0x7ff80000

08009228 <_sbrk_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	2300      	movs	r3, #0
 800922c:	4d05      	ldr	r5, [pc, #20]	; (8009244 <_sbrk_r+0x1c>)
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7f9 fa02 	bl	800263c <_sbrk>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_sbrk_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_sbrk_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	20000758 	.word	0x20000758

08009248 <strncmp>:
 8009248:	4603      	mov	r3, r0
 800924a:	b510      	push	{r4, lr}
 800924c:	b172      	cbz	r2, 800926c <strncmp+0x24>
 800924e:	3901      	subs	r1, #1
 8009250:	1884      	adds	r4, r0, r2
 8009252:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009256:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800925a:	4290      	cmp	r0, r2
 800925c:	d101      	bne.n	8009262 <strncmp+0x1a>
 800925e:	42a3      	cmp	r3, r4
 8009260:	d101      	bne.n	8009266 <strncmp+0x1e>
 8009262:	1a80      	subs	r0, r0, r2
 8009264:	bd10      	pop	{r4, pc}
 8009266:	2800      	cmp	r0, #0
 8009268:	d1f3      	bne.n	8009252 <strncmp+0xa>
 800926a:	e7fa      	b.n	8009262 <strncmp+0x1a>
 800926c:	4610      	mov	r0, r2
 800926e:	e7f9      	b.n	8009264 <strncmp+0x1c>

08009270 <__ascii_wctomb>:
 8009270:	4603      	mov	r3, r0
 8009272:	4608      	mov	r0, r1
 8009274:	b141      	cbz	r1, 8009288 <__ascii_wctomb+0x18>
 8009276:	2aff      	cmp	r2, #255	; 0xff
 8009278:	d904      	bls.n	8009284 <__ascii_wctomb+0x14>
 800927a:	228a      	movs	r2, #138	; 0x8a
 800927c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	4770      	bx	lr
 8009284:	2001      	movs	r0, #1
 8009286:	700a      	strb	r2, [r1, #0]
 8009288:	4770      	bx	lr
	...

0800928c <__assert_func>:
 800928c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800928e:	4614      	mov	r4, r2
 8009290:	461a      	mov	r2, r3
 8009292:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <__assert_func+0x2c>)
 8009294:	4605      	mov	r5, r0
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68d8      	ldr	r0, [r3, #12]
 800929a:	b14c      	cbz	r4, 80092b0 <__assert_func+0x24>
 800929c:	4b07      	ldr	r3, [pc, #28]	; (80092bc <__assert_func+0x30>)
 800929e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092a2:	9100      	str	r1, [sp, #0]
 80092a4:	462b      	mov	r3, r5
 80092a6:	4906      	ldr	r1, [pc, #24]	; (80092c0 <__assert_func+0x34>)
 80092a8:	f000 f80e 	bl	80092c8 <fiprintf>
 80092ac:	f000 fa8a 	bl	80097c4 <abort>
 80092b0:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <__assert_func+0x38>)
 80092b2:	461c      	mov	r4, r3
 80092b4:	e7f3      	b.n	800929e <__assert_func+0x12>
 80092b6:	bf00      	nop
 80092b8:	20000010 	.word	0x20000010
 80092bc:	0800a28d 	.word	0x0800a28d
 80092c0:	0800a29a 	.word	0x0800a29a
 80092c4:	0800a2c8 	.word	0x0800a2c8

080092c8 <fiprintf>:
 80092c8:	b40e      	push	{r1, r2, r3}
 80092ca:	b503      	push	{r0, r1, lr}
 80092cc:	4601      	mov	r1, r0
 80092ce:	ab03      	add	r3, sp, #12
 80092d0:	4805      	ldr	r0, [pc, #20]	; (80092e8 <fiprintf+0x20>)
 80092d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d6:	6800      	ldr	r0, [r0, #0]
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	f000 f883 	bl	80093e4 <_vfiprintf_r>
 80092de:	b002      	add	sp, #8
 80092e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092e4:	b003      	add	sp, #12
 80092e6:	4770      	bx	lr
 80092e8:	20000010 	.word	0x20000010

080092ec <memmove>:
 80092ec:	4288      	cmp	r0, r1
 80092ee:	b510      	push	{r4, lr}
 80092f0:	eb01 0402 	add.w	r4, r1, r2
 80092f4:	d902      	bls.n	80092fc <memmove+0x10>
 80092f6:	4284      	cmp	r4, r0
 80092f8:	4623      	mov	r3, r4
 80092fa:	d807      	bhi.n	800930c <memmove+0x20>
 80092fc:	1e43      	subs	r3, r0, #1
 80092fe:	42a1      	cmp	r1, r4
 8009300:	d008      	beq.n	8009314 <memmove+0x28>
 8009302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800930a:	e7f8      	b.n	80092fe <memmove+0x12>
 800930c:	4601      	mov	r1, r0
 800930e:	4402      	add	r2, r0
 8009310:	428a      	cmp	r2, r1
 8009312:	d100      	bne.n	8009316 <memmove+0x2a>
 8009314:	bd10      	pop	{r4, pc}
 8009316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800931a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931e:	e7f7      	b.n	8009310 <memmove+0x24>

08009320 <__malloc_lock>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__malloc_lock+0x8>)
 8009322:	f000 bc0b 	b.w	8009b3c <__retarget_lock_acquire_recursive>
 8009326:	bf00      	nop
 8009328:	2000075c 	.word	0x2000075c

0800932c <__malloc_unlock>:
 800932c:	4801      	ldr	r0, [pc, #4]	; (8009334 <__malloc_unlock+0x8>)
 800932e:	f000 bc06 	b.w	8009b3e <__retarget_lock_release_recursive>
 8009332:	bf00      	nop
 8009334:	2000075c 	.word	0x2000075c

08009338 <_realloc_r>:
 8009338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933c:	4680      	mov	r8, r0
 800933e:	4614      	mov	r4, r2
 8009340:	460e      	mov	r6, r1
 8009342:	b921      	cbnz	r1, 800934e <_realloc_r+0x16>
 8009344:	4611      	mov	r1, r2
 8009346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800934a:	f7ff bd97 	b.w	8008e7c <_malloc_r>
 800934e:	b92a      	cbnz	r2, 800935c <_realloc_r+0x24>
 8009350:	f7ff fd2c 	bl	8008dac <_free_r>
 8009354:	4625      	mov	r5, r4
 8009356:	4628      	mov	r0, r5
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800935c:	f000 fc56 	bl	8009c0c <_malloc_usable_size_r>
 8009360:	4284      	cmp	r4, r0
 8009362:	4607      	mov	r7, r0
 8009364:	d802      	bhi.n	800936c <_realloc_r+0x34>
 8009366:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800936a:	d812      	bhi.n	8009392 <_realloc_r+0x5a>
 800936c:	4621      	mov	r1, r4
 800936e:	4640      	mov	r0, r8
 8009370:	f7ff fd84 	bl	8008e7c <_malloc_r>
 8009374:	4605      	mov	r5, r0
 8009376:	2800      	cmp	r0, #0
 8009378:	d0ed      	beq.n	8009356 <_realloc_r+0x1e>
 800937a:	42bc      	cmp	r4, r7
 800937c:	4622      	mov	r2, r4
 800937e:	4631      	mov	r1, r6
 8009380:	bf28      	it	cs
 8009382:	463a      	movcs	r2, r7
 8009384:	f7ff f838 	bl	80083f8 <memcpy>
 8009388:	4631      	mov	r1, r6
 800938a:	4640      	mov	r0, r8
 800938c:	f7ff fd0e 	bl	8008dac <_free_r>
 8009390:	e7e1      	b.n	8009356 <_realloc_r+0x1e>
 8009392:	4635      	mov	r5, r6
 8009394:	e7df      	b.n	8009356 <_realloc_r+0x1e>

08009396 <__sfputc_r>:
 8009396:	6893      	ldr	r3, [r2, #8]
 8009398:	b410      	push	{r4}
 800939a:	3b01      	subs	r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	6093      	str	r3, [r2, #8]
 80093a0:	da07      	bge.n	80093b2 <__sfputc_r+0x1c>
 80093a2:	6994      	ldr	r4, [r2, #24]
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	db01      	blt.n	80093ac <__sfputc_r+0x16>
 80093a8:	290a      	cmp	r1, #10
 80093aa:	d102      	bne.n	80093b2 <__sfputc_r+0x1c>
 80093ac:	bc10      	pop	{r4}
 80093ae:	f000 b949 	b.w	8009644 <__swbuf_r>
 80093b2:	6813      	ldr	r3, [r2, #0]
 80093b4:	1c58      	adds	r0, r3, #1
 80093b6:	6010      	str	r0, [r2, #0]
 80093b8:	7019      	strb	r1, [r3, #0]
 80093ba:	4608      	mov	r0, r1
 80093bc:	bc10      	pop	{r4}
 80093be:	4770      	bx	lr

080093c0 <__sfputs_r>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	4614      	mov	r4, r2
 80093c8:	18d5      	adds	r5, r2, r3
 80093ca:	42ac      	cmp	r4, r5
 80093cc:	d101      	bne.n	80093d2 <__sfputs_r+0x12>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e007      	b.n	80093e2 <__sfputs_r+0x22>
 80093d2:	463a      	mov	r2, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093da:	f7ff ffdc 	bl	8009396 <__sfputc_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d1f3      	bne.n	80093ca <__sfputs_r+0xa>
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093e4 <_vfiprintf_r>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	460d      	mov	r5, r1
 80093ea:	4614      	mov	r4, r2
 80093ec:	4698      	mov	r8, r3
 80093ee:	4606      	mov	r6, r0
 80093f0:	b09d      	sub	sp, #116	; 0x74
 80093f2:	b118      	cbz	r0, 80093fc <_vfiprintf_r+0x18>
 80093f4:	6983      	ldr	r3, [r0, #24]
 80093f6:	b90b      	cbnz	r3, 80093fc <_vfiprintf_r+0x18>
 80093f8:	f000 fb02 	bl	8009a00 <__sinit>
 80093fc:	4b89      	ldr	r3, [pc, #548]	; (8009624 <_vfiprintf_r+0x240>)
 80093fe:	429d      	cmp	r5, r3
 8009400:	d11b      	bne.n	800943a <_vfiprintf_r+0x56>
 8009402:	6875      	ldr	r5, [r6, #4]
 8009404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009406:	07d9      	lsls	r1, r3, #31
 8009408:	d405      	bmi.n	8009416 <_vfiprintf_r+0x32>
 800940a:	89ab      	ldrh	r3, [r5, #12]
 800940c:	059a      	lsls	r2, r3, #22
 800940e:	d402      	bmi.n	8009416 <_vfiprintf_r+0x32>
 8009410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009412:	f000 fb93 	bl	8009b3c <__retarget_lock_acquire_recursive>
 8009416:	89ab      	ldrh	r3, [r5, #12]
 8009418:	071b      	lsls	r3, r3, #28
 800941a:	d501      	bpl.n	8009420 <_vfiprintf_r+0x3c>
 800941c:	692b      	ldr	r3, [r5, #16]
 800941e:	b9eb      	cbnz	r3, 800945c <_vfiprintf_r+0x78>
 8009420:	4629      	mov	r1, r5
 8009422:	4630      	mov	r0, r6
 8009424:	f000 f960 	bl	80096e8 <__swsetup_r>
 8009428:	b1c0      	cbz	r0, 800945c <_vfiprintf_r+0x78>
 800942a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942c:	07dc      	lsls	r4, r3, #31
 800942e:	d50e      	bpl.n	800944e <_vfiprintf_r+0x6a>
 8009430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009434:	b01d      	add	sp, #116	; 0x74
 8009436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943a:	4b7b      	ldr	r3, [pc, #492]	; (8009628 <_vfiprintf_r+0x244>)
 800943c:	429d      	cmp	r5, r3
 800943e:	d101      	bne.n	8009444 <_vfiprintf_r+0x60>
 8009440:	68b5      	ldr	r5, [r6, #8]
 8009442:	e7df      	b.n	8009404 <_vfiprintf_r+0x20>
 8009444:	4b79      	ldr	r3, [pc, #484]	; (800962c <_vfiprintf_r+0x248>)
 8009446:	429d      	cmp	r5, r3
 8009448:	bf08      	it	eq
 800944a:	68f5      	ldreq	r5, [r6, #12]
 800944c:	e7da      	b.n	8009404 <_vfiprintf_r+0x20>
 800944e:	89ab      	ldrh	r3, [r5, #12]
 8009450:	0598      	lsls	r0, r3, #22
 8009452:	d4ed      	bmi.n	8009430 <_vfiprintf_r+0x4c>
 8009454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009456:	f000 fb72 	bl	8009b3e <__retarget_lock_release_recursive>
 800945a:	e7e9      	b.n	8009430 <_vfiprintf_r+0x4c>
 800945c:	2300      	movs	r3, #0
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	2320      	movs	r3, #32
 8009462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009466:	2330      	movs	r3, #48	; 0x30
 8009468:	f04f 0901 	mov.w	r9, #1
 800946c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009470:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009630 <_vfiprintf_r+0x24c>
 8009474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009478:	4623      	mov	r3, r4
 800947a:	469a      	mov	sl, r3
 800947c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009480:	b10a      	cbz	r2, 8009486 <_vfiprintf_r+0xa2>
 8009482:	2a25      	cmp	r2, #37	; 0x25
 8009484:	d1f9      	bne.n	800947a <_vfiprintf_r+0x96>
 8009486:	ebba 0b04 	subs.w	fp, sl, r4
 800948a:	d00b      	beq.n	80094a4 <_vfiprintf_r+0xc0>
 800948c:	465b      	mov	r3, fp
 800948e:	4622      	mov	r2, r4
 8009490:	4629      	mov	r1, r5
 8009492:	4630      	mov	r0, r6
 8009494:	f7ff ff94 	bl	80093c0 <__sfputs_r>
 8009498:	3001      	adds	r0, #1
 800949a:	f000 80aa 	beq.w	80095f2 <_vfiprintf_r+0x20e>
 800949e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a0:	445a      	add	r2, fp
 80094a2:	9209      	str	r2, [sp, #36]	; 0x24
 80094a4:	f89a 3000 	ldrb.w	r3, [sl]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80a2 	beq.w	80095f2 <_vfiprintf_r+0x20e>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b8:	f10a 0a01 	add.w	sl, sl, #1
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	9307      	str	r3, [sp, #28]
 80094c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c4:	931a      	str	r3, [sp, #104]	; 0x68
 80094c6:	4654      	mov	r4, sl
 80094c8:	2205      	movs	r2, #5
 80094ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ce:	4858      	ldr	r0, [pc, #352]	; (8009630 <_vfiprintf_r+0x24c>)
 80094d0:	f7fe ff84 	bl	80083dc <memchr>
 80094d4:	9a04      	ldr	r2, [sp, #16]
 80094d6:	b9d8      	cbnz	r0, 8009510 <_vfiprintf_r+0x12c>
 80094d8:	06d1      	lsls	r1, r2, #27
 80094da:	bf44      	itt	mi
 80094dc:	2320      	movmi	r3, #32
 80094de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e2:	0713      	lsls	r3, r2, #28
 80094e4:	bf44      	itt	mi
 80094e6:	232b      	movmi	r3, #43	; 0x2b
 80094e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ec:	f89a 3000 	ldrb.w	r3, [sl]
 80094f0:	2b2a      	cmp	r3, #42	; 0x2a
 80094f2:	d015      	beq.n	8009520 <_vfiprintf_r+0x13c>
 80094f4:	4654      	mov	r4, sl
 80094f6:	2000      	movs	r0, #0
 80094f8:	f04f 0c0a 	mov.w	ip, #10
 80094fc:	9a07      	ldr	r2, [sp, #28]
 80094fe:	4621      	mov	r1, r4
 8009500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009504:	3b30      	subs	r3, #48	; 0x30
 8009506:	2b09      	cmp	r3, #9
 8009508:	d94e      	bls.n	80095a8 <_vfiprintf_r+0x1c4>
 800950a:	b1b0      	cbz	r0, 800953a <_vfiprintf_r+0x156>
 800950c:	9207      	str	r2, [sp, #28]
 800950e:	e014      	b.n	800953a <_vfiprintf_r+0x156>
 8009510:	eba0 0308 	sub.w	r3, r0, r8
 8009514:	fa09 f303 	lsl.w	r3, r9, r3
 8009518:	4313      	orrs	r3, r2
 800951a:	46a2      	mov	sl, r4
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	e7d2      	b.n	80094c6 <_vfiprintf_r+0xe2>
 8009520:	9b03      	ldr	r3, [sp, #12]
 8009522:	1d19      	adds	r1, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	9103      	str	r1, [sp, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	bfbb      	ittet	lt
 800952c:	425b      	neglt	r3, r3
 800952e:	f042 0202 	orrlt.w	r2, r2, #2
 8009532:	9307      	strge	r3, [sp, #28]
 8009534:	9307      	strlt	r3, [sp, #28]
 8009536:	bfb8      	it	lt
 8009538:	9204      	strlt	r2, [sp, #16]
 800953a:	7823      	ldrb	r3, [r4, #0]
 800953c:	2b2e      	cmp	r3, #46	; 0x2e
 800953e:	d10c      	bne.n	800955a <_vfiprintf_r+0x176>
 8009540:	7863      	ldrb	r3, [r4, #1]
 8009542:	2b2a      	cmp	r3, #42	; 0x2a
 8009544:	d135      	bne.n	80095b2 <_vfiprintf_r+0x1ce>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	3402      	adds	r4, #2
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9203      	str	r2, [sp, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfb8      	it	lt
 8009554:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009634 <_vfiprintf_r+0x250>
 800955e:	2203      	movs	r2, #3
 8009560:	4650      	mov	r0, sl
 8009562:	7821      	ldrb	r1, [r4, #0]
 8009564:	f7fe ff3a 	bl	80083dc <memchr>
 8009568:	b140      	cbz	r0, 800957c <_vfiprintf_r+0x198>
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	eba0 000a 	sub.w	r0, r0, sl
 8009570:	fa03 f000 	lsl.w	r0, r3, r0
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	3401      	adds	r4, #1
 8009578:	4303      	orrs	r3, r0
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009580:	2206      	movs	r2, #6
 8009582:	482d      	ldr	r0, [pc, #180]	; (8009638 <_vfiprintf_r+0x254>)
 8009584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009588:	f7fe ff28 	bl	80083dc <memchr>
 800958c:	2800      	cmp	r0, #0
 800958e:	d03f      	beq.n	8009610 <_vfiprintf_r+0x22c>
 8009590:	4b2a      	ldr	r3, [pc, #168]	; (800963c <_vfiprintf_r+0x258>)
 8009592:	bb1b      	cbnz	r3, 80095dc <_vfiprintf_r+0x1f8>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	3307      	adds	r3, #7
 8009598:	f023 0307 	bic.w	r3, r3, #7
 800959c:	3308      	adds	r3, #8
 800959e:	9303      	str	r3, [sp, #12]
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	443b      	add	r3, r7
 80095a4:	9309      	str	r3, [sp, #36]	; 0x24
 80095a6:	e767      	b.n	8009478 <_vfiprintf_r+0x94>
 80095a8:	460c      	mov	r4, r1
 80095aa:	2001      	movs	r0, #1
 80095ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80095b0:	e7a5      	b.n	80094fe <_vfiprintf_r+0x11a>
 80095b2:	2300      	movs	r3, #0
 80095b4:	f04f 0c0a 	mov.w	ip, #10
 80095b8:	4619      	mov	r1, r3
 80095ba:	3401      	adds	r4, #1
 80095bc:	9305      	str	r3, [sp, #20]
 80095be:	4620      	mov	r0, r4
 80095c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c4:	3a30      	subs	r2, #48	; 0x30
 80095c6:	2a09      	cmp	r2, #9
 80095c8:	d903      	bls.n	80095d2 <_vfiprintf_r+0x1ee>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0c5      	beq.n	800955a <_vfiprintf_r+0x176>
 80095ce:	9105      	str	r1, [sp, #20]
 80095d0:	e7c3      	b.n	800955a <_vfiprintf_r+0x176>
 80095d2:	4604      	mov	r4, r0
 80095d4:	2301      	movs	r3, #1
 80095d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095da:	e7f0      	b.n	80095be <_vfiprintf_r+0x1da>
 80095dc:	ab03      	add	r3, sp, #12
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	462a      	mov	r2, r5
 80095e2:	4630      	mov	r0, r6
 80095e4:	4b16      	ldr	r3, [pc, #88]	; (8009640 <_vfiprintf_r+0x25c>)
 80095e6:	a904      	add	r1, sp, #16
 80095e8:	f7fc f876 	bl	80056d8 <_printf_float>
 80095ec:	4607      	mov	r7, r0
 80095ee:	1c78      	adds	r0, r7, #1
 80095f0:	d1d6      	bne.n	80095a0 <_vfiprintf_r+0x1bc>
 80095f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f4:	07d9      	lsls	r1, r3, #31
 80095f6:	d405      	bmi.n	8009604 <_vfiprintf_r+0x220>
 80095f8:	89ab      	ldrh	r3, [r5, #12]
 80095fa:	059a      	lsls	r2, r3, #22
 80095fc:	d402      	bmi.n	8009604 <_vfiprintf_r+0x220>
 80095fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009600:	f000 fa9d 	bl	8009b3e <__retarget_lock_release_recursive>
 8009604:	89ab      	ldrh	r3, [r5, #12]
 8009606:	065b      	lsls	r3, r3, #25
 8009608:	f53f af12 	bmi.w	8009430 <_vfiprintf_r+0x4c>
 800960c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800960e:	e711      	b.n	8009434 <_vfiprintf_r+0x50>
 8009610:	ab03      	add	r3, sp, #12
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	462a      	mov	r2, r5
 8009616:	4630      	mov	r0, r6
 8009618:	4b09      	ldr	r3, [pc, #36]	; (8009640 <_vfiprintf_r+0x25c>)
 800961a:	a904      	add	r1, sp, #16
 800961c:	f7fc faf8 	bl	8005c10 <_printf_i>
 8009620:	e7e4      	b.n	80095ec <_vfiprintf_r+0x208>
 8009622:	bf00      	nop
 8009624:	0800a2ec 	.word	0x0800a2ec
 8009628:	0800a30c 	.word	0x0800a30c
 800962c:	0800a2cc 	.word	0x0800a2cc
 8009630:	0800a27c 	.word	0x0800a27c
 8009634:	0800a282 	.word	0x0800a282
 8009638:	0800a286 	.word	0x0800a286
 800963c:	080056d9 	.word	0x080056d9
 8009640:	080093c1 	.word	0x080093c1

08009644 <__swbuf_r>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	460e      	mov	r6, r1
 8009648:	4614      	mov	r4, r2
 800964a:	4605      	mov	r5, r0
 800964c:	b118      	cbz	r0, 8009656 <__swbuf_r+0x12>
 800964e:	6983      	ldr	r3, [r0, #24]
 8009650:	b90b      	cbnz	r3, 8009656 <__swbuf_r+0x12>
 8009652:	f000 f9d5 	bl	8009a00 <__sinit>
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <__swbuf_r+0x98>)
 8009658:	429c      	cmp	r4, r3
 800965a:	d12b      	bne.n	80096b4 <__swbuf_r+0x70>
 800965c:	686c      	ldr	r4, [r5, #4]
 800965e:	69a3      	ldr	r3, [r4, #24]
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	071a      	lsls	r2, r3, #28
 8009666:	d52f      	bpl.n	80096c8 <__swbuf_r+0x84>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	b36b      	cbz	r3, 80096c8 <__swbuf_r+0x84>
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	b2f6      	uxtb	r6, r6
 8009672:	1ac0      	subs	r0, r0, r3
 8009674:	6963      	ldr	r3, [r4, #20]
 8009676:	4637      	mov	r7, r6
 8009678:	4283      	cmp	r3, r0
 800967a:	dc04      	bgt.n	8009686 <__swbuf_r+0x42>
 800967c:	4621      	mov	r1, r4
 800967e:	4628      	mov	r0, r5
 8009680:	f000 f92a 	bl	80098d8 <_fflush_r>
 8009684:	bb30      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 8009686:	68a3      	ldr	r3, [r4, #8]
 8009688:	3001      	adds	r0, #1
 800968a:	3b01      	subs	r3, #1
 800968c:	60a3      	str	r3, [r4, #8]
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	6022      	str	r2, [r4, #0]
 8009694:	701e      	strb	r6, [r3, #0]
 8009696:	6963      	ldr	r3, [r4, #20]
 8009698:	4283      	cmp	r3, r0
 800969a:	d004      	beq.n	80096a6 <__swbuf_r+0x62>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	07db      	lsls	r3, r3, #31
 80096a0:	d506      	bpl.n	80096b0 <__swbuf_r+0x6c>
 80096a2:	2e0a      	cmp	r6, #10
 80096a4:	d104      	bne.n	80096b0 <__swbuf_r+0x6c>
 80096a6:	4621      	mov	r1, r4
 80096a8:	4628      	mov	r0, r5
 80096aa:	f000 f915 	bl	80098d8 <_fflush_r>
 80096ae:	b988      	cbnz	r0, 80096d4 <__swbuf_r+0x90>
 80096b0:	4638      	mov	r0, r7
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <__swbuf_r+0x9c>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d101      	bne.n	80096be <__swbuf_r+0x7a>
 80096ba:	68ac      	ldr	r4, [r5, #8]
 80096bc:	e7cf      	b.n	800965e <__swbuf_r+0x1a>
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <__swbuf_r+0xa0>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	bf08      	it	eq
 80096c4:	68ec      	ldreq	r4, [r5, #12]
 80096c6:	e7ca      	b.n	800965e <__swbuf_r+0x1a>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f80c 	bl	80096e8 <__swsetup_r>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0cb      	beq.n	800966c <__swbuf_r+0x28>
 80096d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096d8:	e7ea      	b.n	80096b0 <__swbuf_r+0x6c>
 80096da:	bf00      	nop
 80096dc:	0800a2ec 	.word	0x0800a2ec
 80096e0:	0800a30c 	.word	0x0800a30c
 80096e4:	0800a2cc 	.word	0x0800a2cc

080096e8 <__swsetup_r>:
 80096e8:	4b32      	ldr	r3, [pc, #200]	; (80097b4 <__swsetup_r+0xcc>)
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	681d      	ldr	r5, [r3, #0]
 80096ee:	4606      	mov	r6, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	b125      	cbz	r5, 80096fe <__swsetup_r+0x16>
 80096f4:	69ab      	ldr	r3, [r5, #24]
 80096f6:	b913      	cbnz	r3, 80096fe <__swsetup_r+0x16>
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f981 	bl	8009a00 <__sinit>
 80096fe:	4b2e      	ldr	r3, [pc, #184]	; (80097b8 <__swsetup_r+0xd0>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d10f      	bne.n	8009724 <__swsetup_r+0x3c>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800970c:	0719      	lsls	r1, r3, #28
 800970e:	d42c      	bmi.n	800976a <__swsetup_r+0x82>
 8009710:	06dd      	lsls	r5, r3, #27
 8009712:	d411      	bmi.n	8009738 <__swsetup_r+0x50>
 8009714:	2309      	movs	r3, #9
 8009716:	6033      	str	r3, [r6, #0]
 8009718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800971c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	e03e      	b.n	80097a2 <__swsetup_r+0xba>
 8009724:	4b25      	ldr	r3, [pc, #148]	; (80097bc <__swsetup_r+0xd4>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d101      	bne.n	800972e <__swsetup_r+0x46>
 800972a:	68ac      	ldr	r4, [r5, #8]
 800972c:	e7eb      	b.n	8009706 <__swsetup_r+0x1e>
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <__swsetup_r+0xd8>)
 8009730:	429c      	cmp	r4, r3
 8009732:	bf08      	it	eq
 8009734:	68ec      	ldreq	r4, [r5, #12]
 8009736:	e7e6      	b.n	8009706 <__swsetup_r+0x1e>
 8009738:	0758      	lsls	r0, r3, #29
 800973a:	d512      	bpl.n	8009762 <__swsetup_r+0x7a>
 800973c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800973e:	b141      	cbz	r1, 8009752 <__swsetup_r+0x6a>
 8009740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <__swsetup_r+0x66>
 8009748:	4630      	mov	r0, r6
 800974a:	f7ff fb2f 	bl	8008dac <_free_r>
 800974e:	2300      	movs	r3, #0
 8009750:	6363      	str	r3, [r4, #52]	; 0x34
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	2300      	movs	r3, #0
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	6023      	str	r3, [r4, #0]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f043 0308 	orr.w	r3, r3, #8
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	b94b      	cbnz	r3, 8009782 <__swsetup_r+0x9a>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009778:	d003      	beq.n	8009782 <__swsetup_r+0x9a>
 800977a:	4621      	mov	r1, r4
 800977c:	4630      	mov	r0, r6
 800977e:	f000 fa05 	bl	8009b8c <__smakebuf_r>
 8009782:	89a0      	ldrh	r0, [r4, #12]
 8009784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009788:	f010 0301 	ands.w	r3, r0, #1
 800978c:	d00a      	beq.n	80097a4 <__swsetup_r+0xbc>
 800978e:	2300      	movs	r3, #0
 8009790:	60a3      	str	r3, [r4, #8]
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	425b      	negs	r3, r3
 8009796:	61a3      	str	r3, [r4, #24]
 8009798:	6923      	ldr	r3, [r4, #16]
 800979a:	b943      	cbnz	r3, 80097ae <__swsetup_r+0xc6>
 800979c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097a0:	d1ba      	bne.n	8009718 <__swsetup_r+0x30>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	0781      	lsls	r1, r0, #30
 80097a6:	bf58      	it	pl
 80097a8:	6963      	ldrpl	r3, [r4, #20]
 80097aa:	60a3      	str	r3, [r4, #8]
 80097ac:	e7f4      	b.n	8009798 <__swsetup_r+0xb0>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e7f7      	b.n	80097a2 <__swsetup_r+0xba>
 80097b2:	bf00      	nop
 80097b4:	20000010 	.word	0x20000010
 80097b8:	0800a2ec 	.word	0x0800a2ec
 80097bc:	0800a30c 	.word	0x0800a30c
 80097c0:	0800a2cc 	.word	0x0800a2cc

080097c4 <abort>:
 80097c4:	2006      	movs	r0, #6
 80097c6:	b508      	push	{r3, lr}
 80097c8:	f000 fa50 	bl	8009c6c <raise>
 80097cc:	2001      	movs	r0, #1
 80097ce:	f7f8 fec2 	bl	8002556 <_exit>
	...

080097d4 <__sflush_r>:
 80097d4:	898a      	ldrh	r2, [r1, #12]
 80097d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d8:	4605      	mov	r5, r0
 80097da:	0710      	lsls	r0, r2, #28
 80097dc:	460c      	mov	r4, r1
 80097de:	d457      	bmi.n	8009890 <__sflush_r+0xbc>
 80097e0:	684b      	ldr	r3, [r1, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dc04      	bgt.n	80097f0 <__sflush_r+0x1c>
 80097e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	dc01      	bgt.n	80097f0 <__sflush_r+0x1c>
 80097ec:	2000      	movs	r0, #0
 80097ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097f2:	2e00      	cmp	r6, #0
 80097f4:	d0fa      	beq.n	80097ec <__sflush_r+0x18>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097fc:	682f      	ldr	r7, [r5, #0]
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	d032      	beq.n	8009868 <__sflush_r+0x94>
 8009802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	075a      	lsls	r2, r3, #29
 8009808:	d505      	bpl.n	8009816 <__sflush_r+0x42>
 800980a:	6863      	ldr	r3, [r4, #4]
 800980c:	1ac0      	subs	r0, r0, r3
 800980e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009810:	b10b      	cbz	r3, 8009816 <__sflush_r+0x42>
 8009812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009814:	1ac0      	subs	r0, r0, r3
 8009816:	2300      	movs	r3, #0
 8009818:	4602      	mov	r2, r0
 800981a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800981c:	4628      	mov	r0, r5
 800981e:	6a21      	ldr	r1, [r4, #32]
 8009820:	47b0      	blx	r6
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	d106      	bne.n	8009836 <__sflush_r+0x62>
 8009828:	6829      	ldr	r1, [r5, #0]
 800982a:	291d      	cmp	r1, #29
 800982c:	d82c      	bhi.n	8009888 <__sflush_r+0xb4>
 800982e:	4a29      	ldr	r2, [pc, #164]	; (80098d4 <__sflush_r+0x100>)
 8009830:	40ca      	lsrs	r2, r1
 8009832:	07d6      	lsls	r6, r2, #31
 8009834:	d528      	bpl.n	8009888 <__sflush_r+0xb4>
 8009836:	2200      	movs	r2, #0
 8009838:	6062      	str	r2, [r4, #4]
 800983a:	6922      	ldr	r2, [r4, #16]
 800983c:	04d9      	lsls	r1, r3, #19
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	d504      	bpl.n	800984c <__sflush_r+0x78>
 8009842:	1c42      	adds	r2, r0, #1
 8009844:	d101      	bne.n	800984a <__sflush_r+0x76>
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	b903      	cbnz	r3, 800984c <__sflush_r+0x78>
 800984a:	6560      	str	r0, [r4, #84]	; 0x54
 800984c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800984e:	602f      	str	r7, [r5, #0]
 8009850:	2900      	cmp	r1, #0
 8009852:	d0cb      	beq.n	80097ec <__sflush_r+0x18>
 8009854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009858:	4299      	cmp	r1, r3
 800985a:	d002      	beq.n	8009862 <__sflush_r+0x8e>
 800985c:	4628      	mov	r0, r5
 800985e:	f7ff faa5 	bl	8008dac <_free_r>
 8009862:	2000      	movs	r0, #0
 8009864:	6360      	str	r0, [r4, #52]	; 0x34
 8009866:	e7c2      	b.n	80097ee <__sflush_r+0x1a>
 8009868:	6a21      	ldr	r1, [r4, #32]
 800986a:	2301      	movs	r3, #1
 800986c:	4628      	mov	r0, r5
 800986e:	47b0      	blx	r6
 8009870:	1c41      	adds	r1, r0, #1
 8009872:	d1c7      	bne.n	8009804 <__sflush_r+0x30>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0c4      	beq.n	8009804 <__sflush_r+0x30>
 800987a:	2b1d      	cmp	r3, #29
 800987c:	d001      	beq.n	8009882 <__sflush_r+0xae>
 800987e:	2b16      	cmp	r3, #22
 8009880:	d101      	bne.n	8009886 <__sflush_r+0xb2>
 8009882:	602f      	str	r7, [r5, #0]
 8009884:	e7b2      	b.n	80097ec <__sflush_r+0x18>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	e7ae      	b.n	80097ee <__sflush_r+0x1a>
 8009890:	690f      	ldr	r7, [r1, #16]
 8009892:	2f00      	cmp	r7, #0
 8009894:	d0aa      	beq.n	80097ec <__sflush_r+0x18>
 8009896:	0793      	lsls	r3, r2, #30
 8009898:	bf18      	it	ne
 800989a:	2300      	movne	r3, #0
 800989c:	680e      	ldr	r6, [r1, #0]
 800989e:	bf08      	it	eq
 80098a0:	694b      	ldreq	r3, [r1, #20]
 80098a2:	1bf6      	subs	r6, r6, r7
 80098a4:	600f      	str	r7, [r1, #0]
 80098a6:	608b      	str	r3, [r1, #8]
 80098a8:	2e00      	cmp	r6, #0
 80098aa:	dd9f      	ble.n	80097ec <__sflush_r+0x18>
 80098ac:	4633      	mov	r3, r6
 80098ae:	463a      	mov	r2, r7
 80098b0:	4628      	mov	r0, r5
 80098b2:	6a21      	ldr	r1, [r4, #32]
 80098b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80098b8:	47e0      	blx	ip
 80098ba:	2800      	cmp	r0, #0
 80098bc:	dc06      	bgt.n	80098cc <__sflush_r+0xf8>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	e790      	b.n	80097ee <__sflush_r+0x1a>
 80098cc:	4407      	add	r7, r0
 80098ce:	1a36      	subs	r6, r6, r0
 80098d0:	e7ea      	b.n	80098a8 <__sflush_r+0xd4>
 80098d2:	bf00      	nop
 80098d4:	20400001 	.word	0x20400001

080098d8 <_fflush_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	690b      	ldr	r3, [r1, #16]
 80098dc:	4605      	mov	r5, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	b913      	cbnz	r3, 80098e8 <_fflush_r+0x10>
 80098e2:	2500      	movs	r5, #0
 80098e4:	4628      	mov	r0, r5
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	b118      	cbz	r0, 80098f2 <_fflush_r+0x1a>
 80098ea:	6983      	ldr	r3, [r0, #24]
 80098ec:	b90b      	cbnz	r3, 80098f2 <_fflush_r+0x1a>
 80098ee:	f000 f887 	bl	8009a00 <__sinit>
 80098f2:	4b14      	ldr	r3, [pc, #80]	; (8009944 <_fflush_r+0x6c>)
 80098f4:	429c      	cmp	r4, r3
 80098f6:	d11b      	bne.n	8009930 <_fflush_r+0x58>
 80098f8:	686c      	ldr	r4, [r5, #4]
 80098fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0ef      	beq.n	80098e2 <_fflush_r+0xa>
 8009902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009904:	07d0      	lsls	r0, r2, #31
 8009906:	d404      	bmi.n	8009912 <_fflush_r+0x3a>
 8009908:	0599      	lsls	r1, r3, #22
 800990a:	d402      	bmi.n	8009912 <_fflush_r+0x3a>
 800990c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800990e:	f000 f915 	bl	8009b3c <__retarget_lock_acquire_recursive>
 8009912:	4628      	mov	r0, r5
 8009914:	4621      	mov	r1, r4
 8009916:	f7ff ff5d 	bl	80097d4 <__sflush_r>
 800991a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800991c:	4605      	mov	r5, r0
 800991e:	07da      	lsls	r2, r3, #31
 8009920:	d4e0      	bmi.n	80098e4 <_fflush_r+0xc>
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	059b      	lsls	r3, r3, #22
 8009926:	d4dd      	bmi.n	80098e4 <_fflush_r+0xc>
 8009928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992a:	f000 f908 	bl	8009b3e <__retarget_lock_release_recursive>
 800992e:	e7d9      	b.n	80098e4 <_fflush_r+0xc>
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <_fflush_r+0x70>)
 8009932:	429c      	cmp	r4, r3
 8009934:	d101      	bne.n	800993a <_fflush_r+0x62>
 8009936:	68ac      	ldr	r4, [r5, #8]
 8009938:	e7df      	b.n	80098fa <_fflush_r+0x22>
 800993a:	4b04      	ldr	r3, [pc, #16]	; (800994c <_fflush_r+0x74>)
 800993c:	429c      	cmp	r4, r3
 800993e:	bf08      	it	eq
 8009940:	68ec      	ldreq	r4, [r5, #12]
 8009942:	e7da      	b.n	80098fa <_fflush_r+0x22>
 8009944:	0800a2ec 	.word	0x0800a2ec
 8009948:	0800a30c 	.word	0x0800a30c
 800994c:	0800a2cc 	.word	0x0800a2cc

08009950 <std>:
 8009950:	2300      	movs	r3, #0
 8009952:	b510      	push	{r4, lr}
 8009954:	4604      	mov	r4, r0
 8009956:	e9c0 3300 	strd	r3, r3, [r0]
 800995a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800995e:	6083      	str	r3, [r0, #8]
 8009960:	8181      	strh	r1, [r0, #12]
 8009962:	6643      	str	r3, [r0, #100]	; 0x64
 8009964:	81c2      	strh	r2, [r0, #14]
 8009966:	6183      	str	r3, [r0, #24]
 8009968:	4619      	mov	r1, r3
 800996a:	2208      	movs	r2, #8
 800996c:	305c      	adds	r0, #92	; 0x5c
 800996e:	f7fb fe0d 	bl	800558c <memset>
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <std+0x38>)
 8009974:	6224      	str	r4, [r4, #32]
 8009976:	6263      	str	r3, [r4, #36]	; 0x24
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <std+0x3c>)
 800997a:	62a3      	str	r3, [r4, #40]	; 0x28
 800997c:	4b04      	ldr	r3, [pc, #16]	; (8009990 <std+0x40>)
 800997e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009980:	4b04      	ldr	r3, [pc, #16]	; (8009994 <std+0x44>)
 8009982:	6323      	str	r3, [r4, #48]	; 0x30
 8009984:	bd10      	pop	{r4, pc}
 8009986:	bf00      	nop
 8009988:	08009ca5 	.word	0x08009ca5
 800998c:	08009cc7 	.word	0x08009cc7
 8009990:	08009cff 	.word	0x08009cff
 8009994:	08009d23 	.word	0x08009d23

08009998 <_cleanup_r>:
 8009998:	4901      	ldr	r1, [pc, #4]	; (80099a0 <_cleanup_r+0x8>)
 800999a:	f000 b8af 	b.w	8009afc <_fwalk_reent>
 800999e:	bf00      	nop
 80099a0:	080098d9 	.word	0x080098d9

080099a4 <__sfmoreglue>:
 80099a4:	2268      	movs	r2, #104	; 0x68
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	1e4d      	subs	r5, r1, #1
 80099aa:	4355      	muls	r5, r2
 80099ac:	460e      	mov	r6, r1
 80099ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099b2:	f7ff fa63 	bl	8008e7c <_malloc_r>
 80099b6:	4604      	mov	r4, r0
 80099b8:	b140      	cbz	r0, 80099cc <__sfmoreglue+0x28>
 80099ba:	2100      	movs	r1, #0
 80099bc:	e9c0 1600 	strd	r1, r6, [r0]
 80099c0:	300c      	adds	r0, #12
 80099c2:	60a0      	str	r0, [r4, #8]
 80099c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099c8:	f7fb fde0 	bl	800558c <memset>
 80099cc:	4620      	mov	r0, r4
 80099ce:	bd70      	pop	{r4, r5, r6, pc}

080099d0 <__sfp_lock_acquire>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__sfp_lock_acquire+0x8>)
 80099d2:	f000 b8b3 	b.w	8009b3c <__retarget_lock_acquire_recursive>
 80099d6:	bf00      	nop
 80099d8:	2000075d 	.word	0x2000075d

080099dc <__sfp_lock_release>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__sfp_lock_release+0x8>)
 80099de:	f000 b8ae 	b.w	8009b3e <__retarget_lock_release_recursive>
 80099e2:	bf00      	nop
 80099e4:	2000075d 	.word	0x2000075d

080099e8 <__sinit_lock_acquire>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__sinit_lock_acquire+0x8>)
 80099ea:	f000 b8a7 	b.w	8009b3c <__retarget_lock_acquire_recursive>
 80099ee:	bf00      	nop
 80099f0:	2000075e 	.word	0x2000075e

080099f4 <__sinit_lock_release>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__sinit_lock_release+0x8>)
 80099f6:	f000 b8a2 	b.w	8009b3e <__retarget_lock_release_recursive>
 80099fa:	bf00      	nop
 80099fc:	2000075e 	.word	0x2000075e

08009a00 <__sinit>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	4604      	mov	r4, r0
 8009a04:	f7ff fff0 	bl	80099e8 <__sinit_lock_acquire>
 8009a08:	69a3      	ldr	r3, [r4, #24]
 8009a0a:	b11b      	cbz	r3, 8009a14 <__sinit+0x14>
 8009a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a10:	f7ff bff0 	b.w	80099f4 <__sinit_lock_release>
 8009a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a18:	6523      	str	r3, [r4, #80]	; 0x50
 8009a1a:	4b13      	ldr	r3, [pc, #76]	; (8009a68 <__sinit+0x68>)
 8009a1c:	4a13      	ldr	r2, [pc, #76]	; (8009a6c <__sinit+0x6c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a22:	42a3      	cmp	r3, r4
 8009a24:	bf08      	it	eq
 8009a26:	2301      	moveq	r3, #1
 8009a28:	4620      	mov	r0, r4
 8009a2a:	bf08      	it	eq
 8009a2c:	61a3      	streq	r3, [r4, #24]
 8009a2e:	f000 f81f 	bl	8009a70 <__sfp>
 8009a32:	6060      	str	r0, [r4, #4]
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 f81b 	bl	8009a70 <__sfp>
 8009a3a:	60a0      	str	r0, [r4, #8]
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f817 	bl	8009a70 <__sfp>
 8009a42:	2200      	movs	r2, #0
 8009a44:	2104      	movs	r1, #4
 8009a46:	60e0      	str	r0, [r4, #12]
 8009a48:	6860      	ldr	r0, [r4, #4]
 8009a4a:	f7ff ff81 	bl	8009950 <std>
 8009a4e:	2201      	movs	r2, #1
 8009a50:	2109      	movs	r1, #9
 8009a52:	68a0      	ldr	r0, [r4, #8]
 8009a54:	f7ff ff7c 	bl	8009950 <std>
 8009a58:	2202      	movs	r2, #2
 8009a5a:	2112      	movs	r1, #18
 8009a5c:	68e0      	ldr	r0, [r4, #12]
 8009a5e:	f7ff ff77 	bl	8009950 <std>
 8009a62:	2301      	movs	r3, #1
 8009a64:	61a3      	str	r3, [r4, #24]
 8009a66:	e7d1      	b.n	8009a0c <__sinit+0xc>
 8009a68:	08009e88 	.word	0x08009e88
 8009a6c:	08009999 	.word	0x08009999

08009a70 <__sfp>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	4607      	mov	r7, r0
 8009a74:	f7ff ffac 	bl	80099d0 <__sfp_lock_acquire>
 8009a78:	4b1e      	ldr	r3, [pc, #120]	; (8009af4 <__sfp+0x84>)
 8009a7a:	681e      	ldr	r6, [r3, #0]
 8009a7c:	69b3      	ldr	r3, [r6, #24]
 8009a7e:	b913      	cbnz	r3, 8009a86 <__sfp+0x16>
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7ff ffbd 	bl	8009a00 <__sinit>
 8009a86:	3648      	adds	r6, #72	; 0x48
 8009a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	d503      	bpl.n	8009a98 <__sfp+0x28>
 8009a90:	6833      	ldr	r3, [r6, #0]
 8009a92:	b30b      	cbz	r3, 8009ad8 <__sfp+0x68>
 8009a94:	6836      	ldr	r6, [r6, #0]
 8009a96:	e7f7      	b.n	8009a88 <__sfp+0x18>
 8009a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a9c:	b9d5      	cbnz	r5, 8009ad4 <__sfp+0x64>
 8009a9e:	4b16      	ldr	r3, [pc, #88]	; (8009af8 <__sfp+0x88>)
 8009aa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009aa4:	60e3      	str	r3, [r4, #12]
 8009aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8009aa8:	f000 f847 	bl	8009b3a <__retarget_lock_init_recursive>
 8009aac:	f7ff ff96 	bl	80099dc <__sfp_lock_release>
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009abc:	6025      	str	r5, [r4, #0]
 8009abe:	61a5      	str	r5, [r4, #24]
 8009ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ac4:	f7fb fd62 	bl	800558c <memset>
 8009ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad4:	3468      	adds	r4, #104	; 0x68
 8009ad6:	e7d9      	b.n	8009a8c <__sfp+0x1c>
 8009ad8:	2104      	movs	r1, #4
 8009ada:	4638      	mov	r0, r7
 8009adc:	f7ff ff62 	bl	80099a4 <__sfmoreglue>
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	6030      	str	r0, [r6, #0]
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d1d5      	bne.n	8009a94 <__sfp+0x24>
 8009ae8:	f7ff ff78 	bl	80099dc <__sfp_lock_release>
 8009aec:	230c      	movs	r3, #12
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	e7ee      	b.n	8009ad0 <__sfp+0x60>
 8009af2:	bf00      	nop
 8009af4:	08009e88 	.word	0x08009e88
 8009af8:	ffff0001 	.word	0xffff0001

08009afc <_fwalk_reent>:
 8009afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b00:	4606      	mov	r6, r0
 8009b02:	4688      	mov	r8, r1
 8009b04:	2700      	movs	r7, #0
 8009b06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b12:	d505      	bpl.n	8009b20 <_fwalk_reent+0x24>
 8009b14:	6824      	ldr	r4, [r4, #0]
 8009b16:	2c00      	cmp	r4, #0
 8009b18:	d1f7      	bne.n	8009b0a <_fwalk_reent+0xe>
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b20:	89ab      	ldrh	r3, [r5, #12]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d907      	bls.n	8009b36 <_fwalk_reent+0x3a>
 8009b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	d003      	beq.n	8009b36 <_fwalk_reent+0x3a>
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4630      	mov	r0, r6
 8009b32:	47c0      	blx	r8
 8009b34:	4307      	orrs	r7, r0
 8009b36:	3568      	adds	r5, #104	; 0x68
 8009b38:	e7e9      	b.n	8009b0e <_fwalk_reent+0x12>

08009b3a <__retarget_lock_init_recursive>:
 8009b3a:	4770      	bx	lr

08009b3c <__retarget_lock_acquire_recursive>:
 8009b3c:	4770      	bx	lr

08009b3e <__retarget_lock_release_recursive>:
 8009b3e:	4770      	bx	lr

08009b40 <__swhatbuf_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	460e      	mov	r6, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	4614      	mov	r4, r2
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	461d      	mov	r5, r3
 8009b4e:	b096      	sub	sp, #88	; 0x58
 8009b50:	da08      	bge.n	8009b64 <__swhatbuf_r+0x24>
 8009b52:	2200      	movs	r2, #0
 8009b54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b58:	602a      	str	r2, [r5, #0]
 8009b5a:	061a      	lsls	r2, r3, #24
 8009b5c:	d410      	bmi.n	8009b80 <__swhatbuf_r+0x40>
 8009b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b62:	e00e      	b.n	8009b82 <__swhatbuf_r+0x42>
 8009b64:	466a      	mov	r2, sp
 8009b66:	f000 f903 	bl	8009d70 <_fstat_r>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	dbf1      	blt.n	8009b52 <__swhatbuf_r+0x12>
 8009b6e:	9a01      	ldr	r2, [sp, #4]
 8009b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b78:	425a      	negs	r2, r3
 8009b7a:	415a      	adcs	r2, r3
 8009b7c:	602a      	str	r2, [r5, #0]
 8009b7e:	e7ee      	b.n	8009b5e <__swhatbuf_r+0x1e>
 8009b80:	2340      	movs	r3, #64	; 0x40
 8009b82:	2000      	movs	r0, #0
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	b016      	add	sp, #88	; 0x58
 8009b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b8c <__smakebuf_r>:
 8009b8c:	898b      	ldrh	r3, [r1, #12]
 8009b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b90:	079d      	lsls	r5, r3, #30
 8009b92:	4606      	mov	r6, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	d507      	bpl.n	8009ba8 <__smakebuf_r+0x1c>
 8009b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	6163      	str	r3, [r4, #20]
 8009ba4:	b002      	add	sp, #8
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	466a      	mov	r2, sp
 8009baa:	ab01      	add	r3, sp, #4
 8009bac:	f7ff ffc8 	bl	8009b40 <__swhatbuf_r>
 8009bb0:	9900      	ldr	r1, [sp, #0]
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff f961 	bl	8008e7c <_malloc_r>
 8009bba:	b948      	cbnz	r0, 8009bd0 <__smakebuf_r+0x44>
 8009bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc0:	059a      	lsls	r2, r3, #22
 8009bc2:	d4ef      	bmi.n	8009ba4 <__smakebuf_r+0x18>
 8009bc4:	f023 0303 	bic.w	r3, r3, #3
 8009bc8:	f043 0302 	orr.w	r3, r3, #2
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	e7e3      	b.n	8009b98 <__smakebuf_r+0xc>
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <__smakebuf_r+0x7c>)
 8009bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	6020      	str	r0, [r4, #0]
 8009bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bdc:	81a3      	strh	r3, [r4, #12]
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	6120      	str	r0, [r4, #16]
 8009be2:	6163      	str	r3, [r4, #20]
 8009be4:	9b01      	ldr	r3, [sp, #4]
 8009be6:	b15b      	cbz	r3, 8009c00 <__smakebuf_r+0x74>
 8009be8:	4630      	mov	r0, r6
 8009bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bee:	f000 f8d1 	bl	8009d94 <_isatty_r>
 8009bf2:	b128      	cbz	r0, 8009c00 <__smakebuf_r+0x74>
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	81a3      	strh	r3, [r4, #12]
 8009c00:	89a0      	ldrh	r0, [r4, #12]
 8009c02:	4305      	orrs	r5, r0
 8009c04:	81a5      	strh	r5, [r4, #12]
 8009c06:	e7cd      	b.n	8009ba4 <__smakebuf_r+0x18>
 8009c08:	08009999 	.word	0x08009999

08009c0c <_malloc_usable_size_r>:
 8009c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c10:	1f18      	subs	r0, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfbc      	itt	lt
 8009c16:	580b      	ldrlt	r3, [r1, r0]
 8009c18:	18c0      	addlt	r0, r0, r3
 8009c1a:	4770      	bx	lr

08009c1c <_raise_r>:
 8009c1c:	291f      	cmp	r1, #31
 8009c1e:	b538      	push	{r3, r4, r5, lr}
 8009c20:	4604      	mov	r4, r0
 8009c22:	460d      	mov	r5, r1
 8009c24:	d904      	bls.n	8009c30 <_raise_r+0x14>
 8009c26:	2316      	movs	r3, #22
 8009c28:	6003      	str	r3, [r0, #0]
 8009c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c32:	b112      	cbz	r2, 8009c3a <_raise_r+0x1e>
 8009c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c38:	b94b      	cbnz	r3, 8009c4e <_raise_r+0x32>
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 f830 	bl	8009ca0 <_getpid_r>
 8009c40:	462a      	mov	r2, r5
 8009c42:	4601      	mov	r1, r0
 8009c44:	4620      	mov	r0, r4
 8009c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c4a:	f000 b817 	b.w	8009c7c <_kill_r>
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d00a      	beq.n	8009c68 <_raise_r+0x4c>
 8009c52:	1c59      	adds	r1, r3, #1
 8009c54:	d103      	bne.n	8009c5e <_raise_r+0x42>
 8009c56:	2316      	movs	r3, #22
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	2001      	movs	r0, #1
 8009c5c:	e7e7      	b.n	8009c2e <_raise_r+0x12>
 8009c5e:	2400      	movs	r4, #0
 8009c60:	4628      	mov	r0, r5
 8009c62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c66:	4798      	blx	r3
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e7e0      	b.n	8009c2e <_raise_r+0x12>

08009c6c <raise>:
 8009c6c:	4b02      	ldr	r3, [pc, #8]	; (8009c78 <raise+0xc>)
 8009c6e:	4601      	mov	r1, r0
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	f7ff bfd3 	b.w	8009c1c <_raise_r>
 8009c76:	bf00      	nop
 8009c78:	20000010 	.word	0x20000010

08009c7c <_kill_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4d06      	ldr	r5, [pc, #24]	; (8009c9c <_kill_r+0x20>)
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	4611      	mov	r1, r2
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f7f8 fc54 	bl	8002536 <_kill>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	d102      	bne.n	8009c98 <_kill_r+0x1c>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	b103      	cbz	r3, 8009c98 <_kill_r+0x1c>
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	bd38      	pop	{r3, r4, r5, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000758 	.word	0x20000758

08009ca0 <_getpid_r>:
 8009ca0:	f7f8 bc42 	b.w	8002528 <_getpid>

08009ca4 <__sread>:
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cac:	f000 f894 	bl	8009dd8 <_read_r>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	bfab      	itete	ge
 8009cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8009cb8:	181b      	addge	r3, r3, r0
 8009cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cbe:	bfac      	ite	ge
 8009cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cc2:	81a3      	strhlt	r3, [r4, #12]
 8009cc4:	bd10      	pop	{r4, pc}

08009cc6 <__swrite>:
 8009cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cca:	461f      	mov	r7, r3
 8009ccc:	898b      	ldrh	r3, [r1, #12]
 8009cce:	4605      	mov	r5, r0
 8009cd0:	05db      	lsls	r3, r3, #23
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	d505      	bpl.n	8009ce4 <__swrite+0x1e>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce0:	f000 f868 	bl	8009db4 <_lseek_r>
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	4628      	mov	r0, r5
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfa:	f000 b817 	b.w	8009d2c <_write_r>

08009cfe <__sseek>:
 8009cfe:	b510      	push	{r4, lr}
 8009d00:	460c      	mov	r4, r1
 8009d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d06:	f000 f855 	bl	8009db4 <_lseek_r>
 8009d0a:	1c43      	adds	r3, r0, #1
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	bf15      	itete	ne
 8009d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d1a:	81a3      	strheq	r3, [r4, #12]
 8009d1c:	bf18      	it	ne
 8009d1e:	81a3      	strhne	r3, [r4, #12]
 8009d20:	bd10      	pop	{r4, pc}

08009d22 <__sclose>:
 8009d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d26:	f000 b813 	b.w	8009d50 <_close_r>
	...

08009d2c <_write_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	4611      	mov	r1, r2
 8009d34:	2200      	movs	r2, #0
 8009d36:	4d05      	ldr	r5, [pc, #20]	; (8009d4c <_write_r+0x20>)
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f8 fc32 	bl	80025a4 <_write>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_write_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_write_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20000758 	.word	0x20000758

08009d50 <_close_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	2300      	movs	r3, #0
 8009d54:	4d05      	ldr	r5, [pc, #20]	; (8009d6c <_close_r+0x1c>)
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	602b      	str	r3, [r5, #0]
 8009d5c:	f7f8 fc3e 	bl	80025dc <_close>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_close_r+0x1a>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_close_r+0x1a>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20000758 	.word	0x20000758

08009d70 <_fstat_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	2300      	movs	r3, #0
 8009d74:	4d06      	ldr	r5, [pc, #24]	; (8009d90 <_fstat_r+0x20>)
 8009d76:	4604      	mov	r4, r0
 8009d78:	4608      	mov	r0, r1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	f7f8 fc38 	bl	80025f2 <_fstat>
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	d102      	bne.n	8009d8c <_fstat_r+0x1c>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	b103      	cbz	r3, 8009d8c <_fstat_r+0x1c>
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}
 8009d8e:	bf00      	nop
 8009d90:	20000758 	.word	0x20000758

08009d94 <_isatty_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	2300      	movs	r3, #0
 8009d98:	4d05      	ldr	r5, [pc, #20]	; (8009db0 <_isatty_r+0x1c>)
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	602b      	str	r3, [r5, #0]
 8009da0:	f7f8 fc36 	bl	8002610 <_isatty>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_isatty_r+0x1a>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_isatty_r+0x1a>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	20000758 	.word	0x20000758

08009db4 <_lseek_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	4611      	mov	r1, r2
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4d05      	ldr	r5, [pc, #20]	; (8009dd4 <_lseek_r+0x20>)
 8009dc0:	602a      	str	r2, [r5, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f7f8 fc2e 	bl	8002624 <_lseek>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_lseek_r+0x1e>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_lseek_r+0x1e>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	20000758 	.word	0x20000758

08009dd8 <_read_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4604      	mov	r4, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	4611      	mov	r1, r2
 8009de0:	2200      	movs	r2, #0
 8009de2:	4d05      	ldr	r5, [pc, #20]	; (8009df8 <_read_r+0x20>)
 8009de4:	602a      	str	r2, [r5, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f7f8 fbbf 	bl	800256a <_read>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_read_r+0x1e>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_read_r+0x1e>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	20000758 	.word	0x20000758

08009dfc <_init>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr

08009e08 <_fini>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr
